"""
Example JSON entry:
    {
        "task_id":35,
        "task":"FindtheDeterminantofaMatrix",
        "code":"#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nconst int MAXN = 105;\ndouble a[MAXN][MAXN];\n\ndouble determinant(int n) {\n\tdouble det = 1.0;\n\tfor (int i = 0; i < n; i++) {\n\t\tint pivot = i;\n\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\tif (abs(a[j][i]) > abs(a[pivot][i])) {\n\t\t\t\tpivot = j;\n\t\t\t}\n\t\t}\n\t\tif (pivot != i) {\n\t\t\tswap(a[i], a[pivot]);\n\t\t\tdet *= -1;\n\t\t}\n\t\tif (a[i][i] == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tdet *= a[i][i];\n\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\tdouble factor = a[j][i] \/ a[i][i];\n\t\t\tfor (int k = i + 1; k < n; k++) {\n\t\t\t\ta[j][k] -= factor * a[i][k];\n\t\t\t}\n\t\t}\n\t}\n\treturn det;\n}\n\nint main() {\n\tint n = 4;\n\tdouble matrix[4][4] = {{1, 0, 2, -1},\n\t\t\t\t\t\t{3, 0, 0, 5},\n\t\t\t\t\t\t{2, 1, 4, -3},\n\t\t\t\t\t\t{1, 0, 5, 0}};\n\tfor (int i = 0; i < n; i++) {\n\t\tfor (int j = 0; j < n; j++) {\n\t\t\ta[i][j] = matrix[i][j];\n\t\t}\n\t}\n\tdouble det = determinant(n);\n\tcout << \"Determinant = \" << det << endl;\n\treturn 0;\n}\n",
        "category":"Matrix Operations",
        "sub_category":"Matrix Operations",
        "adoption":true,
        "reason":null,
        "module_name":"DeterminantCalculator",
        "testbench":"SC_MODULE(Testbench) {\n    \/\/ Use static const for constants\n    static const int N = 4;\n    static const int SIZE = N * N;\n    \n    sc_signal<double> matrix[SIZE];\n    sc_signal<double> det;\n\n    DeterminantCalculator* detCalc;\n\n    SC_CTOR(Testbench) {\n        detCalc = new DeterminantCalculator(\"detCalc\");\n        for (int i = 0; i < SIZE; i++) {\n            detCalc->matrix[i](matrix[i]);\n        }\n        detCalc->det(det);\n        SC_THREAD(run_tests);\n    }\n\n    \/\/ Thread to initialize matrix, check result, and assert correctness\n    void run_tests() {\n        \/\/ Initialize the 4x4 matrix (row-major order)\n        \/\/ Matrix:\n        \/\/ { {1, 0, 2, -1},\n        \/\/   {3, 0, 0, 5},\n        \/\/   {2, 1, 4, -3},\n        \/\/   {1, 0, 5, 0} }\n        double init_matrix[SIZE] = {\n            1, 0, 2, -1,\n            3, 0, 0, 5,\n            2, 1, 4, -3,\n            1, 0, 5, 0\n        };\n        for (int i = 0; i < SIZE; i++) {\n            matrix[i].write(init_matrix[i]);\n        }\n\n        \/\/ Wait for signals to propagate and process to complete\n        wait(2, SC_NS);\n\n        \/\/ Read the result and check\n        double result = det.read();\n        std::cout << \"Determinant = \" << result << std::endl;\n        \/\/ Expected determinant is 30 (as computed in the original code)\n        assert(std::abs(result - 30.0) < 1e-6);\n        std::cout << \"Test passed successfully\" << std::endl;\n\n        sc_stop();\n    }\n};\n\nint sc_main(int argc, char* argv[]) {\n    Testbench tb(\"tb\");\n    sc_start();\n    return 0;\n}\n",
        "signal":"sc_in<double> matrix[SIZE];\nsc_out<double> det;",
        "prompt":[
            {
                "role":"system",
                "content":"You are Qwen, created by Alibaba Cloud. You are a coding expert in C++\/C code analysis and SystemC."
            },
            {
                "role":"user",
                "content":"You will receive C++\/C code as input. \n\n**Tasks**:\n1. Read and thoroughly analyze the provided C++\/C code.\n2. Identify the input(s) and output(s) of the code.\n3. Provide a detailed, line-by-line or block-by-block natural language summary that explains:\n   - The inputs and outputs of the code.\n   - Each major line or block of code and its functionality (e.g., declarations, loops, conditions, data transformations).\n4. Finally, based on your analysis, generate an equivalent SystemC code snippet that preserves the logic and can be used in a high-level synthesis flow.\n\n**Provided Signals** (for testbench integration):\nsc_in<double> matrix[SIZE];\nsc_out<double> det;\n> **Note**: Your generated SystemC code **must** utilize these signals (or equivalent named ports) so it can integrate seamlessly with our existing testbench.\n\n**C++\/C Code**:\n```\n#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nconst int MAXN = 105;\ndouble a[MAXN][MAXN];\n\ndouble determinant(int n) {\n\tdouble det = 1.0;\n\tfor (int i = 0; i < n; i++) {\n\t\tint pivot = i;\n\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\tif (abs(a[j][i]) > abs(a[pivot][i])) {\n\t\t\t\tpivot = j;\n\t\t\t}\n\t\t}\n\t\tif (pivot != i) {\n\t\t\tswap(a[i], a[pivot]);\n\t\t\tdet *= -1;\n\t\t}\n\t\tif (a[i][i] == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tdet *= a[i][i];\n\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\tdouble factor = a[j][i] \/ a[i][i];\n\t\t\tfor (int k = i + 1; k < n; k++) {\n\t\t\t\ta[j][k] -= factor * a[i][k];\n\t\t\t}\n\t\t}\n\t}\n\treturn det;\n}\n\nint main() {\n\tint n = 4;\n\tdouble matrix[4][4] = {{1, 0, 2, -1},\n\t\t\t\t\t\t{3, 0, 0, 5},\n\t\t\t\t\t\t{2, 1, 4, -3},\n\t\t\t\t\t\t{1, 0, 5, 0}};\n\tfor (int i = 0; i < n; i++) {\n\t\tfor (int j = 0; j < n; j++) {\n\t\t\ta[i][j] = matrix[i][j];\n\t\t}\n\t}\n\tdouble det = determinant(n);\n\tcout << \"Determinant = \" << det << endl;\n\treturn 0;\n}\n\n```\n\n**Instructions**:\n- Your answer must explicitly list the inputs and outputs.\n- Your answer must include a clear, line-by-line or block-by-block natural language explanation.\n- After the summary, generate SystemC code that reflects the same behavior.\n- In your SystemC code, incorporate the signals defined above.\n- Provide the SystemC code in a compilable snippet, for example:\n\n\n```\n#include <systemc.h>\n\n\/\/ Use static const for constants instead of #define\nstatic const int N = 4;\nstatic const int SIZE = N * N;\n\n\/\/ Module that performs matrix addition\nSC_MODULE(MatrixAdder) {\n    \/\/ Input ports for matrices A and B (flattened as 1D arrays)\n    sc_in<int> A[SIZE];\n    sc_in<int> B[SIZE];\n    \/\/ Output ports for matrix C (flattened as 1D array)\n    sc_out<int> C[SIZE];\n\n    SC_CTOR(MatrixAdder) {\n        \/\/ Use an SC_METHOD to perform combinational matrix addition\n        SC_METHOD(do_add);\n        for (int i = 0; i < SIZE; i++) {\n            sensitive << A[i] << B[i];\n        }\n    }\n\n    \/\/ Method that adds corresponding elements of A and B\n    void do_add() {\n        for (int i = 0; i < SIZE; i++) {\n            C[i].write(A[i].read() + B[i].read());\n        }\n    }\n};\n```\n\n\nEnsure that the SystemC code you provide faithfully captures the logic of the original C++\/C source.\nMake the explanation thorough and accessible."
            }
        ]
    },
"""
