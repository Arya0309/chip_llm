[
    {
        "catagory":"basic_math_operation",
        "example":"#include <systemc.h>\n\n// Module that adds two integers\nSC_MODULE(Adder) {\n    sc_in<int> a;  // Input port for the first number\n    sc_in<int> b;  // Input port for the second number\n    sc_out<int> sum; // Output port for the sum\n\n    // Constructor\n    SC_CTOR(Adder) {\n        // Process to perform addition\n        SC_METHOD(add);\n        sensitive << a << b;\n    }\n\n    // Method to add the two numbers\n    void add() {\n        sum.write(a.read() + b.read());\n    }\n};"
    },
    {
        "catagory":"array_operation",
        "example":"#include <systemc.h>\n\n// BubbleSort Module: Implements the bubble sort algorithm\nSC_MODULE(BubbleSort) {\n    sc_in<bool> clk;      // Clock input\n    sc_in<bool> start;    // Signal to start sorting\n    sc_out<bool> done;    // Signal to indicate sorting is complete\n\n    // Internal storage for the array (fixed size of 4 elements)\n    int arr[4];\n\n    // Constructor: register the process\n    SC_CTOR(BubbleSort) {\n        SC_THREAD(sort_process);\n        sensitive << clk.pos();\n    }\n\n    // Process that waits for the start signal and performs sorting\n    void sort_process() {\n        while (true) {\n            wait(); // wait for a clock cycle\n            if (start.read() == true) {\n                bubbleSort(); // perform sorting\n                done.write(true);\n                wait(); // wait for one cycle to signal completion\n                done.write(false);\n            }\n        }\n    }\n\n    // Bubble sort algorithm implementation (sorts the internal array)\n    void bubbleSort() {\n        // Number of elements is fixed at 4\n        const int n = 4;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 0; j < n - i - 1; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    // Swap arr[j] and arr[j+1]\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                }\n            }\n        }\n    }\n\n    // Helper method to load an input array into the module\n    void load_array(const int input[4]) {\n        for (int i = 0; i < 4; i++) {\n            arr[i] = input[i];\n        }\n    }\n\n    // Helper method to read the sorted array from the module\n    void read_array(int output[4]) {\n        for (int i = 0; i < 4; i++) {\n            output[i] = arr[i];\n        }\n    }\n};"
    },
    {
        "catagory":"matrix_operation",
        "example":"#include <systemc.h>\n\n// Use static const for constants instead of #define\nstatic const int N = 4;\nstatic const int SIZE = N * N;\n\n// Module that performs matrix addition\nSC_MODULE(MatrixAdder) {\n    // Input ports for matrices A and B (flattened as 1D arrays)\n    sc_in<int> A[SIZE];\n    sc_in<int> B[SIZE];\n    // Output ports for matrix C (flattened as 1D array)\n    sc_out<int> C[SIZE];\n\n    SC_CTOR(MatrixAdder) {\n        // Use an SC_METHOD to perform combinational matrix addition\n        SC_METHOD(do_add);\n        for (int i = 0; i < SIZE; i++) {\n            sensitive << A[i] << B[i];\n        }\n    }\n\n    // Method that adds corresponding elements of A and B\n    void do_add() {\n        for (int i = 0; i < SIZE; i++) {\n            C[i].write(A[i].read() + B[i].read());\n        }\n    }\n};"
    }
]