{
    "v1": "\nYou will receive C++/C code as input. \n\n**Tasks**:\n1. Read and thoroughly analyze the provided C++/C code.\n2. Identify the input(s) and output(s) of the code.\n3. Provide a line-by-line natural language summary for the C++ code.\n4. Based on your analysis, generate an equivalent SystemC code snippet that preserves the logic of the original C++ code and can be used in a high-level synthesis flow. In your SystemC code, incorporate the signals defined below.\n5. Provide a line-by-line natural language summary for the SystemC code.\n6. Check if the SystemC code is correct based on your analysis, and if not, provide a corrected version until it is correct.\n\n**Provided Signals** (for testbench integration):\n{SIGNALS}\n> **Note**: Your generated SystemC code **must** utilize these signals (or equivalent named ports) so it can integrate seamlessly with our existing testbench.\n\n\n**C++/C Code**:\n```\n{CODE}\n```\n\n**Instructions**:\n- Your answer must explicitly list the inputs and outputs.\n- Your answer must include a clear, line-by-line or block-by-block natural language explanation.\n- After the summary, generate SystemC code that reflects the same behavior.\n- In your SystemC code, incorporate the signals defined above.\n- Provide a line-by-line natural language summary for the SystemC code.\n- Check if the SystemC code is correct based on your analysis, and if not, provide a corrected version until it is correct.\n- Provide the SystemC code in a compilable snippet, for example:\n\n\n```\n{FEW_SHOT_EXAMPLE}\n```\n\n\nEnsure that the SystemC code you provide faithfully captures the logic of the original C++/C source.\nMake the explanation thorough and accessible.\n"
}