[
  {
    "name": "AddTwoMatrices",
    "requirement": "Given the C++ program below, convert it into a functionally equivalent SystemC code. The expected input consists of two 4 by 4 integer matrices.",
    "code": "// C++ program for addition of two matrices\n#include <bits/stdc++.h>\nusing namespace std;\n#define N 4\n\n// This function adds A[][] and B[][],\n// and stores the result in C[][]\nvoid add(int A[][N], int B[][N], int C[][N])\n{\n    int i, j;\n    for (i = 0; i < N; i++)\n        for (j = 0; j < N; j++)\n            C[i][j] = A[i][j] + B[i][j];\n}\n\n// Driver code\nint main()\n{\n    int A[N][N] = { { 1, 1, 1, 1 },\n                    { 2, 2, 2, 2 },\n                    { 3, 3, 3, 3 },\n                    { 4, 4, 4, 4 } };\n\n    int B[N][N] = { { 1, 1, 1, 1 },\n                    { 2, 2, 2, 2 },\n                    { 3, 3, 3, 3 },\n                    { 4, 4, 4, 4 } };\n\n    // To store the result\n    int C[N][N];\n    int i, j;\n    add(A, B, C);\n\n    cout << \"Result matrix is \" << endl;\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < N; j++)\n            cout << C[i][j] << \" \";\n        cout << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "name": "MergeSort",
    "requirement": "Given the C++ program below, convert it into a functionally equivalent SystemC code. The expected input consists of a 6-element integer array.",
    "code": "// C++ program for the implementation of merge sort\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\n// Merges two subarrays of vec.\n// First subarray is vec[left..mid]\n// Second subarray is vec[mid+1..right]\nvoid merge(vector<int>& vec, int left, int mid, int right) {\n    int i, j, k;\n    int n1 = mid - left + 1;\n    int n2 = right - mid;\n\n    // Create temporary vectors\n    vector<int> leftVec(n1), rightVec(n2);\n\n    // Copy data to temporary vectors\n    for (i = 0; i < n1; i++)\n        leftVec[i] = vec[left + i];\n    for (j = 0; j < n2; j++)\n        rightVec[j] = vec[mid + 1 + j];\n\n    // Merge the temporary vectors back into vec[left..right]\n    i = 0;\n    j = 0;\n    k = left;\n    while (i < n1 && j < n2) {\n        if (leftVec[i] <= rightVec[j]) {\n            vec[k] = leftVec[i];\n            i++;\n        } else {\n            vec[k] = rightVec[j];\n            j++;\n        }\n        k++;\n    }\n\n    // Copy the remaining elements of leftVec[], if any\n    while (i < n1) {\n        vec[k] = leftVec[i];\n        i++;\n        k++;\n    }\n\n    // Copy the remaining elements of rightVec[], if any\n    while (j < n2) {\n        vec[k] = rightVec[j];\n        j++;\n        k++;\n    }\n}\n\n// The subarray to be sorted is in the index range [left..right]\nvoid mergeSort(vector<int>& vec, int left, int right) {\n    if (left < right) {\n      \n        // Calculate the midpoint\n        int mid = left + (right - left) / 2;\n\n        // Sort first and second halves\n        mergeSort(vec, left, mid);\n        mergeSort(vec, mid + 1, right);\n\n        // Merge the sorted halves\n        merge(vec, left, mid, right);\n    }\n}\n\nint main() {\n    vector<int> vec = {12, 11, 13, 5, 6, 7};\n    int n = vec.size();\n\n    // Sorting vec using mergesort\n    mergeSort(vec, 0, n - 1);\n\n    for (auto i: vec)\n        cout << i << \" \";\n    return 0;\n}\n"
  },
  {
    "name": "ArrayRotation",
    "requirement": "Given the C++ program below, convert it into a functionally equivalent SystemC code. The expected input consists of a 6-element integer array and a integer.",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n// Function to rotate array\nvoid Rotate(int arr[], int d, int n)\n{\n\t// Storing rotated version of array\n\tint temp[n];\n\n\t// Keeping track of the current index\n\t// of temp[]\n\tint k = 0;\n\n\t// Storing the n - d elements of\n\t// array arr[] to the front of temp[]\n\tfor (int i = d; i < n; i++) {\n\t\ttemp[k] = arr[i];\n\t\tk++;\n\t}\n\n\t// Storing the first d elements of array arr[]\n\t// into temp\n\tfor (int i = 0; i < d; i++) {\n\t\ttemp[k] = arr[i];\n\t\tk++;\n\t}\n\n\t// Copying the elements of temp[] in arr[]\n\t// to get the final rotated array\n\tfor (int i = 0; i < n; i++) {\n\t\tarr[i] = temp[i];\n\t}\n}\n\n// Function to print elements of array\nvoid PrintTheArray(int arr[], int n)\n{\n\tfor (int i = 0; i < n; i++) {\n\t\tcout << arr[i] << \" \";\n\t}\n}\n\n// Driver code\nint main()\n{\n\tint arr[] = { 1, 2, 3, 4, 5, 6, 7 };\n\tint N = sizeof(arr) / sizeof(arr[0]);\n\tint d = 2;\n\n\t// Function calling\n\tRotate(arr, d, N);\n\tPrintTheArray(arr, N);\n\n\treturn 0;\n}\n"
  },
  {
    "name": "FindGCD",
    "requirement": "Given the C++ program below, convert it into a functionally equivalent SystemC code. The expected input consists of two integer numbers.",
    "code": "// C++ program to find GCD of two numbers using simple arithmetic\n#include <bits/stdc++.h>\nusing namespace std;\n\nint gcd(int a, int b) {\n    // Find Minimum of a and b\n    int res = min(a, b);\n\n      // Testing divisiblity with all numbers starting from\n    // min(a, b) to 1\n\n    while (res > 1) {\n\n        // If any number divide both a and b, so we\n        // got the answer\n        if (a % res == 0 && b % res == 0)\n            break;\n        res--;\n    }\n    return res;\n}\n\nint main() {\n    int a = 12, b = 16;\n  \n    // Finding gcd of two numbers a and b\n\n\n    cout << gcd(a, b);\n    return 0;\n}\n"
  }
]