[
  {
        "name": "FindGCD",
        "category": "Easy",
        "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nint gcd(int a, int b) {\n    int res = min(a, b);\n\n    while (res > 1) {\n        if (a % res == 0 && b % res == 0)\n            break;\n        res--;\n    }\n    return res;\n}\n\nint main() {\n    int a = 12, b = 16;\n  \n    cout << gcd(a, b);\n    return 0;\n}\n"
  },
  {
    "name": "MultiplyTwoMatrices",
    "requirement": "Given the C++ program below, convert it into a functionally equivalent SystemC code. The expected input consists of a 2 by 2 integer matrix and a 2 by 3 integer matrix.",
    "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define R1 2\n#define C1 2\n#define R2 2\n#define C2 3\n\nvoid mulMat(int mat1[][C1], int mat2[][C2])\n{\n\tint rslt[R1][C2];\n\n\tcout << \"Multiplication of given two matrices is:\\n\";\n\n\tfor (int i = 0; i < R1; i++) {\n\t\tfor (int j = 0; j < C2; j++) {\n\t\t\trslt[i][j] = 0;\n\n\t\t\tfor (int k = 0; k < R2; k++) {\n\t\t\t\trslt[i][j] += mat1[i][k] * mat2[k][j];\n\t\t\t}\n\n\t\t\tcout << rslt[i][j] << \"\\t\";\n\t\t}\n\n\t\tcout << endl;\n\t}\n}\n\nint main()\n{\n\tint mat1[R1][C1] = { { 1, 1 }, { 2, 2 } };\n\n\tint mat2[R2][C2] = { { 1, 1, 1 }, { 2, 2, 2 } };\n\n\tif (C1 != R2) {\n\t\tcout << \"The number of columns in Matrix-1 must \"\n\t\t\t\t\"be equal to the number of rows in \"\n\t\t\t\t\"Matrix-2\"\n\t\t\t<< endl;\n\t\tcout << \"Please update MACROs according to your \"\n\t\t\t\t\"array dimension in #define section\"\n\t\t\t<< endl;\n\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tmulMat(mat1, mat2);\n\n\treturn 0;\n}\n"
  },
  {
    "name": "AES_128",
    "task_description": "Given the C++ program below, generate SystemC code that is functionally equivalent.",
    "IO_requirement": "Expected input consists of:\n    plaintext: a 16-element 32-bit hexadecimal integer array\n    key: a 16-element 32-bit hexadecimal integer array\nExpected output consists of:\n    ciphertext: a 16-element 32-bit hexadecimal integer array",
    "requirement": "Given the C++ program below, generate SystemC code that is functionally equivalent.\nExpected input consists of:\n    plaintext: a 16-element 32-bit hexadecimal integer array\n    key: a 16-element 32-bit hexadecimal integer array\nExpected output consists of:\n    ciphertext: a 16-element 32-bit hexadecimal integer array",
    "code": "#include <iostream>\nusing namespace std;\n\nstatic const unsigned char sbox[256] = {\n    0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,\n    0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,\n    0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,\n    0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,\n    0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,\n    0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,\n    0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,\n    0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,\n    0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,\n    0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,\n    0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,\n    0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,\n    0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,\n    0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,\n    0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,\n    0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16\n};\n\nstatic const unsigned char Rcon[11] = {\n    0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36\n};\n\nunsigned char xtime(unsigned char x) {\n    return (unsigned char)((x << 1) ^ ((x & 0x80) ? 0x1B : 0x00));\n}\n\nvoid SubBytes(unsigned char state[4][4]) {\n    for(int r=0;r<4;r++)\n        for(int c=0;c<4;c++)\n            state[r][c] = sbox[state[r][c]];\n}\n\nvoid ShiftRows(unsigned char state[4][4]) {\n    unsigned char tmp;\n\n    tmp = state[1][0];\n    for(int c=0;c<3;c++) state[1][c] = state[1][c+1];\n    state[1][3] = tmp;\n\n    swap(state[2][0], state[2][2]);\n    swap(state[2][1], state[2][3]);\n\n    tmp = state[3][3];\n    for(int c=3;c>0;c--) state[3][c] = state[3][c-1];\n    state[3][0] = tmp;\n}\n\nvoid MixColumns(unsigned char state[4][4]) {\n    for(int c=0;c<4;c++) {\n        unsigned char a0 = state[0][c], a1 = state[1][c], a2 = state[2][c], a3 = state[3][c];\n        unsigned char m0 = xtime(a0) ^ (xtime(a1) ^ a1) ^ a2 ^ a3;\n        unsigned char m1 = a0 ^ xtime(a1) ^ (xtime(a2) ^ a2) ^ a3;\n        unsigned char m2 = a0 ^ a1 ^ xtime(a2) ^ (xtime(a3) ^ a3);\n        unsigned char m3 = (xtime(a0) ^ a0) ^ a1 ^ a2 ^ xtime(a3);\n        state[0][c] = m0;\n        state[1][c] = m1;\n        state[2][c] = m2;\n        state[3][c] = m3;\n    }\n}\n\nvoid AddRoundKey(unsigned char state[4][4], const unsigned char roundKey[16]) {\n    for(int r=0;r<4;r++)\n        for(int c=0;c<4;c++)\n            state[r][c] ^= roundKey[c*4 + r];\n}\n\nvoid KeyExpansion(const unsigned char key[16], unsigned char roundKeys[176]) {\n    for(int i=0;i<16;i++) roundKeys[i] = key[i];\n    int bytesGenerated = 16;\n    int rconIter = 1;\n    unsigned char temp[4];\n    while(bytesGenerated < 176) {\n        for(int i=0;i<4;i++) temp[i] = roundKeys[bytesGenerated - 4 + i];\n        if(bytesGenerated % 16 == 0) {\n\n            unsigned char t = temp[0];\n            temp[0]=temp[1]; temp[1]=temp[2]; temp[2]=temp[3]; temp[3]=t;\n\n            for(int i=0;i<4;i++) temp[i] = sbox[temp[i]];\n\n            temp[0] ^= Rcon[rconIter];\n            rconIter++;\n        }\n        for(int i=0;i<4;i++) {\n            roundKeys[bytesGenerated] = roundKeys[bytesGenerated - 16] ^ temp[i];\n            bytesGenerated++;\n        }\n    }\n}\n\nvoid AES128Encrypt(const unsigned char in[16], const unsigned char key[16], unsigned char out[16]) {\n    unsigned char state[4][4];\n    unsigned char roundKeys[176];\n    KeyExpansion(key, roundKeys);\n\n    for(int r=0;r<4;r++)\n        for(int c=0;c<4;c++)\n            state[r][c] = in[c*4 + r];\n\n    AddRoundKey(state, roundKeys);\n\n    for(int round=1; round<=9; round++) {\n        SubBytes(state);\n        ShiftRows(state);\n        MixColumns(state);\n        AddRoundKey(state, roundKeys + round*16);\n    }\n\n    SubBytes(state);\n    ShiftRows(state);\n    AddRoundKey(state, roundKeys + 160);\n\n    for(int r=0;r<4;r++)\n        for(int c=0;c<4;c++)\n            out[c*4 + r] = state[r][c];\n}\n\nint main() {\n    unsigned char plaintext[16] = {\n        0x32,0x43,0xf6,0xa8, 0x88,0x5a,0x30,0x8d,\n        0x31,0x31,0x98,0xa2, 0xe0,0x37,0x07,0x34\n    };\n    unsigned char key[16] = {\n        0x2b,0x7e,0x15,0x16, 0x28,0xae,0xd2,0xa6,\n        0xab,0xf7,0x15,0x88, 0x09,0xcf,0x4f,0x3c\n    };\n    unsigned char cipher[16];\n    AES128Encrypt(plaintext, key, cipher);\n    cout << \"Ciphertext: \";\n    for(int i=0;i<16;i++) {\n        cout << hex << (int)cipher[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}\n"
  }
]