[
  {
    "name": "2D_Convolution",
    "requirement": "Given the C++ program below, convert it into a functionally equivalent SystemC code. The expected input consists of a 4 by 4 double matrix and a 3 by 3 double matrix.",
    "code": "#include <iostream>\nusing namespace std;\n\ndouble* conv2D(\n    const double* input, int in_h, int in_w,\n    const double* kernel, int ker_h, int ker_w)\n{\n    int pad_h = ker_h / 2;\n    int pad_w = ker_w / 2;\n    int padded_h = in_h + 2 * pad_h;\n    int padded_w = in_w + 2 * pad_w;\n    int out_h = in_h;\n    int out_w = in_w;\n\n    double* padded = new double[padded_h * padded_w]();\n    double* output = new double[out_h * out_w];\n\n    for (int i = 0; i < in_h; ++i) {\n        for (int j = 0; j < in_w; ++j) {\n            padded[(i + pad_h) * padded_w + (j + pad_w)] = input[i * in_w + j];\n        }\n    }\n\n    for (int i = 0; i < out_h; ++i) {\n        for (int j = 0; j < out_w; ++j) {\n            double sum = 0.0;\n            for (int m = 0; m < ker_h; ++m) {\n                for (int n = 0; n < ker_w; ++n) {\n                    sum += padded[(i + m) * padded_w + (j + n)]\n                         * kernel[m * ker_w + n];\n                }\n            }\n            output[i * out_w + j] = sum;\n        }\n    }\n\n    delete[] padded;\n    return output;\n}\n\nint main() {\n    const int in_h = 4, in_w = 4;\n    double input[in_h * in_w] = {\n        1, 2, 3, 4,\n        5, 6, 7, 8,\n        9, 8, 7, 6,\n        5, 4, 3, 2\n    };\n\n    const int ker_h = 3, ker_w = 3;\n    double kernel[ker_h * ker_w];\n    for (int i = 0; i < ker_h * ker_w; ++i) {\n        kernel[i] = 1.0 / 9.0;\n    }\n\n    double* result = conv2D(input, in_h, in_w, kernel, ker_h, ker_w);\n\n    cout << \"Result: \" << endl;\n    for (int i = 0; i < in_h; ++i) {\n        for (int j = 0; j < in_w; ++j) {\n            cout << result[i * in_w + j] << \" \";\n        }\n        cout << endl;\n    }\n\n    delete[] result;\n    return 0;\n}\n"
  },
  {
    "name": "AES_128",
    "requirement": "Given the C++ program below, convert it into a functionally equivalent SystemC code. The expected input consists of two 16-element 32-bit hexdecimal integer arrays.",
    "code": "#include <iostream>\nusing namespace std;\n\nstatic const unsigned char sbox[256] = {\n    0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,\n    0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,\n    0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,\n    0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,\n    0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,\n    0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,\n    0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,\n    0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,\n    0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,\n    0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,\n    0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,\n    0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,\n    0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,\n    0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,\n    0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,\n    0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16\n};\n\nstatic const unsigned char Rcon[11] = {\n    0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36\n};\n\nunsigned char xtime(unsigned char x) {\n    return (unsigned char)((x << 1) ^ ((x & 0x80) ? 0x1B : 0x00));\n}\n\nvoid SubBytes(unsigned char state[4][4]) {\n    for(int r=0;r<4;r++)\n        for(int c=0;c<4;c++)\n            state[r][c] = sbox[state[r][c]];\n}\n\nvoid ShiftRows(unsigned char state[4][4]) {\n    unsigned char tmp;\n\n    tmp = state[1][0];\n    for(int c=0;c<3;c++) state[1][c] = state[1][c+1];\n    state[1][3] = tmp;\n\n    swap(state[2][0], state[2][2]);\n    swap(state[2][1], state[2][3]);\n\n    tmp = state[3][3];\n    for(int c=3;c>0;c--) state[3][c] = state[3][c-1];\n    state[3][0] = tmp;\n}\n\nvoid MixColumns(unsigned char state[4][4]) {\n    for(int c=0;c<4;c++) {\n        unsigned char a0 = state[0][c], a1 = state[1][c], a2 = state[2][c], a3 = state[3][c];\n        unsigned char m0 = xtime(a0) ^ (xtime(a1) ^ a1) ^ a2 ^ a3;\n        unsigned char m1 = a0 ^ xtime(a1) ^ (xtime(a2) ^ a2) ^ a3;\n        unsigned char m2 = a0 ^ a1 ^ xtime(a2) ^ (xtime(a3) ^ a3);\n        unsigned char m3 = (xtime(a0) ^ a0) ^ a1 ^ a2 ^ xtime(a3);\n        state[0][c] = m0;\n        state[1][c] = m1;\n        state[2][c] = m2;\n        state[3][c] = m3;\n    }\n}\n\nvoid AddRoundKey(unsigned char state[4][4], const unsigned char roundKey[16]) {\n    for(int r=0;r<4;r++)\n        for(int c=0;c<4;c++)\n            state[r][c] ^= roundKey[c*4 + r];\n}\n\nvoid KeyExpansion(const unsigned char key[16], unsigned char roundKeys[176]) {\n    for(int i=0;i<16;i++) roundKeys[i] = key[i];\n    int bytesGenerated = 16;\n    int rconIter = 1;\n    unsigned char temp[4];\n    while(bytesGenerated < 176) {\n        for(int i=0;i<4;i++) temp[i] = roundKeys[bytesGenerated - 4 + i];\n        if(bytesGenerated % 16 == 0) {\n\n            unsigned char t = temp[0];\n            temp[0]=temp[1]; temp[1]=temp[2]; temp[2]=temp[3]; temp[3]=t;\n\n            for(int i=0;i<4;i++) temp[i] = sbox[temp[i]];\n\n            temp[0] ^= Rcon[rconIter];\n            rconIter++;\n        }\n        for(int i=0;i<4;i++) {\n            roundKeys[bytesGenerated] = roundKeys[bytesGenerated - 16] ^ temp[i];\n            bytesGenerated++;\n        }\n    }\n}\n\nvoid AES128Encrypt(const unsigned char in[16], const unsigned char key[16], unsigned char out[16]) {\n    unsigned char state[4][4];\n    unsigned char roundKeys[176];\n    KeyExpansion(key, roundKeys);\n\n    for(int r=0;r<4;r++)\n        for(int c=0;c<4;c++)\n            state[r][c] = in[c*4 + r];\n\n    AddRoundKey(state, roundKeys);\n\n    for(int round=1; round<=9; round++) {\n        SubBytes(state);\n        ShiftRows(state);\n        MixColumns(state);\n        AddRoundKey(state, roundKeys + round*16);\n    }\n\n    SubBytes(state);\n    ShiftRows(state);\n    AddRoundKey(state, roundKeys + 160);\n\n    for(int r=0;r<4;r++)\n        for(int c=0;c<4;c++)\n            out[c*4 + r] = state[r][c];\n}\n\nint main() {\n    unsigned char plaintext[16] = {\n        0x32,0x43,0xf6,0xa8, 0x88,0x5a,0x30,0x8d,\n        0x31,0x31,0x98,0xa2, 0xe0,0x37,0x07,0x34\n    };\n    unsigned char key[16] = {\n        0x2b,0x7e,0x15,0x16, 0x28,0xae,0xd2,0xa6,\n        0xab,0xf7,0x15,0x88, 0x09,0xcf,0x4f,0x3c\n    };\n    unsigned char cipher[16];\n    AES128Encrypt(plaintext, key, cipher);\n    cout << \"Ciphertext: \";\n    for(int i=0;i<16;i++) {\n        cout << hex << (int)cipher[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}\n"
  },
  {
    "name": "FFT",
    "requirement": "Given the C++ program below, convert it into a functionally equivalent SystemC code. The expected input consists of a 8-element complex integer array.",
    "code": "#include <iostream>\nusing namespace std;\n\nconst double PI = 3.14159265358979323846;\n\nstruct Complex {\n    double re, im;\n    Complex(double r = 0, double i = 0) : re(r), im(i) {}\n    Complex operator+(const Complex &o) const { return Complex(re + o.re, im + o.im); }\n    Complex operator-(const Complex &o) const { return Complex(re - o.re, im - o.im); }\n    Complex operator*(const Complex &o) const { \n        return Complex(re * o.re - im * o.im, re * o.im + im * o.re); \n    }\n};\n\ndouble sin_approx(double x) {\n    while (x > PI) x -= 2 * PI;\n    while (x < -PI) x += 2 * PI;\n    double x3 = x * x * x;\n    double x5 = x3 * x * x;\n    double x7 = x5 * x * x;\n    return x - x3 / 6.0 + x5 / 120.0 - x7 / 5040.0;\n}\n\ndouble cos_approx(double x) {\n    while (x > PI) x -= 2 * PI;\n    while (x < -PI) x += 2 * PI;\n    double x2 = x * x;\n    double x4 = x2 * x2;\n    double x6 = x4 * x2;\n    return 1 - x2 / 2.0 + x4 / 24.0 - x6 / 720.0;\n}\n\nvoid fft(Complex *a, int n) {\n    if (n <= 1) return;\n    Complex *even = new Complex[n/2];\n    Complex *odd = new Complex[n/2];\n    for (int i = 0; i < n/2; ++i) {\n        even[i] = a[2*i];\n        odd[i] = a[2*i + 1];\n    }\n\n    fft(even, n/2);\n    fft(odd,  n/2);\n\n    for (int k = 0; k < n/2; ++k) {\n        double angle = -2 * PI * k / n;\n        Complex w(cos_approx(angle), sin_approx(angle));\n        Complex t = w * odd[k];\n        a[k] = even[k] + t;\n        a[k + n/2] = even[k] - t;\n    }\n    delete[] even;\n    delete[] odd;\n}\n\nint main() {\n    int n = 8;\n    Complex data[8];\n    for (int i = 0; i < n; ++i) {\n        data[i] = Complex(i, 0);\n    }\n\n    fft(data, n);\n\n    for (int i = 0; i < n; ++i) {\n        cout << \"FFT[\" << i << \"] = \"\n             << data[i].re << \" + \" << data[i].im << \"i\\n\";\n    }\n    return 0;\n}\n"
  },
  {
    "name": "Gaussian_Blur",
    "requirement": "Given the C++ program below, convert it into a functionally equivalent SystemC code. The expected input consists of a 64 by 64 integer matrix.",
    "code": "#include <iostream>\nusing namespace std;\n\nvoid gaussianBlur(const float* input, float* output, int width, int height) {\n    const int kernelSize = 5;\n    const int kernelRadius = kernelSize / 2;\n    static const int kernel[5][5] = {\n        { 1,  4,  7,  4, 1},\n        { 4, 16, 26, 16, 4},\n        { 7, 26, 41, 26, 7},\n        { 4, 16, 26, 16, 4},\n        { 1,  4,  7,  4, 1}\n    };\n    const int factor = 273;\n\n    for (int y = 0; y < height; ++y) {\n        for (int x = 0; x < width; ++x) {\n            float sum = 0.0f;\n\n            for (int ky = -kernelRadius; ky <= kernelRadius; ++ky) {\n                for (int kx = -kernelRadius; kx <= kernelRadius; ++kx) {\n                    int px = x + kx;\n                    if (px < 0) px = 0;\n                    else if (px >= width) px = width - 1;\n                    int py = y + ky;\n                    if (py < 0) py = 0;\n                    else if (py >= height) py = height - 1;\n\n                    int weight = kernel[ky + kernelRadius][kx + kernelRadius];\n                    sum += input[py * width + px] * weight;\n                }\n            }\n            output[y * width + x] = sum / factor;\n        }\n    }\n}\n\nint main() {\n    int width  = 64;\n    int height = 64;\n    float* input  = new float[width * height];\n    float* output = new float[width * height];\n\n    for (int i = 0; i < width * height; ++i) {\n        input[i] = static_cast<float>(i % 256) / 255.0f;\n    }\n\n    gaussianBlur(input, output, width, height);\n\n    cout << \"Blurred pixel [0]: \" << output[0] << endl;\n\n    delete[] input;\n    delete[] output;\n    return 0;\n}\n"
  },
  {
    "name": "KNN",
    "requirement": "Given the C++ program below, convert it into a functionally equivalent SystemC code. The expected input consists of a 6 by 3 double matrix, a 6-element integer array and a 3-element double array.",
    "code": "#include <iostream>\nusing namespace std;\n\nconst int NUM_TRAIN = 6;\nconst int DIM = 3;\nconst int K = 3;\n\nint knn(const double train[][DIM], const int labels[], int num_train, const double query_point[]) {\n    double dist[NUM_TRAIN];\n    int idx[NUM_TRAIN];\n\n    for (int i = 0; i < num_train; i++) {\n        double sum = 0.0;\n        for (int d = 0; d < DIM; d++) {\n            double diff = train[i][d] - query_point[d];\n            sum += diff * diff;\n        }\n        dist[i] = sum;\n        idx[i] = i;\n    }\n\n    for (int i = 0; i < K; i++) {\n        int min_j = i;\n        for (int j = i + 1; j < num_train; j++) {\n            if (dist[j] < dist[min_j]) {\n                min_j = j;\n            }\n        }\n        double tmpDist = dist[i]; dist[i] = dist[min_j]; dist[min_j] = tmpDist;\n        int tmpIdx = idx[i];   idx[i]   = idx[min_j];   idx[min_j]   = tmpIdx;\n    }\n\n    int count0 = 0, count1 = 0;\n    for (int i = 0; i < K; i++) {\n        int label = labels[idx[i]];\n        if (label == 0)      count0++;\n        else if (label == 1) count1++;\n    }\n\n    return (count1 > count0) ? 1 : 0;\n}\n\nint main() {\n    double train_data[NUM_TRAIN][DIM] = {\n        {1.0, 2.0, 1.5},\n        {2.0, 1.0, 2.5},\n        {0.5, 1.5, 1.0},\n        {3.0, 3.5, 2.0},\n        {2.5, 2.0, 3.0},\n        {3.5, 0.5, 2.5}\n    };\n    int train_labels[NUM_TRAIN] = {0, 0, 0, 1, 1, 1};\n\n    double query[DIM] = {2.0, 2.0, 2.0};\n\n    int result = knn(train_data, train_labels, NUM_TRAIN, query);\n\n    cout << \"Predicted label: \" << result << endl;\n    return 0;\n}\n"
  },
  {
    "name": "Max_Pooling",
    "requirement": "Given the C++ program below, convert it into a functionally equivalent SystemC code. The expected input consists of a 4 by 4 integer matrix and four integer numbers.",
    "code": "#include <iostream>\nusing namespace std;\n\nvoid maxPooling(const int* input,\n                int in_h, int in_w,\n                int pool_h, int pool_w,\n                int stride_h, int stride_w,\n                int* output,\n                int& out_h, int& out_w) {\n    out_h = (in_h - pool_h) / stride_h + 1;\n    out_w = (in_w - pool_w) / stride_w + 1;\n\n    for (int i = 0; i < out_h; ++i) {\n        for (int j = 0; j < out_w; ++j) {\n            int max_val = input[(i * stride_h) * in_w + (j * stride_w)];\n            for (int m = 0; m < pool_h; ++m) {\n                for (int n = 0; n < pool_w; ++n) {\n                    int idx = (i * stride_h + m) * in_w + (j * stride_w + n);\n                    if (input[idx] > max_val) {\n                        max_val = input[idx];\n                    }\n                }\n            }\n            output[i * out_w + j] = max_val;\n        }\n    }\n}\n\nint main() {\n    const int in_h = 4, in_w = 4;\n    const int pool_h = 2, pool_w = 2;\n    const int stride_h = 2, stride_w = 2;\n\n    int input[in_h * in_w] = {\n         1,  2,  3,  4,\n         5,  6,  7,  8,\n         9, 10, 11, 12,\n        13, 14, 15, 16\n    };\n\n    int out_h, out_w;\n    int output[((in_h - pool_h) / stride_h + 1) *\n               ((in_w - pool_w) / stride_w + 1)];\n\n    maxPooling(input, in_h, in_w,\n               pool_h, pool_w,\n               stride_h, stride_w,\n               output, out_h, out_w);\n\n    cout << \"Output:\\n\";\n    for (int i = 0; i < out_h; ++i) {\n        for (int j = 0; j < out_w; ++j) {\n            cout << output[i * out_w + j] << \" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "name": "Median_Filter",
    "requirement": "Given the C++ program below, convert it into a functionally equivalent SystemC code. The expected input consists of a 5 by 6 integer matrix and a integer number.",
    "code": "#include <iostream>\nusing namespace std;\n\n#define ROWS 5\n#define COLS 6\n\nvoid median_filter(const int input[ROWS][COLS], int output[ROWS][COLS], int rows, int cols, int window_size) {\n    int half = window_size / 2;\n    for (int i = 0; i < rows; ++i) {\n        for (int j = 0; j < cols; ++j) {\n            int count = 0;\n            int* window = new int[window_size * window_size];\n            for (int wi = i - half; wi <= i + half; ++wi) {\n                for (int wj = j - half; wj <= j + half; ++wj) {\n                    if (wi >= 0 && wi < rows && wj >= 0 && wj < cols) {\n                        window[count++] = input[wi][wj];\n                    }\n                }\n            }\n            for (int x = 0; x < count - 1; ++x) {\n                for (int y = x + 1; y < count; ++y) {\n                    if (window[x] > window[y]) {\n                        int tmp = window[x];\n                        window[x] = window[y];\n                        window[y] = tmp;\n                    }\n                }\n            }\n            output[i][j] = window[count / 2];\n            delete[] window;\n        }\n    }\n}\n\nint main() {\n    int input[ROWS][COLS] = {\n        {10, 20, 30, 40, 50, 60},\n        {15, 25, 35, 45, 55, 65},\n        {20, 30, 40, 50, 60, 70},\n        {25, 35, 45, 55, 65, 75},\n        {30, 40, 50, 60, 70, 80}\n    };\n    int output[ROWS][COLS];\n    int window_size = 3;\n\n    median_filter(input, output, ROWS, COLS, window_size);\n\n    for (int i = 0; i < ROWS; ++i) {\n        for (int j = 0; j < COLS; ++j) {\n            cout << output[i][j] << \" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}\n"
  },
  {
    "name": "MLP_FF",
    "requirement": "Given the C++ program below, convert it into a functionally equivalent SystemC code. The expected input consists of a 32-element float array, a 16 by 32 float matrix, a 16-element float array, a 10 by 16 float matrix and a 10-element float array.",
    "code": "#include <iostream>\nusing namespace std;\n\nconst int INPUT_SIZE  = 32;\nconst int HIDDEN_SIZE = 16;\nconst int OUTPUT_SIZE = 10;\n\nvoid mlp_feedforward(\n    const float input[INPUT_SIZE],\n    float hidden[HIDDEN_SIZE],\n    float output[OUTPUT_SIZE],\n    const float w1[HIDDEN_SIZE][INPUT_SIZE],\n    const float b1[HIDDEN_SIZE],\n    const float w2[OUTPUT_SIZE][HIDDEN_SIZE],\n    const float b2[OUTPUT_SIZE]\n) {\n    for (int i = 0; i < HIDDEN_SIZE; ++i) {\n        float sum = b1[i];\n        for (int j = 0; j < INPUT_SIZE; ++j) {\n            sum += w1[i][j] * input[j];\n        }\n        hidden[i] = (sum > 0.0f) ? sum : 0.0f;\n    }\n    for (int i = 0; i < OUTPUT_SIZE; ++i) {\n        float sum = b2[i];\n        for (int j = 0; j < HIDDEN_SIZE; ++j) {\n            sum += w2[i][j] * hidden[j];\n        }\n        output[i] = sum;\n    }\n}\n\nint main() {\n    float input[INPUT_SIZE];\n    for (int i = 0; i < INPUT_SIZE; ++i) {\n        input[i] = i * 0.01f;\n    }\n\n    float hidden[HIDDEN_SIZE];\n    float output[OUTPUT_SIZE];\n\n    static float w1[HIDDEN_SIZE][INPUT_SIZE];\n    static float b1[HIDDEN_SIZE];\n    static float w2[OUTPUT_SIZE][HIDDEN_SIZE];\n    static float b2[OUTPUT_SIZE];\n\n    for (int i = 0; i < HIDDEN_SIZE; ++i) {\n        b1[i] = 0.1f * i;\n        for (int j = 0; j < INPUT_SIZE; ++j) {\n            w1[i][j] = 0.01f * (i + j);\n        }\n    }\n    for (int i = 0; i < OUTPUT_SIZE; ++i) {\n        b2[i] = -0.1f * i;\n        for (int j = 0; j < HIDDEN_SIZE; ++j) {\n            w2[i][j] = 0.01f * (i - j);\n        }\n    }\n\n    mlp_feedforward(input, hidden, output, w1, b1, w2, b2);\n\n    for (int i = 0; i < OUTPUT_SIZE; ++i) {\n        cout << \"Output[\" << i << \"] = \" << output[i] << endl;\n    }\n\n    return 0;\n}\n"
  },
  {
    "name": "Sobel_Edge_Detection",
    "requirement": "Given the C++ program below, convert it into a functionally equivalent SystemC code. The expected input consists of a 64 by 64 integer matrix.",
    "code": "#include <iostream>\nusing namespace std;\n\nvoid sobelEdgeDetection(const unsigned char* input,\n                        unsigned char* output,\n                        int width,\n                        int height)\n{\n    int Gx[3][3] = {\n        {-1, 0, 1},\n        {-2, 0, 2},\n        {-1, 0, 1}\n    };\n    int Gy[3][3] = {\n        {-1, -2, -1},\n        {0, 0, 0},\n        {1, 2, 1}\n    };\n\n    for(int x = 0; x < width; x++){\n        output[x] = 0;\n        output[(height - 1) * width + x] = 0;\n    }\n    for(int y = 0; y < height; y++){\n        output[y * width] = 0;\n        output[y * width + (width - 1)] = 0;\n    }\n\n    for(int y = 1; y < height - 1; y++){\n        for(int x = 1; x < width - 1; x++){\n            int sumX = 0;\n            int sumY = 0;\n            for(int ky = -1; ky <= 1; ky++){\n                for(int kx = -1; kx <= 1; kx++){\n                    int pixel = input[(y + ky) * width + (x + kx)];\n                    sumX += Gx[ky + 1][kx + 1] * pixel;\n                    sumY += Gy[ky + 1][kx + 1] * pixel;\n                }\n            }\n            int magnitude = abs(sumX) + abs(sumY);\n            if(magnitude > 255) magnitude = 255;\n            output[y * width + x] = static_cast<unsigned char>(magnitude);\n        }\n    }\n}\n\nint main()\n{\n    int width  = 64;\n    int height = 64;\n\n    unsigned char* input  = new unsigned char[width * height];\n    unsigned char* output = new unsigned char[width * height];\n\n    for(int i = 0; i < width * height; i++){\n        input[i] = static_cast<unsigned char>(i % 256);\n    }\n\n    sobelEdgeDetection(input, output, width, height);\n\n    for(int i = 0; i < 1000; i++){\n        cout << static_cast<int>(output[i]) << \" \";\n    }\n    cout << endl;\n\n    delete[] input;\n    delete[] output;\n    return 0;\n}\n"
  },
  {
    "name": "Softmax",
    "requirement": "Given the C++ program below, convert it into a functionally equivalent SystemC code. The expected input consists of a 5-element double array.",
    "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nvoid softmax(const double* input, double* output, int length) {\n    double max_val = input[0];\n    for (int i = 1; i < length; ++i) {\n        if (input[i] > max_val) {\n            max_val = input[i];\n        }\n    }\n\n    double sum = 0.0;\n    for (int i = 0; i < length; ++i) {\n        output[i] = exp(input[i] - max_val);\n        sum += output[i];\n    }\n\n    for (int i = 0; i < length; ++i) {\n        output[i] /= sum;\n    }\n}\n\nint main() {\n    const int N = 5;\n    double input[N]  = { 1.0, 2.0, 3.0, 2.0, 1.0 };\n    double output[N];\n\n    softmax(input, output, N);\n\n    cout << \"Softmax result: \";\n    for (int i = 0; i < N; ++i) {\n        cout << output[i] << \" \";\n    }\n    cout << endl;\n\n    return 0;\n}\n"
  },
  {
    "name": "SVM",
    "requirement": "Given the C++ program below, convert it into a functionally equivalent SystemC code. The expected input consists of a 4 by 2 double matrix, a 4-element integer array, two double numbers and a integer number.",
    "code": "#include <iostream>\nusing namespace std;\n\nvoid trainSVM(double* X, int* y,\n              int n,\n              int d,\n              double C,\n              double lr,\n              int epochs,\n              double* w,\n              double& b) {\n    for (int j = 0; j < d; j++) w[j] = 0.0;\n    b = 0.0;\n\n    for (int it = 0; it < epochs; it++) {\n        for (int i = 0; i < n; i++) {\n            double dot = 0.0;\n            for (int j = 0; j < d; j++)\n                dot += w[j] * X[i * d + j];\n            double margin = y[i] * (dot + b);\n\n            if (margin < 1) {\n                for (int j = 0; j < d; j++) {\n                    w[j] += lr * (C * y[i] * X[i * d + j] - w[j]);\n                }\n                b += lr * C * y[i];\n            } else {\n                for (int j = 0; j < d; j++) {\n                    w[j] += lr * (-w[j]);\n                }\n            }\n        }\n    }\n}\n\nint main() {\n    const int n = 4, d = 2;\n    double X[n * d] = {\n        3.0, 3.0,\n        4.0, 3.0,\n        1.0, 1.0,\n        0.0, 2.0\n    };\n    int y[n] = { 1, 1, -1, -1 };\n\n    double w[d];\n    double b;\n    double C = 1.0;\n    double lr = 0.001;\n    int epochs = 1000;\n\n    trainSVM(X, y, n, d, C, lr, epochs, w, b);\n\n    cout << \"Weights: \";\n    for (int j = 0; j < d; j++)\n        cout << w[j] << \" \";\n    cout << \"\\nBias: \" << b << endl;\n\n    return 0;\n}\n"
  }
]