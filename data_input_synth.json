[
    {
        "name": "MultiplyTwoMatrices",
        "category": "Easy",
        "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define R1 2\n#define C1 2\n#define R2 2\n#define C2 3\n\nvoid mulMat(int mat1[][C1], int mat2[][C2])\n{\n\tint rslt[R1][C2];\n\n\tcout << \"Multiplication of given two matrices is:\\n\";\n\n\tfor (int i = 0; i < R1; i++) {\n\t\tfor (int j = 0; j < C2; j++) {\n\t\t\trslt[i][j] = 0;\n\n\t\t\tfor (int k = 0; k < R2; k++) {\n\t\t\t\trslt[i][j] += mat1[i][k] * mat2[k][j];\n\t\t\t}\n\n\t\t\tcout << rslt[i][j] << \"\\t\";\n\t\t}\n\n\t\tcout << endl;\n\t}\n}\n\nint main()\n{\n\tint mat1[R1][C1] = { { 1, 1 }, { 2, 2 } };\n\n\tint mat2[R2][C2] = { { 1, 1, 1 }, { 2, 2, 2 } };\n\n\tif (C1 != R2) {\n\t\tcout << \"The number of columns in Matrix-1 must \"\n\t\t\t\t\"be equal to the number of rows in \"\n\t\t\t\t\"Matrix-2\"\n\t\t\t<< endl;\n\t\tcout << \"Please update MACROs according to your \"\n\t\t\t\t\"array dimension in #define section\"\n\t\t\t<< endl;\n\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tmulMat(mat1, mat2);\n\n\treturn 0;\n}\n"
    },
    {
        "name": "AddTwoMatrices",
        "category": "Easy",
        "code": "#include <bits/stdc++.h>\nusing namespace std;\n#define N 4\n\nvoid add(int A[][N], int B[][N], int C[][N])\n{\n    int i, j;\n    for (i = 0; i < N; i++)\n        for (j = 0; j < N; j++)\n            C[i][j] = A[i][j] + B[i][j];\n}\n\nint main()\n{\n    int A[N][N] = { { 1, 1, 1, 1 },\n                    { 2, 2, 2, 2 },\n                    { 3, 3, 3, 3 },\n                    { 4, 4, 4, 4 } };\n\n    int B[N][N] = { { 1, 1, 1, 1 },\n                    { 2, 2, 2, 2 },\n                    { 3, 3, 3, 3 },\n                    { 4, 4, 4, 4 } };\n\n    int C[N][N];\n    int i, j;\n    add(A, B, C);\n\n    cout << \"Result matrix is \" << endl;\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < N; j++)\n            cout << C[i][j] << \" \";\n        cout << endl;\n    }\n\n    return 0;\n}\n"
    },
    {
        "name": "FindGCD",
        "category": "Easy",
        "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nint gcd(int a, int b) {\n    int res = min(a, b);\n\n    while (res > 1) {\n        if (a % res == 0 && b % res == 0)\n            break;\n        res--;\n    }\n    return res;\n}\n\nint main() {\n    int a = 12, b = 16;\n  \n    cout << gcd(a, b);\n    return 0;\n}\n"
    },
    {
        "name": "Max_Pooling",
        "category": "Easy",
        "code": "#include <iostream>\nusing namespace std;\n\nvoid maxPooling(const int* input,\n                int in_h, int in_w,\n                int pool_h, int pool_w,\n                int stride_h, int stride_w,\n                int* output,\n                int& out_h, int& out_w) {\n    out_h = (in_h - pool_h) / stride_h + 1;\n    out_w = (in_w - pool_w) / stride_w + 1;\n\n    for (int i = 0; i < out_h; ++i) {\n        for (int j = 0; j < out_w; ++j) {\n            int max_val = input[(i * stride_h) * in_w + (j * stride_w)];\n            for (int m = 0; m < pool_h; ++m) {\n                for (int n = 0; n < pool_w; ++n) {\n                    int idx = (i * stride_h + m) * in_w + (j * stride_w + n);\n                    if (input[idx] > max_val) {\n                        max_val = input[idx];\n                    }\n                }\n            }\n            output[i * out_w + j] = max_val;\n        }\n    }\n}\n\nint main() {\n    const int in_h = 4, in_w = 4;\n    const int pool_h = 2, pool_w = 2;\n    const int stride_h = 2, stride_w = 2;\n\n    int input[in_h * in_w] = {\n         1,  2,  3,  4,\n         5,  6,  7,  8,\n         9, 10, 11, 12,\n        13, 14, 15, 16\n    };\n\n    int out_h, out_w;\n    int output[((in_h - pool_h) / stride_h + 1) *\n               ((in_w - pool_w) / stride_w + 1)];\n\n    maxPooling(input, in_h, in_w,\n               pool_h, pool_w,\n               stride_h, stride_w,\n               output, out_h, out_w);\n\n    cout << \"Output:\\n\";\n    for (int i = 0; i < out_h; ++i) {\n        for (int j = 0; j < out_w; ++j) {\n            cout << output[i * out_w + j] << \" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}\n"
    },
    {
        "name": "Sobel_Edge_Detection",
        "category": "Medium",
        "code": "#include <iostream>\nusing namespace std;\n\nvoid sobelEdgeDetection(const unsigned char* input,\n                        unsigned char* output,\n                        int width,\n                        int height)\n{\n    int Gx[3][3] = {\n        {-1, 0, 1},\n        {-2, 0, 2},\n        {-1, 0, 1}\n    };\n    int Gy[3][3] = {\n        {-1, -2, -1},\n        {0, 0, 0},\n        {1, 2, 1}\n    };\n\n    for(int x = 0; x < width; x++){\n        output[x] = 0;\n        output[(height - 1) * width + x] = 0;\n    }\n    for(int y = 0; y < height; y++){\n        output[y * width] = 0;\n        output[y * width + (width - 1)] = 0;\n    }\n\n    for(int y = 1; y < height - 1; y++){\n        for(int x = 1; x < width - 1; x++){\n            int sumX = 0;\n            int sumY = 0;\n            for(int ky = -1; ky <= 1; ky++){\n                for(int kx = -1; kx <= 1; kx++){\n                    int pixel = input[(y + ky) * width + (x + kx)];\n                    sumX += Gx[ky + 1][kx + 1] * pixel;\n                    sumY += Gy[ky + 1][kx + 1] * pixel;\n                }\n            }\n            int magnitude = abs(sumX) + abs(sumY);\n            if(magnitude > 255) magnitude = 255;\n            output[y * width + x] = static_cast<unsigned char>(magnitude);\n        }\n    }\n}\n\nint main()\n{\n    int width  = 64;\n    int height = 64;\n\n    unsigned char* input  = new unsigned char[width * height];\n    unsigned char* output = new unsigned char[width * height];\n\n    for(int i = 0; i < width * height; i++){\n        input[i] = static_cast<unsigned char>(i % 256);\n    }\n\n    sobelEdgeDetection(input, output, width, height);\n\n    for(int i = 0; i < 1000; i++){\n        cout << static_cast<int>(output[i]) << \" \";\n    }\n    cout << endl;\n\n    delete[] input;\n    delete[] output;\n    return 0;\n}\n"
    },
    {
        "name": "ArrayRotation",
        "category": "Medium",
        "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nvoid Rotate(int arr[], int d, int n)\n{\n\tint temp[n];\n\tint k = 0;\n\n\tfor (int i = d; i < n; i++) {\n\t\ttemp[k] = arr[i];\n\t\tk++;\n\t}\n\n\tfor (int i = 0; i < d; i++) {\n\t\ttemp[k] = arr[i];\n\t\tk++;\n\t}\n\n\tfor (int i = 0; i < n; i++) {\n\t\tarr[i] = temp[i];\n\t}\n}\n\nvoid PrintTheArray(int arr[], int n)\n{\n\tfor (int i = 0; i < n; i++) {\n\t\tcout << arr[i] << \" \";\n\t}\n}\n\nint main()\n{\n\tint arr[] = { 1, 2, 3, 4, 5, 6, 7 };\n\tint N = sizeof(arr) / sizeof(arr[0]);\n\tint d = 2;\n\n\tRotate(arr, d, N);\n\tPrintTheArray(arr, N);\n\n\treturn 0;\n}\n"
    },
    {
        "name": "SortanArray_BubbleSort",
        "category": "Medium",
        "code": "#include <stdio.h>\n\nvoid swap(int* arr, int i, int j) {\n    int temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\n\nvoid bubbleSort(int arr[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n      \n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1])\n                swap(arr, j, j + 1);\n        }\n    }\n}\n\nint main() {\n    int arr[] = { 6, 0, 3, 5 };\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    bubbleSort(arr, n);\n\n    for (int i = 0; i < n; i++)\n        printf(\"%d \", arr[i]);\n\n    return 0;\n}\n"
    },
    {
        "name": "AES_128",
        "category": "Hard",
        "code": "#include <iostream>\nusing namespace std;\n\nstatic const unsigned char sbox[256] = {\n    0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,\n    0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,\n    0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,\n    0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,\n    0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,\n    0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,\n    0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,\n    0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,\n    0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,\n    0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,\n    0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,\n    0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,\n    0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,\n    0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,\n    0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,\n    0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16\n};\n\nstatic const unsigned char Rcon[11] = {\n    0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36\n};\n\nunsigned char xtime(unsigned char x) {\n    return (unsigned char)((x << 1) ^ ((x & 0x80) ? 0x1B : 0x00));\n}\n\nvoid SubBytes(unsigned char state[4][4]) {\n    for(int r=0;r<4;r++)\n        for(int c=0;c<4;c++)\n            state[r][c] = sbox[state[r][c]];\n}\n\nvoid ShiftRows(unsigned char state[4][4]) {\n    unsigned char tmp;\n\n    tmp = state[1][0];\n    for(int c=0;c<3;c++) state[1][c] = state[1][c+1];\n    state[1][3] = tmp;\n\n    swap(state[2][0], state[2][2]);\n    swap(state[2][1], state[2][3]);\n\n    tmp = state[3][3];\n    for(int c=3;c>0;c--) state[3][c] = state[3][c-1];\n    state[3][0] = tmp;\n}\n\nvoid MixColumns(unsigned char state[4][4]) {\n    for(int c=0;c<4;c++) {\n        unsigned char a0 = state[0][c], a1 = state[1][c], a2 = state[2][c], a3 = state[3][c];\n        unsigned char m0 = xtime(a0) ^ (xtime(a1) ^ a1) ^ a2 ^ a3;\n        unsigned char m1 = a0 ^ xtime(a1) ^ (xtime(a2) ^ a2) ^ a3;\n        unsigned char m2 = a0 ^ a1 ^ xtime(a2) ^ (xtime(a3) ^ a3);\n        unsigned char m3 = (xtime(a0) ^ a0) ^ a1 ^ a2 ^ xtime(a3);\n        state[0][c] = m0;\n        state[1][c] = m1;\n        state[2][c] = m2;\n        state[3][c] = m3;\n    }\n}\n\nvoid AddRoundKey(unsigned char state[4][4], const unsigned char roundKey[16]) {\n    for(int r=0;r<4;r++)\n        for(int c=0;c<4;c++)\n            state[r][c] ^= roundKey[c*4 + r];\n}\n\nvoid KeyExpansion(const unsigned char key[16], unsigned char roundKeys[176]) {\n    for(int i=0;i<16;i++) roundKeys[i] = key[i];\n    int bytesGenerated = 16;\n    int rconIter = 1;\n    unsigned char temp[4];\n    while(bytesGenerated < 176) {\n        for(int i=0;i<4;i++) temp[i] = roundKeys[bytesGenerated - 4 + i];\n        if(bytesGenerated % 16 == 0) {\n\n            unsigned char t = temp[0];\n            temp[0]=temp[1]; temp[1]=temp[2]; temp[2]=temp[3]; temp[3]=t;\n\n            for(int i=0;i<4;i++) temp[i] = sbox[temp[i]];\n\n            temp[0] ^= Rcon[rconIter];\n            rconIter++;\n        }\n        for(int i=0;i<4;i++) {\n            roundKeys[bytesGenerated] = roundKeys[bytesGenerated - 16] ^ temp[i];\n            bytesGenerated++;\n        }\n    }\n}\n\nvoid AES128Encrypt(const unsigned char in[16], const unsigned char key[16], unsigned char out[16]) {\n    unsigned char state[4][4];\n    unsigned char roundKeys[176];\n    KeyExpansion(key, roundKeys);\n\n    for(int r=0;r<4;r++)\n        for(int c=0;c<4;c++)\n            state[r][c] = in[c*4 + r];\n\n    AddRoundKey(state, roundKeys);\n\n    for(int round=1; round<=9; round++) {\n        SubBytes(state);\n        ShiftRows(state);\n        MixColumns(state);\n        AddRoundKey(state, roundKeys + round*16);\n    }\n\n    SubBytes(state);\n    ShiftRows(state);\n    AddRoundKey(state, roundKeys + 160);\n\n    for(int r=0;r<4;r++)\n        for(int c=0;c<4;c++)\n            out[c*4 + r] = state[r][c];\n}\n\nint main() {\n    unsigned char plaintext[16] = {\n        0x32,0x43,0xf6,0xa8, 0x88,0x5a,0x30,0x8d,\n        0x31,0x31,0x98,0xa2, 0xe0,0x37,0x07,0x34\n    };\n    unsigned char key[16] = {\n        0x2b,0x7e,0x15,0x16, 0x28,0xae,0xd2,0xa6,\n        0xab,0xf7,0x15,0x88, 0x09,0xcf,0x4f,0x3c\n    };\n    unsigned char cipher[16];\n    AES128Encrypt(plaintext, key, cipher);\n    cout << \"Ciphertext: \";\n    for(int i=0;i<16;i++) {\n        cout << hex << (int)cipher[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}\n"
    },
    {
        "name": "AddTwoBinaryStrings",
        "category": "Hard",
        "code": "#include <bits/stdc++.h> \nusing namespace std; \n\nstring addBinary(string A, string B) \n{ \n\tif (A.length() > B.length()) \n\t\treturn addBinary(B, A); \n\n\tint diff = B.length() - A.length(); \n\n\tstring padding; \n\tfor (int i = 0; i < diff; i++) \n\t\tpadding.push_back('0'); \n\n\tA = padding + A; \n\tstring res; \n\tchar carry = '0'; \n\n\tfor (int i = A.length() - 1; i >= 0; i--) \n\t{ \n\t\tif (A[i] == '1' && B[i] == '1') \n\t\t{ \n\t\t\tif (carry == '1') \n\t\t\t\tres.push_back('1'), carry = '1'; \n\t\t\telse\n\t\t\t\tres.push_back('0'), carry = '1'; \n\t\t} \n\n\t\telse if (A[i] == '0' && B[i] == '0') \n\t\t{ \n\t\t\tif (carry == '1') \n\t\t\t\tres.push_back('1'), carry = '0'; \n\t\t\telse\n\t\t\t\tres.push_back('0'), carry = '0'; \n\t\t} \n\n\t\telse if (A[i] != B[i]) \n\t\t{ \n\t\t\tif (carry == '1') \n\t\t\t\tres.push_back('0'), carry = '1'; \n\t\t\telse\n\t\t\t\tres.push_back('1'), carry = '0'; \n\t\t} \n\t} \n\n\tif (carry == '1') \n\t\tres.push_back(carry); \n\treverse(res.begin(), res.end()); \n\n\tint index = 0; \n\twhile (index + 1 < res.length() && \n\t\tres[index] == '0') \n\t\tindex++; \n\treturn (res.substr(index)); \n} \n\nint main() \n{ \n\tstring a = \"1101\", b = \"100\"; \n\tcout << addBinary(a, b) << endl; \n\treturn 0; \n}\n"
    },
    {
        "name": "MergeSort",
        "category": "Hard",
        "code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvoid merge(vector<int>& vec, int left, int mid, int right) {\n    int i, j, k;\n    int n1 = mid - left + 1;\n    int n2 = right - mid;\n\n    vector<int> leftVec(n1), rightVec(n2);\n\n    for (i = 0; i < n1; i++)\n        leftVec[i] = vec[left + i];\n    for (j = 0; j < n2; j++)\n        rightVec[j] = vec[mid + 1 + j];\n\n    i = 0;\n    j = 0;\n    k = left;\n    while (i < n1 && j < n2) {\n        if (leftVec[i] <= rightVec[j]) {\n            vec[k] = leftVec[i];\n            i++;\n        } else {\n            vec[k] = rightVec[j];\n            j++;\n        }\n        k++;\n    }\n\n    while (i < n1) {\n        vec[k] = leftVec[i];\n        i++;\n        k++;\n    }\n\n    while (j < n2) {\n        vec[k] = rightVec[j];\n        j++;\n        k++;\n    }\n}\n\nvoid mergeSort(vector<int>& vec, int left, int right) {\n    if (left < right) {\n      \n        int mid = left + (right - left) / 2;\n\n        mergeSort(vec, left, mid);\n        mergeSort(vec, mid + 1, right);\n\n        merge(vec, left, mid, right);\n    }\n}\n\nint main() {\n    vector<int> vec = {12, 11, 13, 5, 6, 7};\n    int n = vec.size();\n\n    mergeSort(vec, 0, n - 1);\n\n    for (auto i: vec)\n        cout << i << \" \";\n    return 0;\n}\n"
    },
    {
        "name": "Median_Filter",
        "category": "Hard",
        "code": "#include <iostream>\nusing namespace std;\n\n#define ROWS 5\n#define COLS 6\n\nvoid median_filter(const int input[ROWS][COLS], int output[ROWS][COLS], int rows, int cols, int window_size) {\n    int half = window_size / 2;\n    for (int i = 0; i < rows; ++i) {\n        for (int j = 0; j < cols; ++j) {\n            int count = 0;\n            int* window = new int[window_size * window_size];\n            for (int wi = i - half; wi <= i + half; ++wi) {\n                for (int wj = j - half; wj <= j + half; ++wj) {\n                    if (wi >= 0 && wi < rows && wj >= 0 && wj < cols) {\n                        window[count++] = input[wi][wj];\n                    }\n                }\n            }\n            for (int x = 0; x < count - 1; ++x) {\n                for (int y = x + 1; y < count; ++y) {\n                    if (window[x] > window[y]) {\n                        int tmp = window[x];\n                        window[x] = window[y];\n                        window[y] = tmp;\n                    }\n                }\n            }\n            output[i][j] = window[count / 2];\n            delete[] window;\n        }\n    }\n}\n\nint main() {\n    int input[ROWS][COLS] = {\n        {10, 20, 30, 40, 50, 60},\n        {15, 25, 35, 45, 55, 65},\n        {20, 30, 40, 50, 60, 70},\n        {25, 35, 45, 55, 65, 75},\n        {30, 40, 50, 60, 70, 80}\n    };\n    int output[ROWS][COLS];\n    int window_size = 3;\n\n    median_filter(input, output, ROWS, COLS, window_size);\n\n    for (int i = 0; i < ROWS; ++i) {\n        for (int j = 0; j < COLS; ++j) {\n            cout << output[i][j] << \" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}\n"
    }
]