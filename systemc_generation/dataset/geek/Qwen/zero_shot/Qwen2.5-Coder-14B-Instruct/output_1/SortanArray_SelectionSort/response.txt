
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ```json
{
  "input_output": {
    "inputs": [
      {
        "name": "arr",
        "type": "int[]",
        "description": "An array of integers to be sorted."
      },
      {
        "name": "n",
        "type": "int",
        "description": "The number of elements in the array."
      }
    ],
    "outputs": [
      {
        "name": "sorted_arr",
        "type": "int[]",
        "description": "The sorted array of integers."
      }
    ]
  },
  "code_analysis": {
    "line_by_line": [
      {
        "line": "// C++ program for implementation of selection sort",
        "description": "Comment indicating the purpose of the program."
      },
      {
        "line": "#include <bits/stdc++.h>",
        "description": "Include standard library headers."
      },
      {
        "line": "using namespace std;",
        "description": "Use the standard namespace."
      },
      {
        "line": "//Swap function",
        "description": "Comment indicating the purpose of the swap function."
      },
      {
        "line": "void swap(int *xp, int *yp)",
        "description": "Declaration of the swap function, which swaps two integers pointed to by xp and yp."
      },
      {
        "line": "{",
        "description": "Start of the swap function body."
      },
      {
        "line": "\tint temp = *xp;",
        "description": "Store the value pointed to by xp in a temporary variable temp."
      },
      {
        "line": "\t*xp = *yp;",
        "description": "Assign the value pointed to by yp to the location pointed to by xp."
      },
      {
        "line": "\t*yp = temp;",
        "description": "Assign the value stored in temp to the location pointed to by yp."
      },
      {
        "line": "}",
        "description": "End of the swap function body."
      },
      {
        "line": "void selectionSort(int arr[], int n)",
        "description": "Declaration of the selectionSort function, which sorts an array of integers using the selection sort algorithm."
      },
      {
        "line": "{",
        "description": "Start of the selectionSort function body."
      },
      {
        "line": "\tint i, j, min_idx;",
        "description": "Declare integer variables i, j, and min_idx."
      },
      {
        "line": "\t// One by one move boundary of unsorted subarray",
        "description": "Comment indicating the purpose of the outer loop."
      },
      {
        "line": "\tfor (i = 0; i < n-1; i++)",
        "description": "Outer loop to iterate over each element of the array except the last one."
      },
      {
        "line": "\t{",
        "description": "Start of the outer loop body."
      },
      {
        "line": "\t\t// Find the minimum element in unsorted array",
        "description": "Comment indicating the purpose of the inner loop."
      },
      {
        "line": "\t\tmin_idx = i;",
        "description": "Initialize min_idx with the current index i."
      },
      {
        "line": "\t\tfor (j = i+1; j < n; j++)",
        "description": "Inner loop to find the minimum element in the unsorted portion of the array."
      },
      {
        "line": "\t\tif (arr[j] < arr[min_idx])",
        "description": "Condition to check if the current element is smaller than the element at min_idx."
      },
      {
        "line": "\t\t\tmin_idx = j;",
        "description": "Update min_idx with the current index j if the condition is true."
      },
      {
        "line": "\t\t// Swap the found minimum element with the first element",
        "description": "Comment indicating the purpose of the swap operation."
      },
      {
        "line": "\t\tswap(&arr[min_idx], &arr[i]);",
        "description": "Call the swap function to swap the elements at min_idx and i."
      },
      {
        "line": "\t}",
        "description": "End of the outer loop body."
      },
      {
        "line": "}",
        "description": "End of the selectionSort function body."
      },
      {
        "line": "//Function to print an array",
        "description": "Comment indicating the purpose of the printArray function."
      },
      {
        "line": "void printArray(int arr[], int size)",
        "description": "Declaration of the printArray function, which prints the elements of an array."
      },
      {
        "line": "{",
        "description": "Start of the printArray function body."
      },
      {
        "line": "\tint i;",
        "description": "Declare an integer variable i."
      },
      {
        "line": "\tfor (i=0; i < size; i++)",
        "description": "Loop to iterate over each element of the array."
      },
      {
        "line": "\t\tcout << arr[i] << \" \";",
        "description": "Print the current element followed by a space."
      },
      {
        "line": "\tcout << endl;",
        "description": "Print a newline character after printing all elements."
      },
      {
        "line": "}",
        "description": "End of the printArray function body."
      },
      {
        "line": "// Driver program to test above functions",
        "description": "Comment indicating the purpose of the main function."
      },
      {
        "line": "int main()",
        "description": "Declaration of the main function, which serves as the entry point of the program."
      },
      {
        "line": "{",
        "description": "Start of the main function body."
      },
      {
        "line": "\tint arr[] = {64, 25, 12, 22, 11};",
        "description": "Initialize an array of integers with given values."
      },
      {
        "line": "\tint n = sizeof(arr)/sizeof(arr[0]);",
        "description": "Calculate the number of elements in the array."
      },
      {
        "line": "\tselectionSort(arr, n);",
        "description": "Call the selectionSort function to sort the array."
      },
      {
        "line": "\tcout << \"Sorted array: \\\";",
        "description": "Print the message indicating the start of the sorted array."
      },
      {
        "line": "\tprintArray(arr, n);",
        "description": "Call the printArray function to print the sorted array."
      },
      {
        "line": "\treturn 0;",
        "description": "Return 0 to indicate successful execution of the program."
      },
      {
        "line": "}",
        "description": "End of the main function body."
      }
    ]
  },
  "systemc_code": {
    "code_snippet": "```\n#include <systemc.h>\n\nSC_MODULE(SelectionSort) {\n\tsc_in<bool> clk;\n\tsc_in<bool> start;\n\tsc_out<bool> done;\n\tsc_vector<sc_signal<int>> arr;\n\tsc_signal<int> n;\n\tsc_signal<int> i, j, min_idx;\n\tsc_signal<bool> running;\n\tsc_signal<bool> swap_flag;\n\tsc_signal<int> temp;\n\t\n\tvoid swap_process() {\n\t\tif (swap_flag.read()) {\n\t\t\ttemp.write(arr[min_idx.read()].read());\n\t\t\tarr[min_idx.read()].write(arr[i.read()].read());\n\t\t\tarr[i.read()].write(temp.read());\n\t\t\tswap_flag.write(false);\n\t\t}\n\t}\n\t\n\tvoid selection_sort_process() {\n\t\tif (start.read()) {\n\t\t\ti.write(0);\n\t\t\tj.write(0);\n\t\t\tmin_idx.write(0);\n\t\t\trunning.write(true);\n\t\t}\n\t\tif (running.read()) {\n\t\t\tif (j.read() < n.read()) {\n\t\t\t\tif (arr[j.read()].read() < arr[min_idx.read()].read()) {\n\t\t\t\t\tmin_idx.write(j.read());\n\t\t\t\t}\n\t\t\t\tj.write(j.read() + 1);\n\t\t\t} else {\n\t\t\t\tif (i.read() < n.read() - 1) {\n\t\t\t\t\tswap_flag.write(true);\n\t\t\t\t\ti.write(i.read() + 1);\n\t\t\t\t\tj.write(i.read() + 1);\n\t\t\t\t\tmin_idx.write(i.read() + 1);\n\t\t\t\t} else {\n\t\t\t\t\trunning.write(false);\n\t\t\t\t\tdone.write(true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tSC_CTOR(SelectionSort) : arr(\"arr\", 5) {\n\t\tSC_THREAD(swap_process);\n\t\tsensitive << clk.pos();\n\t\tSC_THREAD(selection_sort_process);\n\t\tsensitive << clk.pos();\n\t}\n};\n\nint sc_main(int argc, char* argv[]) {\n\tSelectionSort sorter(\"sorter\");\n\tsc_start();\n\treturn 0;\n}\n```"
  }
}
```