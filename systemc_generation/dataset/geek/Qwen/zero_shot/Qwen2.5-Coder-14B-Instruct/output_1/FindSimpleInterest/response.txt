
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1. **Inputs and Outputs**:
   - Inputs: `P` (Principal amount), `R` (Rate of interest), `T` (Time period)
   - Output: `SI` (Simple Interest)

2. **Line-by-Line Analysis**:
   ```cpp
   // C++ program to find simple interest 
   // for given principal amount, time 
   // and rate of interest.
   #include<iostream>
   using namespace std;
   ```
   - This section includes the standard I/O library and uses the standard namespace.

   ```cpp
   // Driver code
   int main()
   {
   ```
   - This is the main function where the execution starts.

   ```cpp
   	// We can change values here for
   	// different inputs
   	float P = 1, R = 1, T = 1;
   ```
   - This line declares and initializes three floating-point variables `P`, `R`, and `T` with values 1 each.

   ```cpp
   	// Calculate simple interest 
   	float SI = (P * T * R) / 100;
   ```
   - This line calculates the simple interest using the formula \( \text{SI} = \frac{P \times T \times R}{100} \).

   ```cpp
   	// Print the resultant value of SI 
   	cout << "Simple Interest = " << SI;
   ```
   - This line prints the calculated simple interest.

   ```cpp
   	return 0;
   }
   ```
   - The main function returns 0 indicating successful execution.

3. **SystemC Code Snippet**:
   ```cpp
   #include <systemc.h>

   SC_MODULE(SimpleInterestCalculator) {
       sc_in<float> P; // Principal amount
       sc_in<float> R; // Rate of interest
       sc_in<float> T; // Time period
       sc_out<float> SI; // Simple Interest

       SC_CTOR(SimpleInterestCalculator) {
           SC_METHOD(calculateSI);
           sensitive << P << R << T;
       }

       void calculateSI() {
           float si = (P.read() * T.read() * R.read()) / 100;
           SI.write(si);
       }
   };

   int sc_main(int argc, char* argv[]) {
       SimpleInterestCalculator sic("simple_interest_calculator");

       // Example stimulus
       sic.P(1);
       sic.R(1);
       sic.T(1);

       sc_start();

       return 0;
   }
   ```

   **Explanation of SystemC Code**:
   - **Module Declaration**: `SC_MODULE(SimpleInterestCalculator)` defines a SystemC module named `SimpleInterestCalculator`.
   - **Port Declarations**: `sc_in<float> P`, `sc_in<float> R`, `sc_in<float> T`, and `sc_out<float> SI` declare the input and output ports.
   - **Constructor**: The constructor `SC_CTOR(SimpleInterestCalculator)` sets up a method `calculateSI` that is sensitive to changes in `P`, `R`, and `T`.
   - **Method Definition**: `void calculateSI()` reads the input values, computes the simple interest, and writes the result to the output port `SI`.
   - **Main Function**: `sc_main` instantiates the module, sets example input values, and starts the simulation.