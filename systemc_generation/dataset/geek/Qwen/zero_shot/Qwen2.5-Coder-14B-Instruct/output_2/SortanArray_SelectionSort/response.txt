
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ```json
{
  "inputs": [
    {
      "name": "clk",
      "type": "sc_in<bool>",
      "description": "Clock signal for the SystemC module."
    },
    {
      "name": "start",
      "type": "sc_in<bool>",
      "description": "Start signal to initiate the sorting process."
    }
  ],
  "outputs": [
    {
      "name": "done",
      "type": "sc_out<bool>",
      "description": "Done signal indicating that the sorting process has completed."
    }
  ],
  "summary": [
    {
      "line": "// C++ program for implementation of selection sort",
      "description": "This is a C++ program that implements the selection sort algorithm."
    },
    {
      "line": "void swap(int *xp, int *yp)",
      "description": "A function to swap two integer values pointed to by xp and yp."
    },
    {
      "line": "void selectionSort(int arr[], int n)",
      "description": "The main function implementing the selection sort algorithm. It takes an array arr and its size n as inputs."
    },
    {
      "line": "int i, j, min_idx;",
      "description": "Declaration of loop variables and a variable to store the index of the minimum element."
    },
    {
      "line": "for (i = 0; i < n-1; i++)",
      "description": "Outer loop that iterates over each element of the array except the last one."
    },
    {
      "line": "min_idx = i;",
      "description": "Initialize min_idx to the current index i."
    },
    {
      "line": "for (j = i+1; j < n; j++)",
      "description": "Inner loop that finds the minimum element in the unsorted portion of the array."
    },
    {
      "line": "if (arr[j] < arr[min_idx])",
      "description": "Condition to check if the current element is smaller than the current minimum element."
    },
    {
      "line": "min_idx = j;",
      "description": "Update min_idx to the current index j if the condition is true."
    },
    {
      "line": "swap(&arr[min_idx], &arr[i]);",
      "description": "Swap the found minimum element with the first element of the unsorted portion."
    },
    {
      "line": "void printArray(int arr[], int size)",
      "description": "A function to print the elements of the array."
    },
    {
      "line": "int main()",
      "description": "The main function where the array is initialized and sorted using the selectionSort function. The sorted array is then printed."
    },
    {
      "line": "int arr[] = {64, 25, 12, 22, 11};",
      "description": "Initialization of the array to be sorted."
    },
    {
      "line": "int n = sizeof(arr)/sizeof(arr[0]);",
      "description": "Calculate the number of elements in the array."
    },
    {
      "line": "selectionSort(arr, n);",
      "description": "Call the selectionSort function to sort the array."
    },
    {
      "line": "cout << \"Sorted array: \";",
      "description": "Print the message indicating that the array is sorted."
    },
    {
      "line": "printArray(arr, n);",
      "description": "Call the printArray function to print the sorted array."
    },
    {
      "line": "return 0;",
      "description": "Return 0 to indicate successful execution of the program."
    }
  ],
  "systemc_code": "```\n#include <systemc.h>\n\nSC_MODULE(SelectionSortModule) {\n    sc_in<bool> clk;\n    sc_in<bool> start;\n    sc_out<bool> done;\n    int arr[5];\n    int n = 5;\n    bool sorting_done = false;\n    int i, j, min_idx;\n\n    SC_CTOR(SelectionSortModule) : clk(\"clk\"), start(\"start\"), done(\"done\") {\n        SC_THREAD(sort_process);\n        sensitive << clk.pos();\n        dont_initialize();\n    }\n\n    void sort_process() {\n        while (true) {\n            wait(); // Wait for the clock edge\n            if (start.read()) {\n                // Initialize the array\n                arr[0] = 64; arr[1] = 25; arr[2] = 12; arr[3] = 22; arr[4] = 11;\n                sorting_done = false;\n                for (i = 0; i < n-1; i++) {\n                    min_idx = i;\n                    for (j = i+1; j < n; j++) {\n                        if (arr[j] < arr[min_idx]) {\n                            min_idx = j;\n                        }\n                    }\n                    // Swap the found minimum element with the first element\n                    int temp = arr[min_idx];\n                    arr[min_idx] = arr[i];\n                    arr[i] = temp;\n                }\n                sorting_done = true;\n            }\n            done.write(sorting_done);\n        }\n    }\n};\n\nint sc_main(int argc, char* argv[]) {\n    SelectionSortModule sort_module(\"sort_module\");\n    sc_clock clk(\"clk\", 10, SC_NS);\n    sc_signal<bool> start(\"start\");\n    sc_signal<bool> done(\"done\");\n\n    sort_module.clk(clk);\n    sort_module.start(start);\n    sort_module.done(done);\n\n    // Testbench\n    start.write(false);\n    sc_start(10, SC_NS);\n    start.write(true);\n    sc_start(100, SC_NS);\n    start.write(false);\n    sc_start(10, SC_NS);\n\n    return 0;\n}\n```"
}
```