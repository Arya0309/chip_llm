
greatest common divisor (GCD) of two integers `a` and `b`. It initializes `res` to the minimum of `a` and `b`, then iteratively decrements `res` until it finds a number that divides both `a` and `b` without a remainder. This number is the GCD.

### SystemC Code

Below is the equivalent SystemC code that captures the same logic as the provided C++/C code:

```cpp
#include <systemc.h>

SC_MODULE(GCDModule) {
    sc_in<int> a;       // Input signal for the first integer
    sc_in<int> b;       // Input signal for the second integer
    sc_out<int> gcd_result;  // Output signal for the GCD result

    SC_CTOR(GCDModule) {
        SC_METHOD(calculate_gcd);
        sensitive << a << b;  // Sensitivity to changes in inputs a and b
    }

    void calculate_gcd() {
        int res = min(a.read(), b.read());  // Initialize res to the minimum of a and b

        // Testing divisibility with all numbers starting from min(a, b) to 1
        while (res > 1) {
            // If any number divides both a and b, we got the answer
            if (a.read() % res == 0 && b.read() % res == 0) {
                break;
            }
            res--;
        }
        gcd_result.write(res);  // Write the GCD result to the output signal
    }
};

int sc_main(int argc, char* argv[]) {
    GCDModule gcd_module("gcd_module");
    sc_signal<int> a_signal, b_signal, gcd_result_signal;

    // Example values for testing
    a_signal = 12;
    b_signal = 16;

    // Connecting signals
    gcd_module.a(a_signal);
    gcd_module.b(b_signal);
    gcd_module.gcd_result(gcd_result_signal);

    // Run the simulation for one time step
    sc_start(1, SC_NS);

    // Output the result
    cout << "GCD: " << gcd_result_signal.read() << endl;

    return 0;
}
```

### Explanation of the SystemC Code

1. **Module Declaration**:
   - `SC_MODULE(GCDModule)` defines a SystemC module named `GCDModule`.

2. **Input and Output Ports**:
   - `sc_in<int> a;` and `sc_in<int> b;` are input ports for the two integers.
   - `sc_out<int> gcd_result;` is an output port for the GCD result.

3. **Constructor**:
   - `SC_CTOR(GCDModule)` initializes the module.
   - `SC_METHOD(calculate_gcd);` registers `calculate_gcd` as a method that will be executed whenever the inputs change.
   - `sensitive << a << b;` makes the method sensitive to changes in the `a` and `b` input ports.

4. **Method Definition**:
   - `void calculate_gcd()` contains the logic to compute the GCD.
   - `int res = min(a.read(), b.read());` initializes `res` to the minimum of the input values.
   - The `while` loop checks each number from `res` down to 1 to find the GCD.
   - `gcd_result.write(res);` writes the computed GCD to the output port.

5. **Main Function**:
   - `sc_main` sets up the simulation environment.
   - `GCDModule gcd_module("gcd_module");` creates an instance of the `GCDModule`.
   - `sc_signal<int>` defines signals for the inputs and output.
   - Example values are assigned to the input signals for testing.
   - The module's ports are connected to the signals.
   - `sc_start(1, SC_NS);` runs the simulation for one time step.
   - The result is printed to the console.

This SystemC code replicates the functionality of the original C++/C code, providing a hardware description that can be synthesized into an FPGA or ASIC design.