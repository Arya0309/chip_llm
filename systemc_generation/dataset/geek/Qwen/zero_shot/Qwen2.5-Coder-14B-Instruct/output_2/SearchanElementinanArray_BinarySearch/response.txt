
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!二分查找算法的C++代码实现

### 代码分析

#### 输入和输出
- **输入**:
  - `target`: 要搜索的目标整数。
  - `v`: 一个整数向量，其中包含要搜索的元素。
- **输出**:
  - 返回一个布尔值，指示目标是否在向量中找到。

#### 代码功能解释
1. **函数定义**:
   ```cpp
   bool binarySearch(vector<int>& v, int target) {
   ```
   - 定义了一个名为`binarySearch`的函数，它接受一个整数向量`v`和一个整数`target`作为参数，并返回一个布尔值。

2. **初始化边界**:
   ```cpp
   int low = 0, high = v.size() - 1;
   ```
   - 初始化两个变量`low`和`high`，分别表示搜索范围的下界和上界。

3. **循环查找**:
   ```cpp
   while (low <= high) {
   ```
   - 使用`while`循环，当`low`小于等于`high`时继续循环。

4. **计算中间位置**:
   ```cpp
   int mid = ((high - low) / 2) + low;
   ```
   - 计算中间位置`mid`，避免直接相加可能导致的溢出问题。

5. **检查中间元素**:
   ```cpp
   if (v[mid] == target) {
       return true;
   }
   ```
   - 如果中间元素等于目标，则返回`true`，表示找到了目标。

6. **调整搜索范围**:
   ```cpp
   if (v[mid] > target)
       high = mid - 1;
   else
       low = mid + 1;
   ```
   - 如果中间元素大于目标，则将`high`调整为`mid - 1`，缩小搜索范围到左半部分。
   - 如果中间元素小于目标，则将`low`调整为`mid + 1`，缩小搜索范围到右半部分。

7. **未找到目标**:
   ```cpp
   return false;
   ```
   - 如果循环结束后仍未找到目标，则返回`false`。

8. **主函数**:
   ```cpp
   int main() {
       vector<int> v = {1, 2, 3, 4, 5, 8, 9, 11};
       int target = 8;
       if (binarySearch(v, target)) {
           cout << target << " found.";
       } else {
           cout << target << " NOT found.";
       }
       return 0;
   }
   ```
   - 在`main`函数中，定义了一个向量`v`和一个目标`target`，调用`binarySearch`函数进行搜索，并根据结果输出相应的信息。

### 等效SystemC代码

```cpp
#include <systemc.h>

SC_MODULE(BinarySearch) {
    sc_in<int> target;
    sc_out<bool> found;
    sc_vector<sc_in<int>> v;

    SC_CTOR(BinarySearch) : v("v", 8) {
        SC_METHOD(search);
        sensitive << target;
        for (int i = 0; i < v.size(); ++i) {
            sensitive << v[i];
        }
    }

    void search() {
        int low = 0;
        int high = v.size() - 1;
        bool result = false;

        while (low <= high) {
            int mid = ((high - low) / 2) + low;
            if (v[mid].read() == target.read()) {
                result = true;
                break;
            }
            if (v[mid].read() > target.read()) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        found.write(result);
    }
};

int sc_main(int argc, char* argv[]) {
    BinarySearch bs("bs");
    sc_signal<int> target;
    sc_signal<bool> found;
    sc_vector<sc_signal<int>> v(8);

    bs.target(target);
    bs.found(found);
    for (int i = 0; i < 8; ++i) {
        bs.v[i](v[i]);
    }

    // Example values for testing
    v[0] = 1; v[1] = 2; v[2] = 3; v[3] = 4; v[4] = 5; v[5] = 8; v[6] = 9; v[7] = 11;
    target = 8;

    sc_start();
    cout << "Target " << target << (found ? " found." : " NOT found.") << endl;

    return 0;
}
```

### 代码说明
1. **模块定义**:
   ```cpp
   SC_MODULE(BinarySearch) {
   ```
   - 定义了一个名为`BinarySearch`的SystemC模块。

2. **信号声明**:
   ```cpp
   sc_in<int> target;
   sc_out<bool> found;
   sc_vector<sc_in<int>> v;
   ```
   - 声明了输入信号`target`、输出信号`found`和输入向量`v`。

3. **构造函数**:
   ```cpp
   SC_CTOR(BinarySearch) : v("v", 8) {
       SC_METHOD(search);
       sensitive << target;
       for (int i = 0; i < v.size(); ++i) {
           sensitive << v[i];
       }
   }
   ```
   - 在构造函数中，初始化了向量`v`，并注册了一个敏感方法`search`，使其对`target`和`v`的所有元素敏感。

4. **搜索方法**:
   ```cpp
   void search() {
       int low = 0;
       int high = v.size() - 1;
       bool result = false;

       while (low <= high) {
           int mid = ((high - low) / 2) + low;
           if (v[mid].read() == target.read()) {
               result = true;
               break;
           }
           if (v[mid].read() > target.read()) {
               high = mid - 1;
           } else {
               low = mid + 1;
           }
       }

       found.write(result);
   }
   ```
   - 实现了二分查找逻辑，与原C++代码相同，但使用了SystemC的读取方法。

5. **主函数**:
   ```cpp
   int sc_main(int argc, char* argv[]) {
       BinarySearch bs("bs");
       sc_signal<int> target;
       sc_signal<bool> found;
       sc_vector<sc_signal<int>> v(8);

       bs.target(target);
       bs.found(found);
       for (int i = 0; i < 8; ++i) {
           bs.v[i](v[i]);
       }

       // Example values for testing
       v[0] = 1; v[1] = 2; v[2] = 3; v[3] = 4; v[4] = 5; v[5] = 8; v[6] = 9; v[7] = 11;
       target = 8;

       sc_start();
       cout << "Target " << target << (found ? " found." : " NOT found.") << endl;

       return 0;
   }
   ```
   - 在`sc_main`函数中，创建了`BinarySearch`模块实例，并连接了信号。设置了测试数据并启动仿真，输出搜索结果。