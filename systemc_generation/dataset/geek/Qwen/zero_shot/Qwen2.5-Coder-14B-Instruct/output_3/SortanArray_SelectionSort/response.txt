
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ```json
{
  "inputs": {
    "arr": "An array of integers to be sorted",
    "n": "The number of elements in the array"
  },
  "outputs": {
    "sorted_arr": "The array sorted in ascending order"
  },
  "summary": {
    "line_by_line": [
      {
        "line": "// C++ program for implementation of selection sort",
        "description": "Comment indicating the purpose of the program."
      },
      {
        "line": "#include <bits/stdc++.h>",
        "description": "Include standard library headers."
      },
      {
        "line": "using namespace std;",
        "description": "Use the standard namespace for convenience."
      },
      {
        "line": "//Swap function",
        "description": "Comment indicating the purpose of the swap function."
      },
      {
        "line": "void swap(int *xp, int *yp)",
        "description": "Function declaration for swapping two integers."
      },
      {
        "line": "{",
        "description": "Start of the swap function body."
      },
      {
        "line": "int temp = *xp;",
        "description": "Store the value of xp in a temporary variable."
      },
      {
        "line": "*xp = *yp;",
        "description": "Assign the value of yp to xp."
      },
      {
        "line": "*yp = temp;",
        "description": "Assign the value stored in temp to yp."
      },
      {
        "line": "}",
        "description": "End of the swap function body."
      },
      {
        "line": "void selectionSort(int arr[], int n)",
        "description": "Function declaration for performing selection sort on an array."
      },
      {
        "line": "{",
        "description": "Start of the selectionSort function body."
      },
      {
        "line": "int i, j, min_idx;",
        "description": "Declare variables for loop indices and minimum index."
      },
      {
        "line": "// One by one move boundary of unsorted subarray",
        "description": "Comment indicating the purpose of the outer loop."
      },
      {
        "line": "for (i = 0; i < n-1; i++)",
        "description": "Outer loop to iterate over each element of the array except the last one."
      },
      {
        "line": "{",
        "description": "Start of the outer loop body."
      },
      {
        "line": "// Find the minimum element in unsorted array",
        "description": "Comment indicating the purpose of the inner loop."
      },
      {
        "line": "min_idx = i;",
        "description": "Initialize min_idx with the current index of the outer loop."
      },
      {
        "line": "for (j = i+1; j < n; j++)",
        "description": "Inner loop to find the minimum element in the unsorted portion of the array."
      },
      {
        "line": "if (arr[j] < arr[min_idx])",
        "description": "Condition to check if the current element is smaller than the element at min_idx."
      },
      {
        "line": "min_idx = j;",
        "description": "Update min_idx to the current index if the condition is true."
      },
      {
        "line": "}",
        "description": "End of the inner loop body."
      },
      {
        "line": "// Swap the found minimum element with the first element",
        "description": "Comment indicating the purpose of the swap operation."
      },
      {
        "line": "swap(&arr[min_idx], &arr[i]);",
        "description": "Call the swap function to swap the elements at min_idx and i."
      },
      {
        "line": "}",
        "description": "End of the outer loop body."
      },
      {
        "line": "}",
        "description": "End of the selectionSort function body."
      },
      {
        "line": "//Function to print an array",
        "description": "Comment indicating the purpose of the printArray function."
      },
      {
        "line": "void printArray(int arr[], int size)",
        "description": "Function declaration for printing an array."
      },
      {
        "line": "{",
        "description": "Start of the printArray function body."
      },
      {
        "line": "int i;",
        "description": "Declare a loop index variable."
      },
      {
        "line": "for (i=0; i < size; i++)",
        "description": "Loop to iterate over each element of the array."
      },
      {
        "line": "cout << arr[i] << \" \";",
        "description": "Print each element of the array followed by a space."
      },
      {
        "line": "cout << endl;",
        "description": "Print a newline character after printing all elements."
      },
      {
        "line": "}",
        "description": "End of the printArray function body."
      },
      {
        "line": "// Driver program to test above functions",
        "description": "Comment indicating the purpose of the main function."
      },
      {
        "line": "int main()",
        "description": "Main function declaration."
      },
      {
        "line": "{",
        "description": "Start of the main function body."
      },
      {
        "line": "int arr[] = {64, 25, 12, 22, 11};",
        "description": "Initialize an array of integers."
      },
      {
        "line": "int n = sizeof(arr)/sizeof(arr[0]);",
        "description": "Calculate the number of elements in the array."
      },
      {
        "line": "selectionSort(arr, n);",
        "description": "Call the selectionSort function to sort the array."
      },
      {
        "line": "cout << \"Sorted array: \\\";",
        "description": "Print the message indicating the sorted array."
      },
      {
        "line": "printArray(arr, n);",
        "description": "Call the printArray function to print the sorted array."
      },
      {
        "line": "return 0;",
        "description": "Return 0 to indicate successful execution of the program."
      },
      {
        "line": "}",
        "description": "End of the main function body."
      }
    ]
  },
  "systemc_code": {
    "code": "```cpp\n#include <systemc.h>\n\nSC_MODULE(SelectionSort) {\n\tpublic:\n\t\tsc_in<bool> clk;\n\t\tsc_in<bool> start;\n\t\tsc_out<bool> done;\n\t\tsc_signal<int> arr[5];\n\t\tsc_signal<int> n;\n\t\tsc_signal<int> i, j, min_idx;\n\t\tsc_signal<bool> sorting;\n\t\tsc_signal<bool> swapping;\n\t\tsc_signal<bool> printing;\n\t\tsc_signal<bool> done_flag;\n\n\t\tvoid sort_process() {\n\t\t\twhile (true) {\n\t\t\t\twait();\n\t\t\t\tif (start.read()) {\n\t\t\t\t\tfor (i.write(0); i.read() < n.read() - 1; i.write(i.read() + 1)) {\n\t\t\t\t\t\tmin_idx.write(i.read());\n\t\t\t\t\t\tfor (j.write(i.read() + 1); j.read() < n.read(); j.write(j.read() + 1)) {\n\t\t\t\t\t\t\tif (arr[j.read()].read() < arr[min_idx.read()].read()) {\n\t\t\t\t\t\t\t\tmin_idx.write(j.read());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tswapping.write(true);\n\t\t\t\t\t\twait();\n\t\t\t\t\t\tint temp = arr[min_idx.read()].read();\n\t\t\t\t\t\tarr[min_idx.read()].write(arr[i.read()].read());\n\t\t\t\t\t\tarr[i.read()].write(temp);\n\t\t\t\t\t\tswapping.write(false);\n\t\t\t\t\t}\n\t\t\t\t\tdone_flag.write(true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvoid print_process() {\n\t\t\twhile (true) {\n\t\t\t\twait();\n\t\t\t\tif (done_flag.read()) {\n\t\t\t\t\tcout << \"Sorted array: \";\n\t\t\t\t\tfor (int k = 0; k < n.read(); k++) {\n\t\t\t\t\t\tcout << arr[k].read() << \" \";\n\t\t\t\t\t}\n\t\t\t\t\tcout << endl;\n\t\t\t\t\tdone_flag.write(false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tSC_CTOR(SelectionSort) : sorting(false), swapping(false), printing(false), done_flag(false) {\n\t\t\tSC_THREAD(sort_process);\n\t\t\tsensitive << clk.pos();\n\t\t\tSC_THREAD(print_process);\n\t\t\tsensitive << clk.pos();\n\t\t}\n};\n\nint sc_main(int argc, char* argv[]) {\n\tSelectionSort ss(\"ss\");\n\tss.clk.initialize(false);\n\tss.start.initialize(false);\n\tss.done.initialize(false);\n\tss.arr[0].initialize(64);\n\tss.arr[1].initialize(25);\n\tss.arr[2].initialize(12);\n\tss.arr[3].initialize(22);\n\tss.arr[4].initialize(11);\n\tss.n.initialize(5);\n\n\tsc_start(10, SC_NS);\n\tss.start.write(true);\n\tsc_start(100, SC_NS);\n\tss.start.write(false);\n\tsc_start(10, SC_NS);\n\n\treturn 0;\n}\n```"
  }
}
```