
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! **Inputs and Outputs**:
- **Input**: An integer representing an octal number (`num` in the C++ code).
- **Output**: An integer representing the decimal equivalent of the input octal number.

**Line-by-Line Explanation**:
1. **Include Header and Namespace**:
   ```cpp
   #include <iostream>
   using namespace std;
   ```
   - This includes the standard input-output stream library and brings the `std` namespace into scope.

2. **Function Definition**:
   ```cpp
   int octalToDecimal(int n)
   {
       int num = n;
       int dec_value = 0;
       int base = 1;
       int temp = num;
       while (temp)
       {
           int last_digit = temp % 10;
           temp = temp / 10;
           dec_value += last_digit * base;
           base = base * 8;
       }
       return dec_value;
   }
   ```
   - **Function Purpose**: Converts an octal number to a decimal number.
   - **Variables**:
     - `num`: Stores the input octal number.
     - `dec_value`: Accumulates the decimal value.
     - `base`: Tracks the power of 8 corresponding to each digit.
     - `temp`: Used to process each digit of the octal number.
   - **Loop**:
     - Extracts the last digit of `temp` using modulo operation (`temp % 10`).
     - Removes the last digit from `temp` by integer division (`temp / 10`).
     - Adds the product of the last digit and the current base to `dec_value`.
     - Multiplies the base by 8 to move to the next higher place value in the octal system.

3. **Main Function**:
   ```cpp
   int main()
   {
       int num = 67;
       cout << octalToDecimal(num) << endl;
   }
   ```
   - Initializes `num` with the octal number 67.
   - Calls `octalToDecimal` with `num` and prints the result.

**SystemC Code**:
```cpp
#include <systemc.h>

SC_MODULE(OctalToDecimalConverter) {
    sc_in<int> octal_input;
    sc_out<int> decimal_output;

    SC_CTOR(OctalToDecimalConverter) {
        SC_METHOD(convert);
        sensitive << octal_input;
    }

    void convert() {
        int num = octal_input.read();
        int dec_value = 0;
        int base = 1;
        int temp = num;

        while (temp) {
            int last_digit = temp % 10;
            temp = temp / 10;
            dec_value += last_digit * base;
            base = base * 8;
        }

        decimal_output.write(dec_value);
    }
};

int sc_main(int argc, char* argv[]) {
    OctalToDecimalConverter converter("converter");
    sc_signal<int> octal_input_signal;
    sc_signal<int> decimal_output_signal;

    converter.octal_input(octal_input_signal);
    converter.decimal_output(decimal_output_signal);

    // Example input
    octal_input_signal.write(67);

    sc_start();

    std::cout << "Decimal Output: " << decimal_output_signal.read() << std::endl;

    return 0;
}
```

**Explanation of SystemC Code**:
1. **Module Definition**:
   ```cpp
   SC_MODULE(OctalToDecimalConverter) {
       sc_in<int> octal_input;
       sc_out<int> decimal_output;
   ```
   - Defines a SystemC module named `OctalToDecimalConverter` with input and output ports.

2. **Constructor**:
   ```cpp
   SC_CTOR(OctalToDecimalConverter) {
       SC_METHOD(convert);
       sensitive << octal_input;
   }
   ```
   - Registers the `convert` method as a SystemC method sensitive to changes in `octal_input`.

3. **Conversion Method**:
   ```cpp
   void convert() {
       int num = octal_input.read();
       int dec_value = 0;
       int base = 1;
       int temp = num;

       while (temp) {
           int last_digit = temp % 10;
           temp = temp / 10;
           dec_value += last_digit * base;
           base = base * 8;
       }

       decimal_output.write(dec_value);
   }
   ```
   - Implements the logic to convert an octal number to a decimal number, similar to the C++ function.

4. **Main Function**:
   ```cpp
   int sc_main(int argc, char* argv[]) {
       OctalToDecimalConverter converter("converter");
       sc_signal<int> octal_input_signal;
       sc_signal<int> decimal_output_signal;

       converter.octal_input(octal_input_signal);
       converter.decimal_output(decimal_output_signal);

       // Example input
       octal_input_signal.write(67);

       sc_start();

       std::cout << "Decimal Output: " << decimal_output_signal.read() << std::endl;

       return 0;
   }
   ```
   - Instantiates the `OctalToDecimalConverter` module and connects it to signals.
   - Writes an example octal number to the input signal and starts the simulation.
   - Reads and prints the decimal output from the output signal.