
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ```json
{
  "inputs": [
    {
      "name": "year",
      "description": "An integer representing the year to be checked."
    }
  ],
  "outputs": [
    {
      "name": "is_leap_year",
      "description": "A boolean indicating whether the given year is a leap year."
    }
  ],
  "summary": [
    {
      "line": 1,
      "content": "Include the iostream library for input and output operations."
    },
    {
      "line": 2,
      "content": "Use the standard namespace to avoid prefixing standard library names with 'std::'."
    },
    {
      "line": 5,
      "content": "Define a function 'checkYear' that takes an integer 'year' as input and returns a boolean indicating whether the year is a leap year."
    },
    {
      "line": 7,
      "content": "Check if the year is divisible by 400. If true, return true (it is a leap year)."
    },
    {
      "line": 11,
      "content": "Check if the year is divisible by 100 but not by 400. If true, return false (it is not a leap year)."
    },
    {
      "line": 15,
      "content": "Check if the year is divisible by 4 but not by 100. If true, return true (it is a leap year)."
    },
    {
      "line": 19,
      "content": "If none of the above conditions are met, return false (it is not a leap year)."
    },
    {
      "line": 23,
      "content": "Main function where the program execution begins."
    },
    {
      "line": 25,
      "content": "Declare an integer variable 'year' and initialize it to 2000."
    },
    {
      "line": 27,
      "content": "Call the 'checkYear' function with 'year' as the argument. Use the ternary operator to print 'Leap Year' if the result is true, otherwise print 'Not a Leap Year'."
    },
    {
      "line": 30,
      "content": "Return 0 to indicate successful execution of the program."
    }
  ]
}
```

**SystemC Code Snippet**:

```cpp
#include <systemc.h>

SC_MODULE(LeapYearChecker) {
    sc_in<int> year;
    sc_out<bool> is_leap_year;

    void checkLeapYear() {
        bool leap = false;

        if (year.read() % 400 == 0) {
            leap = true;
        } else if (year.read() % 100 == 0) {
            leap = false;
        } else if (year.read() % 4 == 0) {
            leap = true;
        } else {
            leap = false;
        }

        is_leap_year.write(leap);
    }

    SC_CTOR(LeapYearChecker) {
        SC_METHOD(checkLeapYear);
        sensitive << year;
    }
};

int sc_main(int argc, char* argv[]) {
    LeapYearChecker checker("checker");

    sc_signal<int> year_signal;
    sc_signal<bool> is_leap_year_signal;

    checker.year(year_signal);
    checker.is_leap_year(is_leap_year_signal);

    // Example usage
    year_signal.write(2000);
    sc_start();
    cout << "Year: " << year_signal.read() << ", Is Leap Year: " << is_leap_year_signal.read() << endl;

    return 0;
}
```

### Explanation of SystemC Code:
1. **Module Definition**: The `LeapYearChecker` module is defined to encapsulate the logic for checking if a year is a leap year.
2. **Signals**: Two signals, `year` and `is_leap_year`, are declared to handle input and output respectively.
3. **Method**: The `checkLeapYear` method contains the logic to determine if the input year is a leap year, similar to the `checkYear` function in the C++ code.
4. **Constructor**: The constructor sets up the sensitivity of the `checkLeapYear` method to changes in the `year` signal.
5. **Main Function**: In the `sc_main` function, an instance of `LeapYearChecker` is created, and the signals are connected. An example usage is provided to demonstrate how the module can be used.