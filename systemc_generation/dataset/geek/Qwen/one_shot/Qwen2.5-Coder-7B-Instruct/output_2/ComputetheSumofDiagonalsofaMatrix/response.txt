
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<|im_start|>### Inputs and Outputs

**Inputs:**
- `matrix`: A 2D array of integers representing the square matrix whose diagonals' sums need to be calculated.

**Outputs:**
- `principal`: The sum of the elements on the principal diagonal (top-left to bottom-right).
- `secondary`: The sum of the elements on the secondary diagonal (top-right to bottom-left).

### Detailed Explanation

#### Line-by-Line Explanation:

1. **Header Files and Namespace Declaration**:
   ```cpp
   #include <bits/stdc++.h> 
   using namespace std; 
   ```
   - Includes standard library headers and uses the standard namespace.

2. **Constant Definition**:
   ```cpp
   const int MAX = 100; 
   ```
   - Defines a constant `MAX` with the value 100, which is used to define the size of the matrix.

3. **Function Declaration**:
   ```cpp
   void printDiagonalSums(int mat[][MAX], int n) 
   { 
       int principal = 0, secondary = 0; 
   ```
   - Declares a function `printDiagonalSums` that takes a 2D array `mat` and an integer `n` as inputs. It initializes two variables `principal` and `secondary` to store the sums of the principal and secondary diagonals, respectively.

4. **Nested Loops to Calculate Diagonals**:
   ```cpp
   for (int i = 0; i < n; i++) 
   { 
       for (int j = 0; j < n; j++)	 
       { 
           if (i == j) 
               principal += mat[i][j]; 

           if ((i + j) == (n - 1)) 
               secondary += mat[i][j]; 
       } 
   } 
   ```
   - Uses nested loops to iterate through each element of the matrix.
   - If the current element's row index (`i`) is equal to its column index (`j`), it adds the element to `principal`.
   - If the sum of the current element's row index and column index equals `n - 1`, it adds the element to `secondary`.

5. **Output Statements**:
   ```cpp
   cout << "Principal Diagonal:" << principal << endl; 
   cout << "Secondary Diagonal:" << secondary << endl; 
   ```
   - Prints the sums of the principal and secondary diagonals.

6. **Main Function**:
   ```cpp
   int main() 
   { 
       int a[][MAX] = {{1, 2, 3, 4}, 
                       {5, 6, 7, 8}, 
                       {1, 2, 3, 4}, 
                       {5, 6, 7, 8}}; 
       printDiagonalSums(a, 4); 
       return 0; 
   } 
   ```
   - Defines a 4x4 matrix `a` and calls the `printDiagonalSums` function with this matrix and its size.

### SystemC Code Snippet

Here is the equivalent SystemC code that integrates the provided signals and maintains the logic of the original C++ code:

```cpp
#include <systemc.h>

SC_MODULE(DiagonalSumCalculator) {
    sc_in<int> matrix[4][4];  // Input port for the matrix
    sc_out<int> principal;     // Output port for the principal diagonal sum
    sc_out<int> secondary;     // Output port for the secondary diagonal sum

    int principal_sum = 0;
    int secondary_sum = 0;

    SC_CTOR(DiagonalSumCalculator) {
        SC_THREAD(calculate_diagonals);
        sensitive << matrix;
    }

    void calculate_diagonals() {
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                if (i == j)
                    principal_sum += matrix[i][j];

                if ((i + j) == 3)
                    secondary_sum += matrix[i][j];
            }
        }

        principal.write(principal_sum);
        secondary.write(secondary_sum);
    }
};

int sc_main(int argc, char* argv[]) {
    DiagonalSumCalculator calc("calc");

    int a[4][4] = {{1, 2, 3, 4},
                   {5, 6, 7, 8},
                   {1, 2, 3, 4},
                   {5, 6, 7, 8}};
    
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            calc.matrix[i][j](a[i][j]);
        }
    }

    sc_start();

    cout << "Principal Diagonal:" << calc.principal.read() << endl;
    cout << "Secondary Diagonal:" << calc.secondary.read() << endl;

    return 0;
}
```

This SystemC code defines a module `DiagonalSumCalculator` that calculates the sums of the principal and secondary diagonals of a 4x4 matrix. It uses the provided signals (`matrix`, `principal`, and `secondary`) to interface with the outside world. The `calculate_diagonals` method contains the logic to compute the sums and write them to the respective output ports.