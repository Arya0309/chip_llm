
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ```json
{
  "inputs": [
    "int arr[]": "An array of integers to be sorted",
    "int n": "The size of the array"
  ],
  "outputs": [
    "Sorted array": "The array sorted in ascending order"
  ],
  "summary": {
    "line-by-line": {
      "1-5": "Include necessary headers and use standard namespace.",
      "7-10": "Define a swap function to exchange values between two pointers.",
      "12-28": "Implement the selectionSort function which sorts an array using the selection sort algorithm.",
      "30-39": "Define a printArray function to display the elements of an array.",
      "41-53": "Main function where an array is initialized, sorted using selectionSort, and then printed."
    },
    "block-by-block": {
      "1-10": "Setup and utility functions including swap and printArray.",
      "12-28": "Core sorting logic: selectionSort function.",
      "41-53": "Driver logic: initialization, sorting, and printing the array."
    }
  },
  "systemc_code": "```cpp\n#include <systemc.h>\n\nSC_MODULE(SelectionSort) {\n    sc_in_clk clk;\n    sc_in<bool> start;\n    sc_out<bool> done;\n    sc_vector<sc_in<int>> arr_in;\n    sc_vector<sc_out<int>> arr_out;\n    int n;\n\n    void sort() {\n        int i, j, min_idx;\n        for (i = 0; i < n - 1; i++) {\n            min_idx = i;\n            for (j = i + 1; j < n; j++) {\n                if (arr_in[j].read() < arr_in[min_idx].read()) {\n                    min_idx = j;\n                }\n            }\n            int temp = arr_in[min_idx].read();\n            arr_out[min_idx].write(arr_in[i].read());\n            arr_out[i].write(temp);\n        }\n        done.write(true);\n    }\n\n    SC_CTOR(SelectionSort) : arr_in(\"arr_in\", n), arr_out(\"arr_out\", n) {\n        SC_THREAD(sort);\n        sensitive << start.pos();\n    }\n};\n```"
}
```