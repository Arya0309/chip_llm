
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ```json
{
  "inputs": [
    {
      "name": "key",
      "description": "The integer value to search for within the data vector."
    },
    {
      "name": "data",
      "description": "A vector of integers representing the dataset to search through."
    }
  ],
  "outputs": [
    {
      "name": "index",
      "description": "The position (0-based index) of the key in the data vector if found, otherwise -1."
    }
  ],
  "summary": [
    {
      "line": "int linearSearch(vector<int> v, int key)",
      "description": "Function declaration for linear search which takes a vector of integers and a key to search for."
    },
    {
      "line": "for (int i = 0; i < v.size(); i++)",
      "description": "Loop through each element in the vector."
    },
    {
      "line": "if (v[i] == key)",
      "description": "Check if the current element matches the key."
    },
    {
      "line": "return i;",
      "description": "Return the index if the key is found."
    },
    {
      "line": "return -1;",
      "description": "Return -1 if the key is not found after checking all elements."
    },
    {
      "line": "int main()",
      "description": "Main function where the program execution starts."
    },
    {
      "line": "vector<int> v = {1, 2, 3, 4, 5, 8, 9, 11};",
      "description": "Initialize a vector with predefined values."
    },
    {
      "line": "int key = 8;",
      "description": "Define the key to search for."
    },
    {
      "line": "int i = linearSearch(v, key);",
      "description": "Call the linearSearch function and store the result."
    },
    {
      "line": "if (i != -1)",
      "description": "Check if the key was found."
    },
    {
      "line": "cout << key << \" Found at Position: \" << i + 1;",
      "description": "Output the position of the key if found."
    },
    {
      "line": "else",
      "description": "If the key was not found."
    },
    {
      "line": "cout << key << \" NOT found.\";",
      "description": "Output that the key was not found."
    }
  ]
}
```

### SystemC Code

```cpp
#include <systemc.h>

SC_MODULE(LinearSearch) {
    sc_in<int> key;
    sc_out<int> index;
    sc_vector<sc_in<int>> data;

    SC_CTOR(LinearSearch) : data("data", 8) {
        SC_METHOD(search);
        sensitive << key << data;
    }

    void search() {
        int size = data.size();
        for (int i = 0; i < size; i++) {
            if (data[i].read() == key.read()) {
                index.write(i);
                return;
            }
        }
        index.write(-1);
    }
};
```

### Explanation of SystemC Code

1. **Module Declaration**:
   - `SC_MODULE(LinearSearch)`: Declares a SystemC module named `LinearSearch`.

2. **Port Declarations**:
   - `sc_in<int> key;`: Input port for the key to search for.
   - `sc_out<int> index;`: Output port for the index of the found key.
   - `sc_vector<sc_in<int>> data;`: Vector of input ports for the data to search through.

3. **Constructor**:
   - `SC_CTOR(LinearSearch) : data("data", 8)`: Initializes the module and sets up the data vector with 8 elements.
   - `SC_METHOD(search);`: Registers the `search` method to be executed whenever any of the sensitive signals change.
   - `sensitive << key << data;`: Specifies that the `search` method should be sensitive to changes in the `key` and `data` ports.

4. **Search Method**:
   - `void search()`: Method that performs the linear search.
   - `int size = data.size();`: Gets the size of the data vector.
   - `for (int i = 0; i < size; i++)`: Iterates through each element in the data vector.
   - `if (data[i].read() == key.read())`: Checks if the current element matches the key.
   - `index.write(i);`: Writes the index to the `index` port if the key is found.
   - `return;`: Exits the method if the key is found.
   - `index.write(-1);`: Writes -1 to the `index` port if the key is not found after checking all elements.