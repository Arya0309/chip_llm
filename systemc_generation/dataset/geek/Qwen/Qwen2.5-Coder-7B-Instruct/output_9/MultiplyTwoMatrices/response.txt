### Inputs and Outputs
**Inputs:**
- Two 2D integer arrays `mat1` and `mat2`, where `mat1` is of size `R1 x C1` and `mat2` is of size `R2 x C2`.

**Outputs:**
- A 2D integer array `rslt` of size `R1 x C2`, which represents the product of `mat1` and `mat2`.

### Detailed Explanation

1. **Macros Definition:**
   ```cpp
   #define R1 2 // Number of rows in Matrix-1
   #define C1 2 // Number of columns in Matrix-1
   #define R2 2 // Number of rows in Matrix-2
   #define C2 3 // Number of columns in Matrix-2
   ```
   These macros define the dimensions of the matrices.

2. **Function Declaration:**
   ```cpp
   void mulMat(int mat1[][C1], int mat2[][C2]);
   ```
   This function takes two matrices `mat1` and `mat2` as input and multiplies them.

3. **Matrix Multiplication Logic:**
   ```cpp
   int rslt[R1][C2];

   cout << "Multiplication of given two matrices is:\n";

   for (int i = 0; i < R1; i++) {
       for (int j = 0; j < C2; j++) {
           rslt[i][j] = 0;

           for (int k = 0; k < R2; k++) {
               rslt[i][j] += mat1[i][k] * mat2[k][j];
           }

           cout << rslt[i][j] << "\t";
       }

       cout << endl;
   }
   ```
   - A result matrix `rslt` is initialized to store the product.
   - Nested loops iterate over the elements of the matrices to compute the product.
   - For each element `rslt[i][j]`, it accumulates the product of corresponding elements from `mat1` and `mat2`.
   - The result is printed to the console.

4. **Driver Code:**
   ```cpp
   int main() {
       int mat1[R1][C1] = { { 1, 1 }, { 2, 2 } };
       int mat2[R2][C2] = { { 1, 1, 1 }, { 2, 2, 2 } };

       if (C1 != R2) {
           cout << "The number of columns in Matrix-1 must be equal to the number of rows in Matrix-2" << endl;
           exit(EXIT_FAILURE);
       }

       mulMat(mat1, mat2);

       return 0;
   }
   ```
   - The matrices `mat1` and `mat2` are initialized.
   - A check ensures that the number of columns in `mat1` equals the number of rows in `mat2`.
   - The `mulMat` function is called to perform the multiplication.

### SystemC Code Snippet

```cpp
#include <systemc.h>

SC_MODULE(MatrixMultiplier) {
    sc_in<int> A[SIZE_A];  // Input port for Matrix-1
    sc_in<int> B[SIZE_B];  // Input port for Matrix-2
    sc_out<int> C[SIZE_RESULT]; // Output port for the result

    // Constructor
    SC_CTOR(MatrixMultiplier) {
        // Process to perform matrix multiplication
        SC_THREAD(mulMat);
        sensitive << A << B;
    }

    // Method to perform matrix multiplication
    void mulMat() {
        int rslt[SIZE_A][SIZE_B];

        for (int i = 0; i < SIZE_A; i++) {
            for (int j = 0; j < SIZE_B; j++) {
                rslt[i][j] = 0;

                for (int k = 0; k < SIZE_A; k++) {
                    rslt[i][j] += A[i * SIZE_A + k] * B[k * SIZE_B + j];
                }

                C[i * SIZE_B + j].write(rslt[i][j]);
            }
        }
    }
};
```

### Explanation of SystemC Code

1. **Module Declaration:**
   ```cpp
   SC_MODULE(MatrixMultiplier) {
   ```
   Defines a SystemC module named `MatrixMultiplier`.

2. **Input and Output Ports:**
   ```cpp
   sc_in<int> A[SIZE_A];  // Input port for Matrix-1
   sc_in<int> B[SIZE_B];  // Input port for Matrix-2
   sc_out<int> C[SIZE_RESULT]; // Output port for the result
   ```
   Declares input ports `A` and `B` for the matrices and an output port `C` for the result.

3. **Constructor:**
   ```cpp
   SC_CTOR(MatrixMultiplier) {
       SC_THREAD(mulMat);
       sensitive << A << B;
   }
   ```
   Initializes the module and sets up a thread `mulMat` to handle the multiplication.

4. **Matrix Multiplication Logic:**
   ```cpp
   void mulMat() {
       int rslt[SIZE_A][SIZE_B];

       for (int i = 0; i < SIZE_A; i++) {
           for (int j = 0; j < SIZE_B; j++) {
               rslt[i][j] = 0;

               for (int k = 0; k < SIZE_A; k++) {
                   rslt[i][j] += A[i * SIZE_A + k] * B[k * SIZE_B + j];
               }

               C[i * SIZE_B + j].write(rslt[i][j]);
           }
       }
   }
   ```
   - Similar to the original C++ code, this method performs matrix multiplication.
   - The result is written to the output port `C`.

This SystemC code faithfully captures the logic of the original C++ matrix multiplication program and can be integrated into a high-level synthesis flow.