### Inputs and Outputs
- **Inputs**: 
  - `matrix`: A 2D array of `double` values representing the square matrix whose determinant needs to be calculated. The size of the matrix is determined by the constant `SIZE`.
- **Outputs**: 
  - `det`: A `double` value representing the determinant of the input matrix.

### Detailed Line-by-Line Explanation

1. **Header Files and Namespace Declaration**
   ```cpp
   #include <iostream>
   #include <cmath>
   using namespace std;
   ```
   - Include necessary headers for input/output operations and mathematical functions.
   - Use the standard namespace to simplify code.

2. **Constant Definition**
   ```cpp
   const int MAXN = 105;
   double a[MAXN][MAXN];
   ```
   - Define a constant `MAXN` to represent the maximum size of the matrix.
   - Declare a 2D array `a` to store the matrix elements.

3. **Function to Calculate Determinant**
   ```cpp
   double determinant(int n) {
       double det = 1.0;
       for (int i = 0; i < n; i++) {
           int pivot = i;
           for (int j = i + 1; j < n; j++) {
               if (abs(a[j][i]) > abs(a[pivot][i])) {
                   pivot = j;
               }
           }
           if (pivot != i) {
               swap(a[i], a[pivot]);
               det *= -1;
           }
           if (a[i][i] == 0) {
               return 0;
           }
           det *= a[i][i];
           for (int j = i + 1; j < n; j++) {
               double factor = a[j][i] / a[i][i];
               for (int k = i + 1; k < n; k++) {
                   a[j][k] -= factor * a[i][k];
               }
           }
       }
       return det;
   }
   ```
   - **Parameters**: `n` (the size of the matrix).
   - **Initialization**: Initialize `det` to 1.0.
   - **Pivoting**: For each row, find the row with the maximum absolute value in the current column and swap it with the current row if necessary. This helps in reducing numerical instability.
   - **Zero Pivot Check**: If the pivot element is zero, the determinant is zero.
   - **Scale and Eliminate**: Scale the current row and subtract it from the subsequent rows to eliminate elements below the pivot.
   - **Update Determinant**: Multiply the determinant by the pivot element.

4. **Main Function**
   ```cpp
   int main() {
       int n = 4;
       double matrix[4][4] = {{1, 0, 2, -1},
                               {3, 0, 0, 5},
                               {2, 1, 4, -3},
                               {1, 0, 5, 0}};
       for (int i = 0; i < n; i++) {
           for (int j = 0; j < n; j++) {
               a[i][j] = matrix[i][j];
           }
       }
       double det = determinant(n);
       cout << "Determinant = " << det << endl;
       return 0;
   }
   ```
   - **Matrix Initialization**: Define a 4x4 matrix and copy its elements to the global array `a`.
   - **Calculate Determinant**: Call the `determinant` function and print the result.

### Equivalent SystemC Code

```cpp
#include <systemc.h>

SC_MODULE(DeterminantCalculator) {
    sc_in<double> matrix[SIZE]; // Input matrix
    sc_out<double> det;         // Output determinant

    SC_CTOR(DeterminantCalculator) {
        SC_METHOD(calculate_determinant);
        sensitive << matrix;
    }

    void calculate_determinant() {
        double a[SIZE][SIZE];
        double det = 1.0;
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                a[i][j] = matrix[i][j].read();
            }
        }

        for (int i = 0; i < SIZE; i++) {
            int pivot = i;
            for (int j = i + 1; j < SIZE; j++) {
                if (fabs(a[j][i]) > fabs(a[pivot][i])) {
                    pivot = j;
                }
            }
            if (pivot != i) {
                for (int k = 0; k < SIZE; k++) {
                    double temp = a[i][k];
                    a[i][k] = a[pivot][k];
                    a[pivot][k] = temp;
                }
                det *= -1;
            }
            if (a[i][i] == 0) {
                det = 0;
                break;
            }
            det *= a[i][i];
            for (int j = i + 1; j < SIZE; j++) {
                double factor = a[j][i] / a[i][i];
                for (int k = i + 1; k < SIZE; k++) {
                    a[j][k] -= factor * a[i][k];
                }
            }
        }

        det.write(det);
    }
};
```

### Explanation of SystemC Code

- **Module Declaration**: Define a SystemC module `DeterminantCalculator` with input `matrix` and output `det`.
- **Constructor**: Set up the method `calculate_determinant` to be sensitive to changes in the input matrix.
- **Matrix Copying**: Copy the input matrix elements to a local array `a`.
- **Determinant Calculation**: Implement the same logic as the original C++ code to calculate the determinant.
- **Output**: Write the calculated determinant to the output port `det`.

This SystemC code integrates seamlessly with the provided signals and can be used in a high-level synthesis flow.