The error indicates that the `LinearSearch` module is being instantiated with two arguments, but the constructor of `LinearSearch` only accepts one argument of type `sc_core::sc_module_name`. The error message points to the instantiation of `LinearSearch` in the testbench:

```cpp
ls_inst = new LinearSearch("ls_inst", 8);
```

This line is attempting to pass two arguments to the `LinearSearch` constructor: a module name (`"ls_inst"`) and an integer (`8`). However, the `LinearSearch` constructor is defined to accept only one argument, which is the module name.

To resolve this issue, we need to adjust the instantiation of `LinearSearch` in the testbench to match the constructor signature. We should remove the second argument (the integer) from the instantiation call.

Here's the corrected version of the code snippet:

```cpp
#include <systemc.h>
#include <vector>

SC_MODULE(LinearSearch) {
    sc_in<int> key;  // Input port for the key to search
    sc_out<int> index; // Output port for the index where the key is found or -1 if not found
    sc_vector<sc_in<int>> data; // Vector to hold the data

    // Constructor
    SC_CTOR(LinearSearch) : data("data", 8) { // Initialize the data vector with size 8
        // Process to perform linear search
        SC_METHOD(search);
        sensitive << key;
        for (int i = 0; i < data.size(); i++) {
            sensitive << data[i];
        }
    }

    void search() {
        int size = data.size();
        int i = 0;

        // Iterate through the vector to find the key
        while (i < size && data[i].read() != key) {
            i++;
        }

        // Assign the result to the output port
        if (i < size) {
            index.write(i); // Key found, write the index
        } else {
            index.write(-1); // Key not found, write -1
        }
    }
};

SC_MODULE(Testbench) {
    sc_signal<int> key;
    sc_signal<int> index;
    sc_vector<sc_signal<int>> data;
    LinearSearch* ls_inst;

    SC_CTOR(Testbench) : data("data", 8) {
        ls_inst = new LinearSearch("ls_inst");

        // Connect signals to the module
        ls_inst->key(key);
        ls_inst->index(index);
        for (int i = 0; i < data.size(); i++) {
            ls_inst->data[i](data[i]);
        }

        // Test case
        SC_THREAD(test);
    }

    void test() {
        // Initialize data
        for (int i = 0; i < data.size(); i++) {
            data[i].write(i + 1);
        }

        // Set key to search
        key.write(8);

        // Wait for the search to complete
        wait();

        // Check the result
        if (index.read() == 6) {
            std::cout << "Test passed." << std::endl;
        } else {
            std::cout << "Test failed." << std::endl;
        }
    }
};

int sc_main(int argc, char* argv[]) {
    Testbench tb("tb");
    sc_start();
    return 0;
}
```

### Explanation of Changes:
1. **Constructor Change**: The `LinearSearch` constructor remains unchanged as it correctly accepts only one argument (`sc_core::sc_module_name`).
2. **Instantiation Change**: The instantiation of `LinearSearch` in the `Testbench` module is changed to:
   ```cpp
   ls_inst = new LinearSearch("ls_inst");
   ```
   This removes the second argument (`8`) from the instantiation call.
3. **Signal Connections**: The signals (`key`, `index`, and `data`) are connected to the `LinearSearch` module within the `test` method of the `Testbench` module.

With these changes, the `LinearSearch` module should be instantiated correctly, and the unit tests should pass.