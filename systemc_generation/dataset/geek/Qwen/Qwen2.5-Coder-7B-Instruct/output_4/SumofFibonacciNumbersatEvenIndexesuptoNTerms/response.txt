### Analysis of the C++/C Code

**Inputs and Outputs:**
- **Input:** An integer `n` which represents the number of terms in the Fibonacci sequence up to which the even-indexed Fibonacci numbers' sum is calculated.
- **Output:** The sum of the even-indexed Fibonacci numbers up to `n` terms.

**Code Breakdown:**

1. **Header File and Namespace:**
   ```cpp
   #include <bits/stdc++.h>
   using namespace std;
   ```
   - This includes the standard library and uses the standard namespace for convenience.

2. **Function Declaration:**
   ```cpp
   int calculateEvenSum(int n)
   ```
   - Declares a function `calculateEvenSum` that takes an integer `n` and returns an integer.

3. **Edge Case Handling:**
   ```cpp
   if (n <= 0)
       return 0;
   ```
   - If `n` is less than or equal to zero, the function returns 0 immediately.

4. **Fibonacci Array Initialization:**
   ```cpp
   int fibo[2 * n + 1];
   fibo[0] = 0, fibo[1] = 1;
   ```
   - Initializes an array `fibo` to store the Fibonacci numbers up to `2 * n`. The first two elements are set to 0 and 1 respectively.

5. **Initialization of Sum:**
   ```cpp
   int sum = 0;
   ```
   - Initializes a variable `sum` to store the sum of even-indexed Fibonacci numbers.

6. **Loop to Calculate Fibonacci Numbers and Sum Even-Indexed Terms:**
   ```cpp
   for (int i = 2; i <= 2 * n; i++) {
       fibo[i] = fibo[i - 1] + fibo[i - 2];
       if (i % 2 == 0)
           sum += fibo[i];
   }
   ```
   - A loop runs from 2 to `2 * n` to calculate the Fibonacci numbers.
   - Inside the loop, the Fibonacci number at index `i` is computed as the sum of the previous two numbers (`fibo[i - 1] + fibo[i - 2]`).
   - If the index `i` is even (`i % 2 == 0`), the corresponding Fibonacci number is added to `sum`.

7. **Return the Result:**
   ```cpp
   return sum;
   ```
   - Returns the sum of the even-indexed Fibonacci numbers.

8. **Driver Code:**
   ```cpp
   int main() {
       int n = 8;
       cout << "Even indexed Fibonacci Sum upto " << n << " terms: " << calculateEvenSum(n) << endl;
       return 0;
   }
   ```
   - The `main` function sets `n` to 8 and prints the sum of the even-indexed Fibonacci numbers up to 8 terms.

### Equivalent SystemC Code

Here's the equivalent SystemC code that captures the same logic and integrates with the provided signals:

```cpp
#include <systemc.h>

SC_MODULE(FibonacciSum) {
    sc_in<int> n;  // Input port for the number of terms
    sc_out<int> sum; // Output port for the sum of even-indexed Fibonacci numbers

    SC_CTOR(FibonacciSum) {
        SC_THREAD(calculate_even_sum);
        sensitive << n;
    }

    void calculate_even_sum() {
        if (n.read() <= 0) {
            sum.write(0);
            return;
        }

        int fibo[2 * n.read() + 1];
        fibo[0] = 0, fibo[1] = 1;
        int sum_val = 0;

        for (int i = 2; i <= 2 * n.read(); i++) {
            fibo[i] = fibo[i - 1] + fibo[i - 2];
            if (i % 2 == 0) {
                sum_val += fibo[i];
            }
        }

        sum.write(sum_val);
    }
};
```

### Explanation of the SystemC Code

1. **Module Declaration:**
   ```cpp
   SC_MODULE(FibonacciSum) {
       sc_in<int> n;  // Input port for the number of terms
       sc_out<int> sum; // Output port for the sum of even-indexed Fibonacci numbers
   ```
   - Defines a SystemC module named `FibonacciSum` with an input port `n` and an output port `sum`.

2. **Constructor:**
   ```cpp
   SC_CTOR(FibonacciSum) {
       SC_THREAD(calculate_even_sum);
       sensitive << n;
   }
   ```
   - Constructs the module and binds the `calculate_even_sum` thread to the input `n`.

3. **Thread Function:**
   ```cpp
   void calculate_even_sum() {
       if (n.read() <= 0) {
           sum.write(0);
           return;
       }

       int fibo[2 * n.read() + 1];
       fibo[0] = 0, fibo[1] = 1;
       int sum_val = 0;

       for (int i = 2; i <= 2 * n.read(); i++) {
           fibo[i] = fibo[i - 1] + fibo[i - 2];
           if (i % 2 == 0) {
               sum_val += fibo[i];
           }
       }

       sum.write(sum_val);
   }
   ```
   - This thread function performs the same logic as the original C++ code.
   - It checks if `n` is less than or equal to zero and writes 0 to `sum` if true.
   - It initializes the Fibonacci array and calculates the sum of even-indexed Fibonacci numbers.
   - Finally, it writes the calculated sum to the `sum` port.

This SystemC code is now ready to be integrated into a high-level synthesis flow and tested with the provided signals.