### Analysis of the Provided C++/C Code

#### Inputs and Outputs
- **Inputs**: 
  - A 2D array `mat` of integers with a maximum size of `MAX` (currently set to 100).
  - An integer `n` representing the dimension of the square matrix.
  
- **Outputs**:
  - Two integers: the sum of the principal diagonal and the sum of the secondary diagonal of the matrix.

#### Detailed Explanation

1. **Constants and Declarations**:
   ```cpp
   const int MAX = 100;
   ```
   - `MAX` is defined as 100, which sets the maximum size of the matrix.

2. **Function Definition**:
   ```cpp
   void printDiagonalSums(int mat[][MAX], int n)
   ```
   - This function takes a 2D array `mat` and an integer `n` as input parameters.

3. **Initialization of Variables**:
   ```cpp
   int principal = 0, secondary = 0;
   ```
   - Two variables, `principal` and `secondary`, are initialized to store the sums of the principal and secondary diagonals, respectively.

4. **Nested Loops to Traverse the Matrix**:
   ```cpp
   for (int i = 0; i < n; i++) {
       for (int j = 0; j < n; j++) {
           if (i == j) 
               principal += mat[i][j];
           if ((i + j) == (n - 1)) 
               secondary += mat[i][j];
       }
   }
   ```
   - The outer loop iterates over each row (`i`), and the inner loop iterates over each column (`j`) of the matrix.
   - If the current element is on the principal diagonal (where `i == j`), it is added to `principal`.
   - If the current element is on the secondary diagonal (where `i + j == n - 1`), it is added to `secondary`.

5. **Output the Results**:
   ```cpp
   cout << "Principal Diagonal:" << principal << endl;
   cout << "Secondary Diagonal:" << secondary << endl;
   ```
   - The sums of the principal and secondary diagonals are printed to the console.

6. **Driver Code**:
   ```cpp
   int main() {
       int a[][MAX] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {1, 2, 3, 4}, {5, 6, 7, 8}};
       printDiagonalSums(a, 4);
       return 0;
   }
   ```
   - A sample matrix `a` is defined and passed to the `printDiagonalSums` function.

### Equivalent SystemC Code

```cpp
#include <systemc.h>

SC_MODULE(DiagonalSum) {
    sc_in<int> matrix[SIZE][SIZE];  // Input port for the matrix
    sc_out<int> principal;         // Output port for the principal diagonal sum
    sc_out<int> secondary;         // Output port for the secondary diagonal sum

    // Constructor
    SC_CTOR(DiagonalSum) {
        // Process to calculate diagonal sums
        SC_METHOD(calculate_diagonals);
        sensitive << matrix;
    }

    // Method to calculate the sums of the diagonals
    void calculate_diagonals() {
        int principal_sum = 0, secondary_sum = 0;
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (i == j) 
                    principal_sum += matrix[i][j];
                if ((i + j) == (SIZE - 1)) 
                    secondary_sum += matrix[i][j];
            }
        }
        principal.write(principal_sum);
        secondary.write(secondary_sum);
    }
};
```

### Explanation of the SystemC Code

- **Inputs and Outputs**:
  - `matrix`: A 2D array of integers with dimensions `SIZE x SIZE`.
  - `principal` and `secondary`: Output ports for the sums of the principal and secondary diagonals, respectively.

- **Constructor**:
  - The constructor initializes a method `calculate_diagonals` to be sensitive to changes in the `matrix`.

- **Method `calculate_diagonals`**:
  - This method calculates the sums of the principal and secondary diagonals similar to the original C++ code.
  - The results are written to the `principal` and `secondary` output ports.

This SystemC code snippet faithfully captures the logic of the original C++/C source and can be integrated into a high-level synthesis flow.