### Inputs and Outputs

**Inputs:**
- A square matrix `matrix` of size `n x n`.

**Outputs:**
- The determinant of the input matrix.

### Detailed Explanation

The provided C++/C code calculates the determinant of a given square matrix using Gaussian elimination with partial pivoting. Here's a line-by-line breakdown:

1. **Include Necessary Headers**
   ```cpp
   #include <iostream>
   #include <cmath>
   ```
   - `iostream` is included for input/output operations.
   - `cmath` is included for mathematical functions like `abs()`.

2. **Constants and Variables**
   ```cpp
   using namespace std;
   const int MAXN = 105;
   double a[MAXN][MAXN];
   ```
   - `MAXN` is set to 105, which is the maximum size of the matrix.
   - `a` is a 2D array to store the matrix elements.

3. **Function to Calculate Determinant**
   ```cpp
   double determinant(int n) {
       double det = 1.0;
       for (int i = 0; i < n; i++) {
           int pivot = i;
           for (int j = i + 1; j < n; j++) {
               if (abs(a[j][i]) > abs(a[pivot][i])) {
                   pivot = j;
               }
           }
           if (pivot != i) {
               swap(a[i], a[pivot]);
               det *= -1;
           }
           if (a[i][i] == 0) {
               return 0;
           }
           det *= a[i][i];
           for (int j = i + 1; j < n; j++) {
               double factor = a[j][i] / a[i][i];
               for (int k = i + 1; k < n; k++) {
                   a[j][k] -= factor * a[i][k];
               }
           }
       }
       return det;
   }
   ```
   - **Initialization**: `det` is initialized to 1.0.
   - **Outer Loop**: Iterates over each row `i`.
     - **Inner Loop**: Finds the row with the maximum absolute value in the current column to use as the pivot.
     - **Pivoting**: Swaps rows if necessary to ensure the pivot is the largest in magnitude.
     - **Check for Zero Pivot**: If the pivot element is zero, the determinant is zero.
     - **Scale and Eliminate**: Scales the pivot row and eliminates the elements below the pivot in the current column.

4. **Main Function**
   ```cpp
   int main() {
       int n = 4;
       double matrix[4][4] = {{1, 0, 2, -1},
                               {3, 0, 0, 5},
                               {2, 1, 4, -3},
                               {1, 0, 5, 0}};
       for (int i = 0; i < n; i++) {
           for (int j = 0; j < n; j++) {
               a[i][j] = matrix[i][j];
           }
       }
       double det = determinant(n);
       cout << "Determinant = " << det << endl;
       return 0;
   }
   ```
   - Initializes the matrix `matrix` and copies it to `a`.
   - Calls the `determinant` function and prints the result.

### Equivalent SystemC Code

Here's the equivalent SystemC code that uses the provided signals:

```cpp
#include <systemc.h>

SC_MODULE(DeterminantCalculator) {
    sc_in<double> matrix[SIZE];  // Input port for the matrix
    sc_out<double> det;          // Output port for the determinant

    SC_CTOR(DeterminantCalculator) {
        SC_THREAD(calculate_determinant);
        sensitive << matrix;
    }

    void calculate_determinant() {
        double a[SIZE][SIZE];
        double det = 1.0;
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                a[i][j] = matrix[i].read();
            }
        }

        for (int i = 0; i < SIZE; i++) {
            int pivot = i;
            for (int j = i + 1; j < SIZE; j++) {
                if (fabs(a[j][i]) > fabs(a[pivot][i])) {
                    pivot = j;
                }
            }
            if (pivot != i) {
                for (int k = 0; k < SIZE; k++) {
                    swap(a[i][k], a[pivot][k]);
                }
                det *= -1;
            }
            if (a[i][i] == 0) {
                det = 0;
                break;
            }
            det *= a[i][i];
            for (int j = i + 1; j < SIZE; j++) {
                double factor = a[j][i] / a[i][i];
                for (int k = i + 1; k < SIZE; k++) {
                    a[j][k] -= factor * a[i][k];
                }
            }
        }

        det.write(det);
    }
};
```

### Explanation of the SystemC Code

- **Module Definition**: The `DeterminantCalculator` module has `matrix` as an input port and `det` as an output port.
- **Constructor**: Initializes the `calculate_determinant` thread.
- **Thread Function**: 
  - Reads the matrix from the input ports.
  - Performs the same steps as the C++ code to calculate the determinant.
  - Writes the result to the `det` output port.

This SystemC code should integrate seamlessly with the provided testbench using the specified signals.