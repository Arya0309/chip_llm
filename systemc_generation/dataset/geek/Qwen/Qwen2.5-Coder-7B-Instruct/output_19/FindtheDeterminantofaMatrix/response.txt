### Analysis of the Provided C++/C Code

#### Inputs and Outputs
- **Inputs**: 
  - A 2D array `matrix` representing the square matrix whose determinant is to be calculated. The size of the matrix is specified by the variable `n`.
- **Outputs**:
  - The determinant of the input matrix.

#### Detailed Explanation of the Code

1. **Header Files and Namespace**
   ```cpp
   #include <iostream>
   #include <cmath>

   using namespace std;
   ```
   - These lines include the necessary header files for input/output operations and mathematical functions, respectively. The `std` namespace is used to avoid prefixing standard library names with `std::`.

2. **Constants and Global Variables**
   ```cpp
   const int MAXN = 105;
   double a[MAXN][MAXN];
   ```
   - `MAXN` is a constant defining the maximum size of the matrix.
   - `a` is a global 2D array used to store the matrix elements.

3. **Function: determinant**
   ```cpp
   double determinant(int n) {
       double det = 1.0;
       for (int i = 0; i < n; i++) {
           int pivot = i;
           for (int j = i + 1; j < n; j++) {
               if (abs(a[j][i]) > abs(a[pivot][i])) {
                   pivot = j;
               }
           }
           if (pivot != i) {
               swap(a[i], a[pivot]);
               det *= -1;
           }
           if (a[i][i] == 0) {
               return 0;
           }
           det *= a[i][i];
           for (int j = i + 1; j < n; j++) {
               double factor = a[j][i] / a[i][i];
               for (int k = i + 1; k < n; k++) {
                   a[j][k] -= factor * a[i][k];
               }
           }
       }
       return det;
   }
   ```
   - This function calculates the determinant of a matrix using Gaussian elimination with partial pivoting.
   - It initializes `det` to 1.0.
   - It iterates over each row `i` to find the pivot element (the row with the largest absolute value in column `i`).
   - If the pivot is not the current row, it swaps the rows and updates the determinant sign.
   - If the pivot element is zero, the determinant is zero.
   - It multiplies the determinant by the pivot element.
   - It eliminates the pivot element from the remaining rows by subtracting multiples of the pivot row.

4. **Main Function**
   ```cpp
   int main() {
       int n = 4;
       double matrix[4][4] = {{1, 0, 2, -1},
                               {3, 0, 0, 5},
                               {2, 1, 4, -3},
                               {1, 0, 5, 0}};
       for (int i = 0; i < n; i++) {
           for (int j = 0; j < n; j++) {
               a[i][j] = matrix[i][j];
           }
       }
       double det = determinant(n);
       cout << "Determinant = " << det << endl;
       return 0;
   }
   ```
   - The main function initializes a 4x4 matrix and copies its elements to the global array `a`.
   - It calls the `determinant` function to calculate the determinant.
   - It prints the determinant to the console.

### Equivalent SystemC Code

```cpp
#include <systemc.h>

SC_MODULE(DeterminantCalculator) {
    sc_in<double> matrix[SIZE];  // Input port for the matrix
    sc_out<double> det;          // Output port for the determinant

    SC_CTOR(DeterminantCalculator) {
        SC_METHOD(calculate_determinant);
        sensitive << matrix;
    }

    void calculate_determinant() {
        double a[SIZE][SIZE];
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                a[i][j] = matrix[i].read();
            }
        }

        double det_val = 1.0;
        for (int i = 0; i < SIZE; i++) {
            int pivot = i;
            for (int j = i + 1; j < SIZE; j++) {
                if (fabs(a[j][i]) > fabs(a[pivot][i])) {
                    pivot = j;
                }
            }
            if (pivot != i) {
                for (int k = 0; k < SIZE; k++) {
                    swap(a[i][k], a[pivot][k]);
                }
                det_val *= -1;
            }
            if (a[i][i] == 0) {
                det.write(0);
                return;
            }
            det_val *= a[i][i];
            for (int j = i + 1; j < SIZE; j++) {
                double factor = a[j][i] / a[i][i];
                for (int k = i + 1; k < SIZE; k++) {
                    a[j][k] -= factor * a[i][k];
                }
            }
        }
        det.write(det_val);
    }
};
```

### Explanation of the SystemC Code

- **Module Definition**:
  - `DeterminantCalculator` is a SystemC module that takes a 2D array `matrix` as input and outputs the determinant `det`.

- **Constructor**:
  - The constructor initializes the `calculate_determinant` method to be sensitive to changes in the `matrix` input.

- **Method: calculate_determinant**:
  - It reads the matrix elements from the `matrix` input port into a local 2D array `a`.
  - It initializes `det_val` to 1.0.
  - It iterates over each row `i` to find the pivot element and performs row swaps if necessary.
  - It eliminates the pivot element from the remaining rows.
  - If the pivot element is zero, it sets the determinant to zero and exits.
  - It multiplies the determinant by the pivot element.
  - Finally, it writes the determinant value to the `det` output port.

This SystemC code accurately reflects the logic of the original C++/C code and can be integrated into a high-level synthesis flow.