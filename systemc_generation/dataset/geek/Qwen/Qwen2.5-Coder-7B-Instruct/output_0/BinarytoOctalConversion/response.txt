### Input and Output
- **Input**: An integer representing an octal number (`num`).
- **Output**: An integer representing the decimal equivalent of the octal number.

### Detailed Explanation

1. **Header File Inclusion**:
   ```cpp
   #include <iostream>
   ```
   This line includes the standard input-output stream library, which is used for input and output operations.

2. **Namespace Declaration**:
   ```cpp
   using namespace std;
   ```
   This line allows the use of standard library names without prefixing them with `std::`.

3. **Function Declaration**:
   ```cpp
   int octalToDecimal(int n)
   ```
   This function takes an integer `n` (the octal number) and returns an integer (the decimal equivalent).

4. **Variable Initialization**:
   ```cpp
   int num = n;
   int dec_value = 0;
   ```
   - `num` is initialized to the input `n`.
   - `dec_value` is initialized to 0 to store the decimal equivalent.

5. **Base Initialization**:
   ```cpp
   int base = 1;
   ```
   - `base` is initialized to 1 to represent the base value of 8^0.

6. **Temporary Variable**:
   ```cpp
   int temp = num;
   ```
   - `temp` is initialized to `num` to preserve the original value while processing.

7. **While Loop**:
   ```cpp
   while (temp) {
       int last_digit = temp % 10;
       temp = temp / 10;
       dec_value += last_digit * base;
       base = base * 8;
   }
   ```
   - The loop continues until `temp` becomes 0.
   - `last_digit` extracts the last digit of `temp`.
   - `temp` is updated by removing the last digit.
   - `dec_value` is updated by adding the product of `last_digit` and `base`.
   - `base` is multiplied by 8 to shift to the next place value.

8. **Return Statement**:
   ```cpp
   return dec_value;
   ```
   - The function returns the calculated `dec_value`.

9. **Main Function**:
   ```cpp
   int main() {
       int num = 67;
       cout << octalToDecimal(num) << endl;
   }
   ```
   - The `main` function initializes `num` to 67 and prints the decimal equivalent of `num` using the `octalToDecimal` function.

### SystemC Code Snippet

```cpp
#include <systemc.h>

SC_MODULE(OctalToDecimal) {
    sc_in<int> octal_input;  // Input port for the octal number
    sc_out<int> decimal_output; // Output port for the decimal equivalent

    // Constructor
    SC_CTOR(OctalToDecimal) {
        // Process to perform conversion
        SC_METHOD(convert);
        sensitive << octal_input;
    }

    // Method to convert octal to decimal
    void convert() {
        int num = octal_input.read();
        int dec_value = 0;
        int base = 1;
        int temp = num;

        while (temp) {
            int last_digit = temp % 10;
            temp = temp / 10;
            dec_value += last_digit * base;
            base = base * 8;
        }

        decimal_output.write(dec_value);
    }
};
```

### Explanation of SystemC Code

1. **Module Declaration**:
   ```cpp
   SC_MODULE(OctalToDecimal) {
   ```
   - A SystemC module named `OctalToDecimal` is declared.

2. **Input and Output Ports**:
   ```cpp
   sc_in<int> octal_input;
   sc_out<int> decimal_output;
   ```
   - `octal_input` is an input port for the octal number.
   - `decimal_output` is an output port for the decimal equivalent.

3. **Constructor**:
   ```cpp
   SC_CTOR(OctalToDecimal) {
       SC_METHOD(convert);
       sensitive << octal_input;
   }
   ```
   - The constructor connects the `convert` method to the `octal_input` port.

4. **Conversion Method**:
   ```cpp
   void convert() {
       int num = octal_input.read();
       int dec_value = 0;
       int base = 1;
       int temp = num;

       while (temp) {
           int last_digit = temp % 10;
           temp = temp / 10;
           dec_value += last_digit * base;
           base = base * 8;
       }

       decimal_output.write(dec_value);
   }
   ```
   - This method reads the octal number from `octal_input`.
   - It then follows the same logic as the original C++ code to convert the octal number to decimal.
   - Finally, it writes the decimal value to `decimal_output`.