### Analysis of the C++/C Code

**Inputs and Outputs:**
- **Inputs:** None (The matrix is hardcoded within the `main` function)
- **Outputs:** The sorted 2D matrix is printed to the console.

**Explanation:**
1. **Swap Function (`swap`):**
   - Swaps the values of two integers pointed to by `xp` and `yp`.

2. **Sort Row-wise Function (`sortRowWise`):**
   - Takes a 2D matrix `m`, number of rows `r`, and number of columns `c`.
   - Loops through each row of the matrix.
   - For each row, loops through each element and compares it with the next element.
   - If the current element is greater than the next, they are swapped.
   - This process is repeated until the row is sorted.
   - After sorting all rows, the matrix is printed to the console.

3. **Main Function:**
   - Defines a 2D matrix `m`.
   - Calculates the number of rows `r` and columns `c`.
   - Calls the `sortRowWise` function to sort the matrix.
   - The sorted matrix is printed in the `sortRowWise` function itself.

### SystemC Code Snippet

To integrate this logic into a SystemC design, we need to create a module that accepts a 2D matrix, sorts it row-wise, and indicates when the sorting is done. We will use the provided signals `clk`, `start`, and `done`.

```cpp
#include <systemc.h>

SC_MODULE(MatrixSorter) {
    sc_in<bool> clk;          // Clock signal
    sc_in<bool> start;        // Start signal
    sc_out<bool> done;       // Done signal
    sc_inout<sc_vector<sc_vector<int>>*> matrix; // Input/Output matrix

    SC_CTOR(MatrixSorter) {
        SC_METHOD(sortMatrix);
        sensitive << clk.pos();
        dont_initialize();
    }

    void sortMatrix() {
        if (start.read()) {
            int r = matrix->size();
            int c = (*matrix)[0].size();

            for (int i = 0; i < r; i++) {
                for (int j = 0; j < c; j++) {
                    for (int k = 0; k < c - j - 1; k++) {
                        if ((*matrix)[i][k] > (*matrix)[i][k + 1]) {
                            swap((*matrix)[i][k], (*matrix)[i][k + 1]);
                        }
                    }
                }
            }

            done.write(true);
        } else {
            done.write(false);
        }
    }
};

int sc_main(int argc, char* argv[]) {
    sc_clock clk("clk", 10, SC_NS); // 10ns period clock
    sc_signal<bool> start, done;
    sc_vector<sc_vector<int>> matrix(4, sc_vector<int>(4));

    MatrixSorter sorter("sorter");
    sorter.clk(clk);
    sorter.start(start);
    sorter.done(done);
    sorter.matrix(&matrix);

    // Initialize matrix
    matrix[0] = {9, 8, 7, 1};
    matrix[1] = {7, 3, 0, 2};
    matrix[2] = {9, 5, 3, 2};
    matrix[3] = {6, 3, 1, 2};

    // Simulation loop
    sc_start(100, SC_NS);

    return 0;
}
```

### Explanation of SystemC Code:
1. **Module Definition (`MatrixSorter`):**
   - Contains input and output signals: `clk`, `start`, `done`, and `matrix`.
   - The `sortMatrix` method is triggered on the positive edge of the clock.
   - When `start` is high, the matrix is sorted row-wise.
   - After sorting, the `done` signal is set to high.

2. **Main Function (`sc_main`):**
   - Initializes the clock, signals, and matrix.
   - Starts the simulation for 100ns.

This SystemC code faithfully captures the logic of the original C++/C code and integrates seamlessly with the provided signals.