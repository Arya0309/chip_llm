### C++/C Code Analysis

#### Inputs and Outputs
- **Inputs**: 
  - A 2D array `matrix` of size `n x n`.
- **Outputs**: 
  - The determinant of the input matrix.

#### Detailed Explanation

1. **Constants and Declarations**:
   ```cpp
   const int MAXN = 105;
   double a[MAXN][MAXN];
   ```
   - `MAXN` is set to 105, indicating the maximum size of the matrix.
   - `a` is a 2D array to store the matrix elements.

2. **Function: determinant**
   ```cpp
   double determinant(int n) {
       double det = 1.0;
       for (int i = 0; i < n; i++) {
           int pivot = i;
           for (int j = i + 1; j < n; j++) {
               if (abs(a[j][i]) > abs(a[pivot][i])) {
                   pivot = j;
               }
           }
           if (pivot != i) {
               swap(a[i], a[pivot]);
               det *= -1;
           }
           if (a[i][i] == 0) {
               return 0;
           }
           det *= a[i][i];
           for (int j = i + 1; j < n; j++) {
               double factor = a[j][i] / a[i][i];
               for (int k = i + 1; k < n; k++) {
                   a[j][k] -= factor * a[i][k];
               }
           }
       }
       return det;
   }
   ```
   - **Initialization**: `det` is initialized to 1.0.
   - **Pivoting**: For each row `i`, find the row with the maximum absolute value in column `i` and swap it with the current row `i`. If a swap occurs, `det` is multiplied by -1.
   - **Check for Zero Pivot**: If the pivot element is zero, the determinant is zero.
   - **Scaling and Elimination**: Scale the current row and subtract it from subsequent rows to eliminate elements below the pivot in column `i`.

3. **Main Function**
   ```cpp
   int main() {
       int n = 4;
       double matrix[4][4] = {{1, 0, 2, -1},
                               {3, 0, 0, 5},
                               {2, 1, 4, -3},
                               {1, 0, 5, 0}};
       for (int i = 0; i < n; i++) {
           for (int j = 0; j < n; j++) {
               a[i][j] = matrix[i][j];
           }
       }
       double det = determinant(n);
       cout << "Determinant = " << det << endl;
       return 0;
   }
   ```
   - Define the size `n` and initialize the matrix.
   - Copy the matrix into the global array `a`.
   - Call the `determinant` function and print the result.

### Equivalent SystemC Code

```cpp
#include <systemc.h>

SC_MODULE(DeterminantCalculator) {
    sc_in<double> matrix[SIZE];  // Input port for the matrix
    sc_out<double> det;          // Output port for the determinant

    double a[SIZE][SIZE];
    int n;

    SC_CTOR(DeterminantCalculator) {
        SC_METHOD(calculate_determinant);
        sensitive << matrix;
    }

    void calculate_determinant() {
        // Copy the input matrix into the internal array
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                a[i][j] = matrix[i].read();
            }
        }

        double det = 1.0;
        for (int i = 0; i < n; i++) {
            int pivot = i;
            for (int j = i + 1; j < n; j++) {
                if (fabs(a[j][i]) > fabs(a[pivot][i])) {
                    pivot = j;
                }
            }
            if (pivot != i) {
                for (int k = 0; k < n; k++) {
                    swap(a[i][k], a[pivot][k]);
                }
                det *= -1;
            }
            if (a[i][i] == 0) {
                det = 0;
                break;
            }
            det *= a[i][i];
            for (int j = i + 1; j < n; j++) {
                double factor = a[j][i] / a[i][i];
                for (int k = i + 1; k < n; k++) {
                    a[j][k] -= factor * a[i][k];
                }
            }
        }
        this->det.write(det);
    }
};
```

### Explanation of SystemC Code

1. **Module Declaration**:
   - `DeterminantCalculator` is a SystemC module with an input array `matrix` and an output `det`.

2. **Member Variables**:
   - `a` is a 2D array to store the matrix elements.
   - `n` is the size of the matrix.

3. **Constructor**:
   - The constructor initializes the method `calculate_determinant` to be sensitive to changes in the `matrix` input.

4. **Method: calculate_determinant**
   - **Copy Matrix**: Copies the input matrix into the internal array `a`.
   - **Initialization**: Initializes `det` to 1.0.
   - **Pivoting and Scaling/Elimination**: Follows the same logic as the original C++ code to compute the determinant.
   - **Output**: Writes the computed determinant to the `det` output port.

This SystemC code accurately captures the logic of the original C++ code and can be integrated with the provided testbench signals.