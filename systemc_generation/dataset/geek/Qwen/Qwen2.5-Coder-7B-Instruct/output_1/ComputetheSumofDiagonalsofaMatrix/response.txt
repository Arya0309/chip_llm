### C++/C Code Analysis

#### Inputs and Outputs
- **Inputs**: 
  - `mat`: A 2D array of integers representing the matrix.
  - `n`: An integer representing the size of the matrix (number of rows and columns).

- **Outputs**:
  - `principal`: The sum of the elements on the principal diagonal of the matrix.
  - `secondary`: The sum of the elements on the secondary diagonal of the matrix.

#### Detailed Explanation

1. **Constants and Variables**:
   ```cpp
   const int MAX = 100; 
   ```
   - Defines the maximum size of the matrix.

2. **Function Declaration**:
   ```cpp
   void printDiagonalSums(int mat[][MAX], int n)
   ```
   - Declares a function to calculate and print the sums of the principal and secondary diagonals of a given matrix.

3. **Variable Declarations**:
   ```cpp
   int principal = 0, secondary = 0;
   ```
   - Initializes variables to store the sums of the principal and secondary diagonals.

4. **Nested Loops to Traverse Matrix**:
   ```cpp
   for (int i = 0; i < n; i++) {
       for (int j = 0; j < n; j++) {
           if (i == j) 
               principal += mat[i][j]; 
           if ((i + j) == (n - 1)) 
               secondary += mat[i][j]; 
       }
   }
   ```
   - Iterates through each element of the matrix.
   - Adds the element to the `principal` sum if its row index equals its column index (principal diagonal).
   - Adds the element to the `secondary` sum if the sum of its row and column indices equals `n-1` (secondary diagonal).

5. **Output the Results**:
   ```cpp
   cout << "Principal Diagonal:" << principal << endl; 
   cout << "Secondary Diagonal:" << secondary << endl; 
   ```
   - Prints the sums of the principal and secondary diagonals.

6. **Main Function**:
   ```cpp
   int main() {
       int a[][MAX] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {1, 2, 3, 4}, {5, 6, 7, 8}};
       printDiagonalSums(a, 4);
       return 0;
   }
   ```
   - Initializes a sample matrix and calls the `printDiagonalSums` function to compute and print the diagonal sums.

### SystemC Code Snippet

```cpp
#include <systemc.h>

SC_MODULE(DiagonalSumCalculator) {
    sc_in<int> matrix[SIZE]; // Input port for the matrix
    sc_out<int> principal;  // Output port for the principal diagonal sum
    sc_out<int> secondary;  // Output port for the secondary diagonal sum

    SC_CTOR(DiagonalSumCalculator) {
        SC_METHOD(calculate_diagonals);
        sensitive << matrix;
    }

    void calculate_diagonals() {
        int n = SIZE; // Assuming SIZE is defined elsewhere
        int principal_sum = 0, secondary_sum = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j) 
                    principal_sum += matrix[i][j]; 
                if ((i + j) == (n - 1)) 
                    secondary_sum += matrix[i][j]; 
            }
        }

        principal.write(principal_sum);
        secondary.write(secondary_sum);
    }
};
```

### Explanation of SystemC Code

1. **Module Declaration**:
   ```cpp
   SC_MODULE(DiagonalSumCalculator)
   ```
   - Declares a SystemC module named `DiagonalSumCalculator`.

2. **Input and Output Ports**:
   ```cpp
   sc_in<int> matrix[SIZE];
   sc_out<int> principal;
   sc_out<int> secondary;
   ```
   - Declares input ports for the matrix and output ports for the sums of the principal and secondary diagonals.

3. **Constructor**:
   ```cpp
   SC_CTOR(DiagonalSumCalculator) {
       SC_METHOD(calculate_diagonals);
       sensitive << matrix;
   }
   ```
   - Registers a method `calculate_diagonals` to be called whenever the matrix changes.

4. **Method to Calculate Diagonals**:
   ```cpp
   void calculate_diagonals() {
       int n = SIZE;
       int principal_sum = 0, secondary_sum = 0;

       for (int i = 0; i < n; i++) {
           for (int j = 0; j < n; j++) {
               if (i == j) 
                   principal_sum += matrix[i][j]; 
               if ((i + j) == (n - 1)) 
                   secondary_sum += matrix[i][j]; 
           }
       }

       principal.write(principal_sum);
       secondary.write(secondary_sum);
   }
   ```
   - Iterates through the matrix and calculates the sums of the principal and secondary diagonals.
   - Writes the results to the output ports.

This SystemC code faithfully captures the logic of the original C++/C source, integrating seamlessly with the provided signals for testbench integration.