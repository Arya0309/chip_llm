### Inputs and Outputs

**Inputs:**
- `matrix`: A 2D array of doubles representing the square matrix for which the determinant is to be calculated. This is provided through a SystemC signal `matrix` which is an array of `sc_in<double>`.

**Outputs:**
- `det`: A double representing the determinant of the input matrix. This is provided through a SystemC signal `det` which is an `sc_out<double>`.

### Detailed Explanation of the C++/C Code

The given C++/C code calculates the determinant of a square matrix using Gaussian elimination with partial pivoting. Hereâ€™s a line-by-line explanation:

1. **Constants and Variables:**
   ```cpp
   const int MAXN = 105;
   double a[MAXN][MAXN];
   ```
   - `MAXN` is set to 105, which is the maximum size of the matrix.
   - `a` is a 2D array of doubles to store the matrix elements.

2. **Function `determinant`:**
   ```cpp
   double determinant(int n) {
       double det = 1.0;
       for (int i = 0; i < n; i++) {
           int pivot = i;
           for (int j = i + 1; j < n; j++) {
               if (abs(a[j][i]) > abs(a[pivot][i])) {
                   pivot = j;
               }
           }
           if (pivot != i) {
               swap(a[i], a[pivot]);
               det *= -1;
           }
           if (a[i][i] == 0) {
               return 0;
           }
           det *= a[i][i];
           for (int j = i + 1; j < n; j++) {
               double factor = a[j][i] / a[i][i];
               for (int k = i + 1; k < n; k++) {
                   a[j][k] -= factor * a[i][k];
               }
           }
       }
       return det;
   }
   ```
   - **Initialization:** `det` is initialized to 1.0.
   - **Pivoting:** For each row `i`, find the row with the maximum absolute value in column `i` and swap it with row `i` if necessary. This helps in reducing numerical errors.
   - **Check for Zero Pivot:** If the pivot element is zero, the determinant is zero.
   - **Scale the Row:** Multiply the pivot row by its pivot element to make the pivot element 1.
   - **Eliminate Other Elements:** Subtract multiples of the pivot row from the other rows to make all elements below the pivot zero.
   - **Update Determinant:** Multiply the determinant by the pivot element.

3. **Main Function:**
   ```cpp
   int main() {
       int n = 4;
       double matrix[4][4] = {{1, 0, 2, -1},
                               {3, 0, 0, 5},
                               {2, 1, 4, -3},
                               {1, 0, 5, 0}};
       for (int i = 0; i < n; i++) {
           for (int j = 0; j < n; j++) {
               a[i][j] = matrix[i][j];
           }
       }
       double det = determinant(n);
       cout << "Determinant = " << det << endl;
       return 0;
   }
   ```
   - Define a 4x4 matrix and copy its values to the `a` array.
   - Call the `determinant` function to calculate the determinant.
   - Print the determinant.

### Equivalent SystemC Code

Here is the equivalent SystemC code that integrates with the provided signals:

```cpp
#include <systemc.h>

SC_MODULE(DeterminantCalculator) {
    sc_in<double> matrix[SIZE];  // Input port for the matrix
    sc_out<double> det;          // Output port for the determinant

    double a[SIZE][SIZE];
    int n;

    // Constructor
    SC_CTOR(DeterminantCalculator) {
        n = SIZE;  // Assuming SIZE is defined somewhere in the top-level module
        // Process to calculate the determinant
        SC_METHOD(calculate_determinant);
        sensitive << matrix;
    }

    // Method to calculate the determinant
    void calculate_determinant() {
        double det_val = 1.0;
        for (int i = 0; i < n; i++) {
            int pivot = i;
            for (int j = i + 1; j < n; j++) {
                if (fabs(matrix[j][i].read()) > fabs(matrix[pivot][i].read())) {
                    pivot = j;
                }
            }
            if (pivot != i) {
                for (int k = 0; k < n; k++) {
                    double temp = matrix[i][k].read();
                    matrix[i][k] = matrix[pivot][k].read();
                    matrix[pivot][k] = temp;
                }
                det_val *= -1;
            }
            if (matrix[i][i].read() == 0) {
                det.write(0);
                return;
            }
            det_val *= matrix[i][i].read();
            for (int j = i + 1; j < n; j++) {
                double factor = matrix[j][i].read() / matrix[i][i].read();
                for (int k = i + 1; k < n; k++) {
                    matrix[j][k] = matrix[j][k].read() - factor * matrix[i][k].read();
                }
            }
        }
        det.write(det_val);
    }
};
```

### Explanation of the SystemC Code

1. **Module Declaration:**
   - `DeterminantCalculator` is a SystemC module with an input array `matrix` and an output `det`.

2. **Matrix Storage:**
   - `a` is a 2D array to store the matrix elements.
   - `n` is the size of the matrix.

3. **Constructor:**
   - The constructor initializes `n` and sets up the `calculate_determinant` method to be sensitive to changes in the `matrix` input.

4. **Method `calculate_determinant`:**
   - **Initialization:** `det_val` is initialized to 1.0.
   - **Pivoting:** For each row `i`, find the row with the maximum absolute value in column `i` and swap it with row `i` if necessary.
   - **Check for Zero Pivot:** If the pivot element is zero, set the determinant to zero and return.
   - **Scale the Row:** Multiply the pivot row by its pivot element to make the pivot element 1.
   - **Eliminate Other Elements:** Subtract multiples of the pivot row from the other rows to make all elements below the pivot zero.
   - **Update Determinant:** Multiply the determinant by the pivot element.
   - **Write Result:** Write the calculated determinant to the `det` output port.

This SystemC code faithfully captures the logic of the original C++/C code and can be integrated into a high-level synthesis flow.