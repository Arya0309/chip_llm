### Analysis of the C++/C Code

#### Inputs and Outputs
- **Inputs**: The input to the program is an integer `n`, which specifies the number of terms in the Fibonacci sequence up to which the sum of even-indexed Fibonacci numbers should be calculated.
- **Outputs**: The output is an integer representing the sum of the even-indexed Fibonacci numbers up to `n` terms.

#### Detailed Explanation

1. **Header Inclusion and Namespace Declaration**
   ```cpp
   #include <bits/stdc++.h>
   using namespace std;
   ```
   - The `<bits/stdc++.h>` header includes all standard C++ libraries.
   - `using namespace std;` simplifies the code by allowing us to use standard library functions without the `std::` prefix.

2. **Function Declaration**
   ```cpp
   int calculateEvenSum(int n)
   ```
   - This function takes an integer `n` and returns the sum of even-indexed Fibonacci numbers up to `n` terms.

3. **Base Case Check**
   ```cpp
   if (n <= 0)
       return 0;
   ```
   - If `n` is less than or equal to 0, the function returns 0 because there are no terms to consider.

4. **Fibonacci Array Initialization**
   ```cpp
   int fibo[2 * n + 1];
   fibo[0] = 0, fibo[1] = 1;
   ```
   - An array `fibo` of size `2 * n + 1` is declared to store the Fibonacci numbers.
   - The first two Fibonacci numbers (`fibo[0]` and `fibo[1]`) are initialized to 0 and 1 respectively.

5. **Initialization of Sum Variable**
   ```cpp
   int sum = 0;
   ```
   - A variable `sum` is initialized to 0 to store the sum of even-indexed Fibonacci numbers.

6. **Loop to Calculate Fibonacci Numbers and Sum Even-Indexed Terms**
   ```cpp
   for (int i = 2; i <= 2 * n; i++) 
   {
       fibo[i] = fibo[i - 1] + fibo[i - 2];
       if (i % 2 == 0)
           sum += fibo[i];
   }
   ```
   - A loop runs from 2 to `2 * n` to calculate the Fibonacci numbers.
   - For each index `i`, the Fibonacci number `fibo[i]` is computed as the sum of the previous two Fibonacci numbers (`fibo[i - 1]` and `fibo[i - 2]`).
   - If the index `i` is even (`i % 2 == 0`), the corresponding Fibonacci number is added to `sum`.

7. **Return the Result**
   ```cpp
   return sum;
   ```
   - The function returns the calculated sum of even-indexed Fibonacci numbers.

8. **Main Function**
   ```cpp
   int main()
   {
       int n = 8;
       cout << "Even indexed Fibonacci Sum upto " << n << " terms: " << calculateEvenSum(n) << endl;
       return 0;
   }
   ```
   - The `main` function initializes `n` to 8 and calls the `calculateEvenSum` function to compute and print the sum of even-indexed Fibonacci numbers up to 8 terms.

### Equivalent SystemC Code

Below is the SystemC code that replicates the logic of the provided C++/C code. The SystemC code uses the provided signals `n` and `sum`.

```cpp
#include <systemc.h>

SC_MODULE(FibonacciEvenSum) {
    sc_in<int> n;  // Input port for the number of terms
    sc_out<int> sum; // Output port for the sum of even-indexed Fibonacci numbers

    // Constructor
    SC_CTOR(FibonacciEvenSum) {
        // Process to calculate the sum of even-indexed Fibonacci numbers
        SC_THREAD(calculateSum);
        sensitive << n;
    }

    // Thread to perform the calculation
    void calculateSum() {
        while (true) {
            int n_val = n.read();
            if (n_val <= 0) {
                sum.write(0);
                wait();
                continue;
            }

            int fibo[2 * n_val + 1];
            fibo[0] = 0, fibo[1] = 1;
            int sum_val = 0;

            for (int i = 2; i <= 2 * n_val; i++) {
                fibo[i] = fibo[i - 1] + fibo[i - 2];
                if (i % 2 == 0)
                    sum_val += fibo[i];
            }

            sum.write(sum_val);
            wait();
        }
    }
};
```

### Explanation of the SystemC Code

1. **Module Declaration**
   ```cpp
   SC_MODULE(FibonacciEvenSum) {
       sc_in<int> n;  // Input port for the number of terms
       sc_out<int> sum; // Output port for the sum of even-indexed Fibonacci numbers
   ```
   - A SystemC module named `FibonacciEvenSum` is declared with an input port `n` and an output port `sum`.

2. **Constructor**
   ```cpp
   SC_CTOR(FibonacciEvenSum) {
       SC_THREAD(calculateSum);
       sensitive << n;
   }
   ```
   - The constructor initializes a SystemC thread `calculateSum` that will handle the computation.
   - The thread is sensitive to changes in the `n` input port.

3. **Thread Declaration**
   ```cpp
   void calculateSum() {
       while (true) {
           int n_val = n.read();
           if (n_val <= 0) {
               sum.write(0);
               wait();
               continue;
           }

           int fibo[2 * n_val + 1];
           fibo[0] = 0, fibo[1] = 1;
           int sum_val = 0;

           for (int i = 2; i <= 2 * n_val; i++) {
               fibo[i] = fibo[i - 1] + fibo[i - 2];
               if (i % 2 == 0)
                   sum_val += fibo[i];
           }

           sum.write(sum_val);
           wait();
       }
   }
   ```
   - The `calculateSum` thread reads the value of `n`.
   - If `n` is less than or equal to 0, it writes 0 to the `sum` port and waits for the next input.
   - Otherwise, it calculates the Fibonacci numbers and sums the even-indexed terms as described in the C++/C code.
   - The calculated sum is written to the `sum` port and the thread waits for the next input.

This SystemC code faithfully captures the logic of the original C++/C program and can be integrated with the provided testbench signals.