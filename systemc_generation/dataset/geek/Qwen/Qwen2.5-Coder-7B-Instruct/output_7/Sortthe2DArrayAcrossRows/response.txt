### Inputs and Outputs

**Inputs**:
- `m`: A 2D integer array representing the matrix to be sorted.
- `r`: The number of rows in the matrix.
- `c`: The number of columns in the matrix.

**Outputs**:
- The sorted matrix printed to the console.

### Detailed Explanation

#### Line-by-Line Explanation

1. **Include Header Files**
   ```cpp
   #include<bits/stdc++.h>
   using namespace std;
   ```
   - Include standard C++ library and use the standard namespace.

2. **Swap Function**
   ```cpp
   void swap(int *xp, int *yp) 
   { 
       int temp = *xp; 
       *xp = *yp; 
       *yp = temp; 
   } 
   ```
   - Define a function to swap two integers.

3. **Sort Row-Wise Function**
   ```cpp
   void sortRowWise(int m[][4], int r, int c)
   ```
   - Define a function to sort each row of the matrix.

4. **Outer Loop for Rows**
   ```cpp
   for (int i = 0; i < r; i++) 
   ```
   - Loop through each row of the matrix.

5. **Inner Loop for Columns**
   ```cpp
   for (int j = 0; j < c; j++) 
   ```
   - Loop through each column of the matrix.

6. **Comparison and Swapping Loop**
   ```cpp
   for (int k = 0; k < c - j - 1; k++) 
   ```
   - Loop to compare and swap elements in the current row.

7. **Condition for Swapping**
   ```cpp
   if (m[i][k] > m[i][k + 1]) 
   ```
   - Check if the current element is greater than the next element.

8. **Swap Elements**
   ```cpp
   swap(m[i][k], m[i][k + 1]);
   ```
   - Swap the elements if the condition is met.

9. **Printing the Sorted Matrix**
   ```cpp
   for (int i = 0; i < r; i++) 
   {
       for (int j = 0; j < c; j++)
       cout << m[i][j] << " ";
       cout << endl;
   }
   ```
   - Print each element of the sorted matrix.

10. **Driver Code**
    ```cpp
    int main()
    {
        int m[][4] = {{9, 8, 7, 1},
                      {7, 3, 0, 2},
                      {9, 5, 3, 2},
                      {6, 3, 1, 2}};
        int c = sizeof(m[0]) / sizeof(m[0][0]);
        int r = sizeof(m) / sizeof(m[0]);
        sortRowWise(m, r, c);
        return 0;
    }
    ```
    - Initialize a 2D matrix and call the `sortRowWise` function.

### SystemC Code

```cpp
#include <systemc.h>

SC_MODULE(MatrixSorter) {
    sc_in<bool> clk;  // Clock signal
    sc_in<bool> start;  // Start signal
    sc_out<bool> done;  // Done signal

    int m[4][4];  // Matrix to store the input
    int r = 4;  // Number of rows
    int c = 4;  // Number of columns

    // Constructor
    SC_CTOR(MatrixSorter) {
        // Process to handle sorting
        SC_METHOD(sortMatrix);
        sensitive << clk.pos();
        dont_initialize();
    }

    // Method to sort the matrix
    void sortMatrix() {
        if (start.read()) {
            for (int i = 0; i < r; i++) {
                for (int k = 0; k < c - 1; k++) {
                    for (int j = 0; j < c - k - 1; j++) {
                        if (m[i][j] > m[i][j + 1]) {
                            int temp = m[i][j];
                            m[i][j] = m[i][j + 1];
                            m[i][j + 1] = temp;
                        }
                    }
                }
            }
            done.write(true);
        } else {
            done.write(false);
        }
    }
};
```

### Explanation of SystemC Code

- **Module Declaration**: The `MatrixSorter` module is declared with `clk`, `start`, and `done` signals.
- **Matrix Storage**: The matrix `m` is stored within the module.
- **Constructor**: The constructor sets up a method `sortMatrix` to be sensitive to positive edges of the clock (`clk.pos()`).
- **Sorting Logic**: The `sortMatrix` method sorts the matrix row-wise when the `start` signal is high. It uses nested loops similar to the original C++ code.
- **Done Signal**: The `done` signal is set to true once sorting is complete, otherwise, it remains false.