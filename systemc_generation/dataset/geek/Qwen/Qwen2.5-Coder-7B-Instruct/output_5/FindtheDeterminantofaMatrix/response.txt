### Inputs and Outputs

**Inputs**:
- A 2D array `matrix` of doubles representing the square matrix for which the determinant is to be calculated.
- An integer `n` representing the size of the square matrix.

**Outputs**:
- A double `det` representing the determinant of the input matrix.

### Detailed Explanation

#### Line-by-Line Analysis

1. **Include Headers**
   ```cpp
   #include <iostream>
   #include <cmath>
   ```
   - Includes the necessary headers for input/output operations and mathematical functions.

2. **Namespace Declaration**
   ```cpp
   using namespace std;
   ```
   - Uses the standard namespace to avoid prefixing standard library functions with `std::`.

3. **Constant Definition**
   ```cpp
   const int MAXN = 105;
   ```
   - Defines a constant `MAXN` to represent the maximum size of the matrix.

4. **Global Array Declaration**
   ```cpp
   double a[MAXN][MAXN];
   ```
   - Declares a global 2D array `a` to store the matrix elements.

5. **Function: determinant**
   ```cpp
   double determinant(int n) {
       double det = 1.0;
       for (int i = 0; i < n; i++) {
           int pivot = i;
           for (int j = i + 1; j < n; j++) {
               if (abs(a[j][i]) > abs(a[pivot][i])) {
                   pivot = j;
               }
           }
           if (pivot != i) {
               swap(a[i], a[pivot]);
               det *= -1;
           }
           if (a[i][i] == 0) {
               return 0;
           }
           det *= a[i][i];
           for (int j = i + 1; j < n; j++) {
               double factor = a[j][i] / a[i][i];
               for (int k = i + 1; k < n; k++) {
                   a[j][k] -= factor * a[i][k];
               }
           }
       }
       return det;
   }
   ```
   - **Parameters**:
     - `int n`: Size of the matrix.
   - **Variables**:
     - `double det = 1.0`: Initializes the determinant to 1.0.
   - **Process**:
     - **Pivoting**: Finds the pivot row with the largest absolute value in the current column.
     - **Swapping Rows**: Swaps rows to bring the pivot to the current position.
     - **Scaling Factor**: Calculates the scaling factor to eliminate the current element below the pivot.
     - **Row Reduction**: Reduces the rows below the pivot to zero in the current column.
     - **Determinant Calculation**: Multiplies the determinant by the pivot element.

6. **Main Function**
   ```cpp
   int main() {
       int n = 4;
       double matrix[4][4] = {{1, 0, 2, -1},
                               {3, 0, 0, 5},
                               {2, 1, 4, -3},
                               {1, 0, 5, 0}};
       for (int i = 0; i < n; i++) {
           for (int j = 0; j < n; j++) {
               a[i][j] = matrix[i][j];
           }
       }
       double det = determinant(n);
       cout << "Determinant = " << det << endl;
       return 0;
   }
   ```
   - **Variables**:
     - `int n = 4`: Size of the matrix.
     - `double matrix[4][4]`: Input matrix.
   - **Process**:
     - Copies the input matrix into the global array `a`.
     - Calls the `determinant` function to compute the determinant.
     - Prints the determinant.

### SystemC Code

```cpp
#include <systemc.h>

SC_MODULE(DeterminantCalculator) {
    sc_in<double> matrix[SIZE]; // Input port for the matrix elements
    sc_out<double> det; // Output port for the determinant

    SC_CTOR(DeterminantCalculator) {
        SC_METHOD(calculate_determinant);
        sensitive << matrix;
    }

    void calculate_determinant() {
        double a[SIZE][SIZE];
        double det = 1.0;

        // Copy matrix elements from input ports to local array
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                a[i][j] = matrix[i][j].read();
            }
        }

        for (int i = 0; i < SIZE; i++) {
            int pivot = i;
            for (int j = i + 1; j < SIZE; j++) {
                if (fabs(a[j][i]) > fabs(a[pivot][i])) {
                    pivot = j;
                }
            }
            if (pivot != i) {
                swap(a[i], a[pivot]);
                det *= -1;
            }
            if (a[i][i] == 0) {
                det = 0;
                break;
            }
            det *= a[i][i];
            for (int j = i + 1; j < SIZE; j++) {
                double factor = a[j][i] / a[i][i];
                for (int k = i + 1; k < SIZE; k++) {
                    a[j][k] -= factor * a[i][k];
                }
            }
        }

        det.write(det);
    }
};
```

### Explanation of SystemC Code

- **Module Declaration**:
  - `DeterminantCalculator` is a SystemC module that calculates the determinant of a matrix.

- **Input and Output Ports**:
  - `matrix[SIZE]`: An array of `sc_in<double>` ports to receive the matrix elements.
  - `det`: An `sc_out<double>` port to output the determinant.

- **Constructor**:
  - Registers the `calculate_determinant` method to be called whenever any of the input ports change (`sensitive << matrix`).

- **Method: calculate_determinant**:
  - **Copying Matrix Elements**:
    - Copies the matrix elements from the input ports to a local array `a`.
  - **Determinant Calculation**:
    - Implements the same logic as the original C++ code to compute the determinant.
  - **Output**:
    - Writes the computed determinant to the `det` output port.

This SystemC code snippet faithfully captures the logic of the original C++ code and can be integrated into a high-level synthesis flow.