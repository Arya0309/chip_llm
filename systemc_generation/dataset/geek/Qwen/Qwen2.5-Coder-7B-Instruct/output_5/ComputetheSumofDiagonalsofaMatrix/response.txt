### C++/C Code Analysis

#### Inputs and Outputs
- **Inputs**: 
  - `matrix`: A 2D array of integers representing the square matrix.
  - `SIZE`: The size of the square matrix (assumed to be a constant).
- **Outputs**:
  - `principal`: The sum of the elements on the principal diagonal.
  - `secondary`: The sum of the elements on the secondary diagonal.

#### Detailed Explanation
1. **Constants and Declarations**:
   ```cpp
   const int MAX = 100; 
   ```
   - `MAX` is defined as 100, which represents the maximum size of the matrix.

2. **Function Declaration**:
   ```cpp
   void printDiagonalSums(int mat[][MAX], int n)
   ```
   - `printDiagonalSums` is a function that takes a 2D array `mat` and its size `n` as inputs.

3. **Initialization of Sums**:
   ```cpp
   int principal = 0, secondary = 0;
   ```
   - `principal` and `secondary` are initialized to store the sums of the principal and secondary diagonals, respectively.

4. **Nested Loops to Calculate Diagonal Sums**:
   ```cpp
   for (int i = 0; i < n; i++) {
       for (int j = 0; j < n; j++) {
           if (i == j) 
               principal += mat[i][j]; 
           if ((i + j) == (n - 1)) 
               secondary += mat[i][j]; 
       }
   }
   ```
   - Two nested loops iterate over each element of the matrix.
   - If the current element is on the principal diagonal (`i == j`), it is added to `principal`.
   - If the current element is on the secondary diagonal (`i + j == n - 1`), it is added to `secondary`.

5. **Output the Results**:
   ```cpp
   cout << "Principal Diagonal:" << principal << endl; 
   cout << "Secondary Diagonal:" << secondary << endl; 
   ```
   - The sums of the principal and secondary diagonals are printed.

6. **Main Function**:
   ```cpp
   int main() {
       int a[][MAX] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {1, 2, 3, 4}, {5, 6, 7, 8}};
       printDiagonalSums(a, 4);
       return 0;
   }
   ```
   - A sample matrix `a` is defined and passed to the `printDiagonalSums` function.

### Equivalent SystemC Code

```cpp
#include <systemc.h>

SC_MODULE(DiagonalSumCalculator) {
    sc_in<int> matrix[MAX][MAX];  // Input port for the matrix
    sc_out<int> principal;         // Output port for the principal diagonal sum
    sc_out<int> secondary;         // Output port for the secondary diagonal sum

    // Constructor
    SC_CTOR(DiagonalSumCalculator) {
        // Process to calculate diagonal sums
        SC_METHOD(calculate_diagonals);
        sensitive << matrix;
    }

    // Method to calculate the sums of the diagonals
    void calculate_diagonals() {
        int n = sizeof(matrix) / sizeof(matrix[0]);  // Assuming the matrix is square
        int principal_sum = 0, secondary_sum = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j) 
                    principal_sum += matrix[i][j]; 
                if ((i + j) == (n - 1)) 
                    secondary_sum += matrix[i][j]; 
            }
        }

        principal.write(principal_sum);
        secondary.write(secondary_sum);
    }
};
```

### Explanation of SystemC Code
- **Inputs**:
  - `matrix`: A 2D array of integers representing the square matrix.
- **Outputs**:
  - `principal`: The sum of the elements on the principal diagonal.
  - `secondary`: The sum of the elements on the secondary diagonal.
- **Logic**:
  - The `calculate_diagonals` method iterates over each element of the matrix.
  - If the current element is on the principal diagonal (`i == j`), it is added to `principal_sum`.
  - If the current element is on the secondary diagonal (`i + j == n - 1`), it is added to `secondary_sum`.
  - The sums are then written to the respective output ports.

This SystemC code captures the same logic as the original C++/C code and can be integrated with the provided signals for testing.