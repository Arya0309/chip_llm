### Input and Output Summary

**Inputs**:
- `nums`: An integer array to be sorted.
- `size_nums`: The size of the integer array.

**Outputs**:
- The sorted integer array.

### Detailed Explanation

1. **Initialization**:
   - The array `nums` is initialized with the values `{1, 12, 6, 8, 10}`.
   - The size of the array `size_nums` is calculated as `(sizeof(nums) / sizeof(nums[0]))`.

2. **Displaying the Unsorted Array**:
   - A loop iterates through the array `nums` and prints each element.
   - Output: `Before sorting the array is: 1 12 6 8 10`.

3. **Sorting the Array**:
   - The `sort` function is called with `nums` and `size_nums`.
   - Inside the `sort` function:
     - A nested loop runs `len` times (where `len` is the size of the array).
     - For each iteration, a boolean flag `isSwapped` is set to `false`.
     - Another inner loop runs from `1` to `len - i`, comparing adjacent elements.
     - If the current element is smaller than the previous element, they are swapped using the `swapNums` function, and `isSwapped` is set to `true`.
     - If no swaps are made in a complete pass (`isSwapped` remains `false`), the sorting process breaks early.

4. **Displaying the Sorted Array**:
   - After sorting, another loop iterates through the array `nums` and prints each element.
   - Output: `After sorting the array is: 1 6 8 10 12`.

5. **Swap Function**:
   - The `swapNums` function takes three parameters: `nums`, `first`, and `second`.
   - It swaps the elements at indices `first` and `second` in the array `nums`.

### Equivalent SystemC Code

```cpp
#include <systemc.h>

SC_MODULE(Sorter) {
    sc_in<bool> clk;  // Clock signal
    sc_in<bool> start;  // Start signal
    sc_out<bool> done;  // Done signal
    sc_inout<int> nums[5];  // Input/output array

    // Constructor
    SC_CTOR(Sorter) {
        // Process to handle sorting
        SC_METHOD(sort_array);
        sensitive << clk.pos();
        dont_initialize();

        // Process to handle start and done signals
        SC_METHOD(start_done);
        sensitive << start;
        dont_initialize();
    }

    // Method to sort the array
    void sort_array() {
        while (true) {
            wait(clk.pos());

            bool isSwapped;
            for (int i = 0; i < 5; i++) {
                isSwapped = false;
                for (int j = 1; j < 5 - i; j++) {
                    if (nums[j].read() < nums[j - 1].read()) {
                        int curr = nums[j].read();
                        nums[j].write(nums[j - 1].read());
                        nums[j - 1].write(curr);
                        isSwapped = true;
                    }
                }
                if (!isSwapped) {
                    break;
                }
            }

            done.write(true);
        }
    }

    // Method to handle start and done signals
    void start_done() {
        while (true) {
            wait(start.pos());
            done.write(false);
        }
    }
};
```

### Explanation of SystemC Code

1. **Module Declaration**:
   - The `Sorter` module is declared with input/output ports and signals.

2. **Clock and Start Signal Handling**:
   - The `sort_array` method is sensitive to the positive edge of the clock signal.
   - The `start_done` method is sensitive to the start signal.

3. **Sorting Logic**:
   - Inside `sort_array`, the sorting logic is implemented using nested loops.
   - The `isSwapped` flag helps in breaking out of the loop early if no more swaps are needed.

4. **Start and Done Signals**:
   - The `start_done` method sets the `done` signal to `false` when the start signal is received.

This SystemC code faithfully captures the logic of the original C++/C code and can be integrated into a high-level synthesis flow.