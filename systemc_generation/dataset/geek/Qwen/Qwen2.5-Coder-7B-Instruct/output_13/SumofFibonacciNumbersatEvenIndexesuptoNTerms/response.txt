### Input and Output Summary

**Inputs**:
- `n`: An integer representing the number of terms in the Fibonacci sequence up to which the sum of even-indexed Fibonacci numbers is calculated.

**Outputs**:
- The sum of the even-indexed Fibonacci numbers up to `n` terms.

### Detailed Line-by-Line Explanation

1. **Header File and Namespace Declaration**:
   ```cpp
   #include <bits/stdc++.h>
   using namespace std;
   ```
   - This includes the standard library and uses the standard namespace for simplicity.

2. **Function Declaration**:
   ```cpp
   int calculateEvenSum(int n)
   ```
   - Declares a function `calculateEvenSum` that takes an integer `n` and returns an integer.

3. **Initial Checks**:
   ```cpp
   if (n <= 0)
       return 0;
   ```
   - If `n` is less than or equal to zero, the function returns 0 immediately.

4. **Fibonacci Array Initialization**:
   ```cpp
   int fibo[2 * n + 1];
   fibo[0] = 0, fibo[1] = 1;
   ```
   - Initializes an array `fibo` to store Fibonacci numbers up to `2*n`. The first two Fibonacci numbers are set to 0 and 1.

5. **Variable Initialization**:
   ```cpp
   int sum = 0;
   ```
   - Initializes a variable `sum` to store the sum of even-indexed Fibonacci numbers.

6. **Loop to Calculate Fibonacci Numbers and Sum Even-Indexed Terms**:
   ```cpp
   for (int i = 2; i <= 2 * n; i++) 
   {
       fibo[i] = fibo[i - 1] + fibo[i - 2];
       if (i % 2 == 0)
           sum += fibo[i];
   }
   ```
   - Iterates from 2 to `2*n`, calculates each Fibonacci number, and adds it to `sum` if the index `i` is even.

7. **Return the Result**:
   ```cpp
   return sum;
   ```
   - Returns the computed sum of even-indexed Fibonacci numbers.

8. **Main Function**:
   ```cpp
   int main()
   {
       int n = 8;
       cout << "Even indexed Fibonacci Sum upto " << n << " terms: " << calculateEvenSum(n) << endl;
       return 0;
   }
   ```
   - Sets `n` to 8 and prints the sum of even-indexed Fibonacci numbers up to 8 terms.

### Equivalent SystemC Code

```cpp
#include <systemc.h>

SC_MODULE(EvenFibonacciSum) {
    sc_in<int> n;  // Input port for the number of terms
    sc_out<int> sum; // Output port for the sum

    SC_CTOR(EvenFibonacciSum) {
        SC_METHOD(calculate_even_sum);
        sensitive << n;
    }

    void calculate_even_sum() {
        int n_val = n.read();
        if (n_val <= 0) {
            sum.write(0);
            return;
        }

        int fibo[2 * n_val + 1];
        fibo[0] = 0, fibo[1] = 1;
        int sum_val = 0;

        for (int i = 2; i <= 2 * n_val; i++) {
            fibo[i] = fibo[i - 1] + fibo[i - 2];
            if (i % 2 == 0) {
                sum_val += fibo[i];
            }
        }

        sum.write(sum_val);
    }
};
```

### Explanation of the SystemC Code

- **Module Declaration**:
  - `SC_MODULE(EvenFibonacciSum)` declares a SystemC module named `EvenFibonacciSum`.
  
- **Input and Output Ports**:
  - `sc_in<int> n;` and `sc_out<int> sum;` define the input and output ports for the module.

- **Constructor**:
  - `SC_CTOR(EvenFibonacciSum)` initializes the module and binds the method `calculate_even_sum` to the `n` port.

- **Method to Calculate Even-Indexed Fibonacci Sum**:
  - `void calculate_even_sum()` reads the value of `n` and performs the same logic as the original C++ function.
  - It initializes the Fibonacci array, calculates the sum of even-indexed Fibonacci numbers, and writes the result to the `sum` port.

This SystemC code faithfully captures the logic of the original C++ program and can be integrated into a high-level synthesis flow.