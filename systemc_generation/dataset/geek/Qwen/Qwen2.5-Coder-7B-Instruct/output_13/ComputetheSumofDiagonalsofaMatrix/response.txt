### Input and Output Analysis

**Inputs:**
- `matrix`: A 2D array of integers representing the square matrix whose diagonals' sums need to be calculated. The size of the matrix is determined by the constant `SIZE`.

**Outputs:**
- `principal`: The sum of the elements on the principal diagonal (from top-left to bottom-right).
- `secondary`: The sum of the elements on the secondary diagonal (from top-right to bottom-left).

### Detailed Explanation of the Code

#### Line-by-Line Explanation

1. **Header Files and Namespace Declaration**
   ```cpp
   #include <bits/stdc++.h> 
   using namespace std; 
   ```
   - This includes the standard library and uses the standard namespace for convenience.

2. **Constant Definition**
   ```cpp
   const int MAX = 100; 
   ```
   - Defines a constant `MAX` which limits the size of the matrix to 100x100.

3. **Function Declaration**
   ```cpp
   void printDiagonalSums(int mat[][MAX], int n) 
   ```
   - Declares a function `printDiagonalSums` that takes a 2D array `mat` and an integer `n` as parameters.

4. **Variable Initialization**
   ```cpp
   int principal = 0, secondary = 0; 
   ```
   - Initializes two variables `principal` and `secondary` to store the sums of the principal and secondary diagonals, respectively.

5. **Nested Loop to Calculate Diagonals**
   ```cpp
   for (int i = 0; i < n; i++) 
   { 
       for (int j = 0; j < n; j++)	 
       { 
           // Condition for principal diagonal 
           if (i == j) 
               principal += mat[i][j]; 

           // Condition for secondary diagonal 
           if ((i + j) == (n - 1)) 
               secondary += mat[i][j]; 
       } 
   } 
   ```
   - Iterates through each element of the matrix.
   - If the element is on the principal diagonal (`i == j`), it adds the element to `principal`.
   - If the element is on the secondary diagonal (`i + j == n - 1`), it adds the element to `secondary`.

6. **Output the Diagonal Sums**
   ```cpp
   cout << "Principal Diagonal:" << principal << endl; 
   cout << "Secondary Diagonal:" << secondary << endl; 
   ```
   - Prints the sums of the principal and secondary diagonals.

7. **Main Function**
   ```cpp
   int main() 
   { 
       int a[][MAX] = {{1, 2, 3, 4}, 
                       {5, 6, 7, 8}, 
                       {1, 2, 3, 4}, 
                       {5, 6, 7, 8}}; 
       printDiagonalSums(a, 4); 
       return 0; 
   } 
   ```
   - Defines a 4x4 matrix `a` and calls the `printDiagonalSums` function with this matrix.

### Equivalent SystemC Code

To convert the given C++ code into SystemC, we need to define a module that takes a 2D array as input and outputs the sums of the principal and secondary diagonals. We will use the provided signals `matrix`, `principal`, and `secondary`.

```cpp
#include <systemc.h>

SC_MODULE(DiagonalSumCalculator) {
    sc_in<sc_vector<sc_vector<int>> > matrix;  // Input port for the matrix
    sc_out<int> principal;  // Output port for the principal diagonal sum
    sc_out<int> secondary;  // Output port for the secondary diagonal sum

    // Constructor
    SC_CTOR(DiagonalSumCalculator) {
        // Process to calculate diagonal sums
        SC_THREAD(calculateDiagonals);
        sensitive << matrix;
    }

    // Method to calculate the diagonal sums
    void calculateDiagonals() {
        int n = matrix.size();
        int principal_sum = 0, secondary_sum = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j)
                    principal_sum += matrix[i][j];
                if ((i + j) == (n - 1))
                    secondary_sum += matrix[i][j];
            }
        }

        principal.write(principal_sum);
        secondary.write(secondary_sum);
    }
};
```

### Explanation of the SystemC Code

- **Module Declaration**: `DiagonalSumCalculator` is declared as a SystemC module.
- **Input and Output Ports**: `matrix` is an input port that receives a 2D vector of integers. `principal` and `secondary` are output ports that provide the sums of the principal and secondary diagonals.
- **Constructor**: The constructor initializes a SystemC thread `calculateDiagonals` that will run whenever the `matrix` input changes.
- **Thread Method**: `calculateDiagonals` calculates the sums of the diagonals using nested loops similar to the C++ code. It then writes the results to the `principal` and `secondary` output ports.

This SystemC code should be able to integrate seamlessly with the provided testbench and calculate the diagonal sums of a given matrix.