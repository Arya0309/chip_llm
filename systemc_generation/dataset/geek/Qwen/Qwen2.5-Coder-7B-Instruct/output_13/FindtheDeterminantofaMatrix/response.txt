### Input and Output Analysis

**Inputs:**
- A square matrix of size `n` x `n`, represented as a 2D array `matrix`.

**Outputs:**
- The determinant of the input matrix.

### Detailed Line-by-Line Explanation

1. **Header Files and Namespace Declaration**
   ```cpp
   #include <iostream>
   #include <cmath>

   using namespace std;
   ```
   - Includes the necessary headers for input/output operations and mathematical functions.
   - Declares the standard namespace to simplify function calls.

2. **Constants and Array Declaration**
   ```cpp
   const int MAXN = 105;
   double a[MAXN][MAXN];
   ```
   - Defines a constant `MAXN` to represent the maximum size of the matrix.
   - Declares a 2D array `a` to store the matrix elements.

3. **Function to Calculate Determinant**
   ```cpp
   double determinant(int n) {
       double det = 1.0;
       for (int i = 0; i < n; i++) {
           int pivot = i;
           for (int j = i + 1; j < n; j++) {
               if (abs(a[j][i]) > abs(a[pivot][i])) {
                   pivot = j;
               }
           }
           if (pivot != i) {
               swap(a[i], a[pivot]);
               det *= -1;
           }
           if (a[i][i] == 0) {
               return 0;
           }
           det *= a[i][i];
           for (int j = i + 1; j < n; j++) {
               double factor = a[j][i] / a[i][i];
               for (int k = i + 1; k < n; k++) {
                   a[j][k] -= factor * a[i][k];
               }
           }
       }
       return det;
   }
   ```
   - **Parameters:** `n` (size of the matrix)
   - **Returns:** The determinant of the matrix.
   - **Logic:**
     - Initializes `det` to 1.0.
     - Iterates over each row `i` to find the pivot element.
     - Swaps rows to ensure the pivot is the largest absolute value in the column.
     - Checks if the pivot is zero; if so, the determinant is zero.
     - Multiplies the determinant by the pivot element.
     - Uses Gaussian elimination to transform the matrix into upper triangular form, updating the determinant accordingly.

4. **Main Function**
   ```cpp
   int main() {
       int n = 4;
       double matrix[4][4] = {{1, 0, 2, -1},
                               {3, 0, 0, 5},
                               {2, 1, 4, -3},
                               {1, 0, 5, 0}};
       for (int i = 0; i < n; i++) {
           for (int j = 0; j < n; j++) {
               a[i][j] = matrix[i][j];
           }
       }
       double det = determinant(n);
       cout << "Determinant = " << det << endl;
       return 0;
   }
   ```
   - **Parameters:** None
   - **Returns:** 0 (indicating successful execution)
   - **Logic:**
     - Initializes the matrix `matrix` with given values.
     - Copies the matrix values into the global array `a`.
     - Calls the `determinant` function to calculate the determinant.
     - Prints the determinant to the console.

### Equivalent SystemC Code

```cpp
#include <systemc.h>

SC_MODULE(DeterminantCalculator) {
    sc_in<double> matrix[SIZE]; // Input port for the matrix
    sc_out<double> det;         // Output port for the determinant

    SC_CTOR(DeterminantCalculator) {
        SC_METHOD(calculate_determinant);
        sensitive << matrix;
    }

    void calculate_determinant() {
        double a[SIZE][SIZE];
        double det = 1.0;

        // Copy input matrix to local array
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                a[i][j] = matrix[i][j].read();
            }
        }

        // Calculate determinant using Gaussian elimination
        for (int i = 0; i < SIZE; i++) {
            int pivot = i;
            for (int j = i + 1; j < SIZE; j++) {
                if (fabs(a[j][i]) > fabs(a[pivot][i])) {
                    pivot = j;
                }
            }
            if (pivot != i) {
                for (int k = 0; k < SIZE; k++) {
                    swap(a[i][k], a[pivot][k]);
                }
                det *= -1;
            }
            if (a[i][i] == 0) {
                det = 0;
                break;
            }
            det *= a[i][i];
            for (int j = i + 1; j < SIZE; j++) {
                double factor = a[j][i] / a[i][i];
                for (int k = i + 1; k < SIZE; k++) {
                    a[j][k] -= factor * a[i][k];
                }
            }
        }

        // Write determinant to output port
        det.write(det);
    }
};
```

### Explanation of SystemC Code

- **Module Declaration:**
  - `DeterminantCalculator` module with input `matrix` and output `det`.
  
- **Constructor:**
  - Sets up the method `calculate_determinant` to be sensitive to changes in the `matrix` input.

- **Method:**
  - **Copying Input Matrix:**
    - Reads the input matrix values into a local array `a`.
  - **Gaussian Elimination:**
    - Implements the same logic as the original C++ code to calculate the determinant using Gaussian elimination.
  - **Output:**
    - Writes the calculated determinant to the `det` output port.

This SystemC code faithfully captures the logic of the original C++/C source code and can be integrated into a high-level synthesis flow.