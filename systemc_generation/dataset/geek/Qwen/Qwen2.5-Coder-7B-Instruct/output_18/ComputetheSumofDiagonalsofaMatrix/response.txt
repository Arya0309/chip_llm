### C++/C Code Analysis

**Inputs:**
- `mat`: A 2D array of integers representing the matrix.
- `n`: An integer representing the size of the matrix (number of rows and columns).

**Outputs:**
- The function does not return any value directly. Instead, it prints the sums of the principal and secondary diagonals of the matrix to the console.

**Detailed Explanation:**

1. **Constants and Function Declaration:**
   ```cpp
   const int MAX = 100; 
   void printDiagonalSums(int mat[][MAX], int n) 
   ```
   - `MAX` is a constant set to 100, which limits the size of the matrix.
   - `printDiagonalSums` is a function that takes a 2D array `mat` and an integer `n` as parameters.

2. **Variable Declarations:**
   ```cpp
   int principal = 0, secondary = 0; 
   ```
   - `principal` and `secondary` are initialized to 0. These variables will store the sums of the principal and secondary diagonals, respectively.

3. **Nested Loops to Calculate Diagonal Sums:**
   ```cpp
   for (int i = 0; i < n; i++) 
   { 
       for (int j = 0; j < n; j++)	 
       { 
           if (i == j) 
               principal += mat[i][j]; 

           if ((i + j) == (n - 1)) 
               secondary += mat[i][j]; 
       } 
   } 
   ```
   - The outer loop iterates over each row of the matrix.
   - The inner loop iterates over each column of the matrix.
   - If the current element is on the principal diagonal (`i == j`), it is added to `principal`.
   - If the current element is on the secondary diagonal (`(i + j) == (n - 1)`), it is added to `secondary`.

4. **Output the Results:**
   ```cpp
   cout << "Principal Diagonal:" << 
         principal << endl; 
   cout << "Secondary Diagonal:" << 
         secondary << endl; 
   ```
   - The sums of the principal and secondary diagonals are printed to the console.

5. **Main Function:**
   ```cpp
   int main() 
   { 
       int a[][MAX] = {{1, 2, 3, 4}, 
                       {5, 6, 7, 8}, 
                       {1, 2, 3, 4}, 
                       {5, 6, 7, 8}}; 
       printDiagonalSums(a, 4); 
       return 0; 
   } 
   ```
   - A sample matrix `a` is defined.
   - The `printDiagonalSums` function is called with the matrix and its size.

### SystemC Code Snippet

```cpp
#include <systemc.h>

SC_MODULE(DiagonalSumCalculator) {
    sc_in<int> matrix[MAX][MAX];  // Input port for the matrix
    sc_out<int> principal;      // Output port for the sum of the principal diagonal
    sc_out<int> secondary;      // Output port for the sum of the secondary diagonal

    // Constructor
    SC_CTOR(DiagonalSumCalculator) {
        // Process to calculate diagonal sums
        SC_METHOD(calculate_diagonals);
        sensitive << matrix;
    }

    // Method to calculate the sums of the diagonals
    void calculate_diagonals() {
        int principal_sum = 0, secondary_sum = 0;
        for (int i = 0; i < MAX; i++) {
            for (int j = 0; j < MAX; j++) {
                if (i == j)
                    principal_sum += matrix[i][j];

                if ((i + j) == (MAX - 1))
                    secondary_sum += matrix[i][j];
            }
        }
        principal.write(principal_sum);
        secondary.write(secondary_sum);
    }
};
```

### Explanation of SystemC Code:

1. **Module Declaration:**
   ```cpp
   SC_MODULE(DiagonalSumCalculator) {
   ```
   - A SystemC module named `DiagonalSumCalculator` is declared.

2. **Input and Output Ports:**
   ```cpp
   sc_in<int> matrix[MAX][MAX];
   sc_out<int> principal;
   sc_out<int> secondary;
   ```
   - `matrix` is a 2D input port for the matrix.
   - `principal` and `secondary` are output ports for the sums of the principal and secondary diagonals, respectively.

3. **Constructor:**
   ```cpp
   SC_CTOR(DiagonalSumCalculator) {
       SC_METHOD(calculate_diagonals);
       sensitive << matrix;
   }
   ```
   - The constructor initializes the module and specifies that the `calculate_diagonals` method should be called whenever the `matrix` changes.

4. **Method to Calculate Diagonal Sums:**
   ```cpp
   void calculate_diagonals() {
       int principal_sum = 0, secondary_sum = 0;
       for (int i = 0; i < MAX; i++) {
           for (int j = 0; j < MAX; j++) {
               if (i == j)
                   principal_sum += matrix[i][j];

               if ((i + j) == (MAX - 1))
                   secondary_sum += matrix[i][j];
           }
       }
       principal.write(principal_sum);
       secondary.write(secondary_sum);
   }
   ```
   - This method calculates the sums of the principal and secondary diagonals using nested loops.
   - The results are written to the `principal` and `secondary` output ports.

This SystemC code faithfully captures the logic of the original C++/C source and can be integrated into a high-level synthesis flow.