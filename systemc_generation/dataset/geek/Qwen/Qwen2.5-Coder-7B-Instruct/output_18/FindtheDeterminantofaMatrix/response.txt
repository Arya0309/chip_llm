### Input and Output Summary

**Inputs:**
1. `matrix`: A 2D array of doubles representing the matrix whose determinant is to be calculated. The size of the matrix is determined by the variable `n`.

**Outputs:**
1. `det`: A double representing the determinant of the input matrix.

### Detailed Explanation

The provided C++ code calculates the determinant of a square matrix using Gaussian elimination with partial pivoting. Here's a detailed breakdown of each part of the code:

1. **Global Declarations:**
   ```cpp
   const int MAXN = 105;
   double a[MAXN][MAXN];
   ```
   - `MAXN` is a constant set to 105, which defines the maximum size of the matrix.
   - `a` is a 2D array of doubles used to store the matrix.

2. **Function: `determinant(int n)`**
   - This function takes an integer `n` as input, which represents the size of the matrix.
   - It initializes `det` to 1.0, which will store the determinant of the matrix.
   - It iterates over each row `i` of the matrix.
     - For each row `i`, it finds the row `pivot` with the maximum absolute value in column `i`.
     - If `pivot` is not equal to `i`, it swaps rows `i` and `pivot` and multiplies `det` by -1 to account for the row swap.
     - If the element at `a[i][i]` is 0, the determinant is 0, and the function returns 0.
     - Otherwise, it multiplies `det` by `a[i][i]`.
     - It then performs forward elimination to zero out the elements below the diagonal in column `i`.
   - Finally, it returns the determinant `det`.

3. **Main Function:**
   - The main function initializes a 4x4 matrix and stores it in the array `a`.
   - It calls the `determinant` function with `n = 4` and prints the result.

### SystemC Code Snippet

Here is the equivalent SystemC code that integrates with the provided signals (`matrix` and `det`):

```cpp
#include <systemc.h>

SC_MODULE(DeterminantCalculator) {
    sc_in<sc_vector<sc_double>> matrix;  // Input port for the matrix
    sc_out<sc_double> det;               // Output port for the determinant

    // Constructor
    SC_CTOR(DeterminantCalculator) {
        // Process to calculate the determinant
        SC_THREAD(calculate_determinant);
    }

    // Method to calculate the determinant
    void calculate_determinant() {
        int n = matrix.size();
        double a[MAXN][MAXN];
        double det = 1.0;

        // Copy the input matrix into the local array
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                a[i][j] = matrix[i][j].read().to_double();
            }
        }

        // Perform Gaussian elimination with partial pivoting
        for (int i = 0; i < n; i++) {
            int pivot = i;
            for (int j = i + 1; j < n; j++) {
                if (abs(a[j][i]) > abs(a[pivot][i])) {
                    pivot = j;
                }
            }
            if (pivot != i) {
                swap(a[i], a[pivot]);
                det *= -1;
            }
            if (a[i][i] == 0) {
                det = 0;
                break;
            }
            det *= a[i][i];
            for (int j = i + 1; j < n; j++) {
                double factor = a[j][i] / a[i][i];
                for (int k = i + 1; k < n; k++) {
                    a[j][k] -= factor * a[i][k];
                }
            }
        }

        // Write the determinant to the output port
        det.write(det);
    }
};
```

### Explanation of SystemC Code

1. **Module Declaration:**
   ```cpp
   SC_MODULE(DeterminantCalculator) {
   ```
   - Defines a SystemC module named `DeterminantCalculator`.

2. **Ports:**
   ```cpp
   sc_in<sc_vector<sc_double>> matrix;
   sc_out<sc_double> det;
   ```
   - `matrix` is an input port that receives a vector of doubles representing the matrix.
   - `det` is an output port that sends the determinant as a double.

3. **Constructor:**
   ```cpp
   SC_CTOR(DeterminantCalculator) {
       SC_THREAD(calculate_determinant);
   }
   ```
   - Constructs the module and schedules the `calculate_determinant` method to run as a thread.

4. **Method: `calculate_determinant()`**
   - Initializes the determinant to 1.0.
   - Copies the input matrix from the port into a local 2D array.
   - Performs Gaussian elimination with partial pivoting to calculate the determinant.
   - Writes the calculated determinant to the output port.

This SystemC code accurately reflects the logic of the original C++ code and can be integrated with the provided testbench signals.