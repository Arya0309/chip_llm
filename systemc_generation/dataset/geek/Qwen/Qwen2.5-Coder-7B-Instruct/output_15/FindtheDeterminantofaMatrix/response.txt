### Inputs and Outputs

**Inputs:**
- A square matrix of size `n` x `n`, represented as a 2D array of doubles.

**Outputs:**
- The determinant of the input matrix as a double.

### Detailed Explanation

1. **Header Files and Namespace Declaration:**
   ```cpp
   #include <iostream>
   #include <cmath>

   using namespace std;
   ```
   - Includes necessary libraries (`iostream` for input/output operations and `cmath` for mathematical functions).
   - Uses the standard namespace to avoid prefixing standard library names with `std::`.

2. **Constants and Array Declaration:**
   ```cpp
   const int MAXN = 105;
   double a[MAXN][MAXN];
   ```
   - Defines a constant `MAXN` set to 105, which represents the maximum size of the matrix.
   - Declares a 2D array `a` of type `double` with dimensions `MAXN x MAXN`.

3. **Function to Calculate Determinant:**
   ```cpp
   double determinant(int n) {
       double det = 1.0;
       for (int i = 0; i < n; i++) {
           int pivot = i;
           for (int j = i + 1; j < n; j++) {
               if (abs(a[j][i]) > abs(a[pivot][i])) {
                   pivot = j;
               }
           }
           if (pivot != i) {
               swap(a[i], a[pivot]);
               det *= -1;
           }
           if (a[i][i] == 0) {
               return 0;
           }
           det *= a[i][i];
           for (int j = i + 1; j < n; j++) {
               double factor = a[j][i] / a[i][i];
               for (int k = i + 1; k < n; k++) {
                   a[j][k] -= factor * a[i][k];
               }
           }
       }
       return det;
   }
   ```
   - **Parameters:** 
     - `n`: The size of the matrix.
   - **Variables:**
     - `det`: The determinant of the matrix, initialized to 1.0.
   - **Logic:**
     - **Gaussian Elimination with Partial Pivoting:**
       - Iterates over each row `i`.
       - Finds the row with the largest absolute value in column `i` (pivot row) and swaps it with the current row if necessary.
       - If the pivot element is zero, the matrix is singular and the determinant is zero.
       - Multiplies the determinant by the pivot element.
       - Subtracts multiples of the pivot row from the other rows to eliminate elements below the pivot.
     - **Result:**
       - Returns the determinant after processing all rows.

4. **Main Function:**
   ```cpp
   int main() {
       int n = 4;
       double matrix[4][4] = {{1, 0, 2, -1},
                               {3, 0, 0, 5},
                               {2, 1, 4, -3},
                               {1, 0, 5, 0}};
       for (int i = 0; i < n; i++) {
           for (int j = 0; j < n; j++) {
               a[i][j] = matrix[i][j];
           }
       }
       double det = determinant(n);
       cout << "Determinant = " << det << endl;
       return 0;
   }
   ```
   - **Variables:**
     - `n`: The size of the matrix (set to 4).
     - `matrix`: A 2D array representing the input matrix.
   - **Logic:**
     - Copies the input matrix into the global array `a`.
     - Calls the `determinant` function to compute the determinant.
     - Prints the determinant to the console.

### SystemC Code Snippet

```cpp
#include <systemc.h>

SC_MODULE(DeterminantCalculator) {
    sc_in<double> matrix[4];  // Input port for the matrix
    sc_out<double> det;      // Output port for the determinant

    SC_CTOR(DeterminantCalculator) {
        SC_THREAD(calculate_determinant);
        sensitive << matrix;
    }

    void calculate_determinant() {
        double a[4][4];
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                a[i][j] = matrix[i * 4 + j].read();
            }
        }

        double det_val = 1.0;
        for (int i = 0; i < 4; i++) {
            int pivot = i;
            for (int j = i + 1; j < 4; j++) {
                if (fabs(a[j][i]) > fabs(a[pivot][i])) {
                    pivot = j;
                }
            }
            if (pivot != i) {
                for (int k = 0; k < 4; k++) {
                    swap(a[i][k], a[pivot][k]);
                }
                det_val *= -1;
            }
            if (a[i][i] == 0) {
                det.write(0);
                return;
            }
            det_val *= a[i][i];
            for (int j = i + 1; j < 4; j++) {
                double factor = a[j][i] / a[i][i];
                for (int k = i + 1; k < 4; k++) {
                    a[j][k] -= factor * a[i][k];
                }
            }
        }
        det.write(det_val);
    }
};
```

### Explanation of SystemC Code

- **Module Declaration:**
  - `DeterminantCalculator`: A SystemC module that calculates the determinant of a 4x4 matrix.
  
- **Input and Output Ports:**
  - `matrix[4]`: An array of 4 `sc_in<double>` ports representing the matrix.
  - `det`: An `sc_out<double>` port representing the determinant.

- **Constructor:**
  - Initializes the module and binds the `calculate_determinant` method to the `matrix` port.

- **Method:**
  - `calculate_determinant`: Converts the input ports to a local 2D array, computes the determinant using the same logic as the original C++ code, and writes the result to the `det` port.

This SystemC code snippet faithfully captures the logic of the original C++/C source code and can be integrated into a high-level synthesis flow.