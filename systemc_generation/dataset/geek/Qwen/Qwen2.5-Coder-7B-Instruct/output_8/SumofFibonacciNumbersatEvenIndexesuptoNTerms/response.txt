### Inputs and Outputs

**Inputs:**
- `n`: An integer representing the number of terms in the Fibonacci sequence up to which the sum of even-indexed Fibonacci numbers is to be calculated.

**Outputs:**
- `sum`: An integer representing the sum of the even-indexed Fibonacci numbers up to `n` terms.

### Detailed Explanation of the C++/C Code

1. **Header and Namespace Declaration**
   ```cpp
   #include <bits/stdc++.h>
   using namespace std;
   ```
   - This includes the standard library and uses the standard namespace for simplicity.

2. **Function to Calculate Even-Summed Fibonacci Numbers**
   ```cpp
   int calculateEvenSum(int n)
   ```
   - This function takes an integer `n` and returns the sum of even-indexed Fibonacci numbers up to `n` terms.

3. **Initial Checks and Array Initialization**
   ```cpp
   if (n <= 0)
       return 0;
   int fibo[2 * n + 1];
   fibo[0] = 0, fibo[1] = 1;
   ```
   - If `n` is less than or equal to 0, the function returns 0.
   - An array `fibo` of size `2 * n + 1` is initialized to store Fibonacci numbers.
   - The first two Fibonacci numbers (`fibo[0]` and `fibo[1]`) are set to 0 and 1 respectively.

4. **Loop to Calculate Fibonacci Numbers and Sum Even-Indexed Terms**
   ```cpp
   int sum = 0;
   for (int i = 2; i <= 2 * n; i++) 
   {
       fibo[i] = fibo[i - 1] + fibo[i - 2];
       if (i % 2 == 0)
           sum += fibo[i];
   }
   ```
   - A variable `sum` is initialized to 0 to store the sum of even-indexed Fibonacci numbers.
   - A loop runs from 2 to `2 * n`, calculating each Fibonacci number and adding it to `sum` if the index `i` is even.

5. **Return the Result**
   ```cpp
   return sum;
   ```
   - The function returns the calculated sum of even-indexed Fibonacci numbers.

6. **Main Function**
   ```cpp
   int main()
   {
       int n = 8;
       cout << "Even indexed Fibonacci Sum upto " << n << " terms: " << calculateEvenSum(n) << endl;
       return 0;
   }
   ```
   - The `main` function sets `n` to 8 and prints the sum of even-indexed Fibonacci numbers up to 8 terms.

### Equivalent SystemC Code

```cpp
#include <systemc.h>

SC_MODULE(EvenFibonacciSum) {
    sc_in<int> n;  // Input port for the number of terms
    sc_out<int> sum; // Output port for the sum

    SC_CTOR(EvenFibonacciSum) {
        SC_METHOD(calculate_even_sum);
        sensitive << n;
    }

    void calculate_even_sum() {
        if (n.read() <= 0) {
            sum.write(0);
            return;
        }

        int fibo[2 * n.read() + 1];
        fibo[0] = 0, fibo[1] = 1;
        int sum_value = 0;

        for (int i = 2; i <= 2 * n.read(); i++) {
            fibo[i] = fibo[i - 1] + fibo[i - 2];
            if (i % 2 == 0) {
                sum_value += fibo[i];
            }
        }

        sum.write(sum_value);
    }
};
```

### Explanation of the SystemC Code

1. **Module Declaration**
   ```cpp
   SC_MODULE(EvenFibonacciSum) {
   ```
   - This declares a SystemC module named `EvenFibonacciSum`.

2. **Input and Output Ports**
   ```cpp
   sc_in<int> n;  // Input port for the number of terms
   sc_out<int> sum; // Output port for the sum
   ```
   - `n` is an input port for the number of terms.
   - `sum` is an output port for the calculated sum.

3. **Constructor**
   ```cpp
   SC_CTOR(EvenFibonacciSum) {
       SC_METHOD(calculate_even_sum);
       sensitive << n;
   }
   ```
   - The constructor sets up the module and specifies that the `calculate_even_sum` method should be triggered whenever the `n` input changes.

4. **Method to Calculate Even-Summed Fibonacci Numbers**
   ```cpp
   void calculate_even_sum() {
       if (n.read() <= 0) {
           sum.write(0);
           return;
       }

       int fibo[2 * n.read() + 1];
       fibo[0] = 0, fibo[1] = 1;
       int sum_value = 0;

       for (int i = 2; i <= 2 * n.read(); i++) {
           fibo[i] = fibo[i - 1] + fibo[i - 2];
           if (i % 2 == 0) {
               sum_value += fibo[i];
           }
       }

       sum.write(sum_value);
   }
   ```
   - This method calculates the sum of even-indexed Fibonacci numbers up to `n` terms and writes the result to the `sum` output port.
   - It handles the case where `n` is less than or equal to 0 by returning 0.
   - It initializes the Fibonacci array and calculates the sum of even-indexed Fibonacci numbers as per the original C++ code.

This SystemC code faithfully captures the logic of the original C++ code and can be integrated into a high-level synthesis flow.