### Inputs and Outputs

**Inputs:**
- None

**Outputs:**
- The sorted 2D matrix is printed to the console.

### Detailed Explanation

1. **Header and Namespace Declaration**
   ```cpp
   #include<bits/stdc++.h>
   using namespace std;
   ```
   - Includes the standard C++ library and uses the `std` namespace.

2. **Swap Function**
   ```cpp
   void swap(int *xp, int *yp) 
   { 
       int temp = *xp; 
       *xp = *yp; 
       *yp = temp; 
   } 
   ```
   - Swaps the values pointed to by `xp` and `yp`.

3. **Sort Row-Wise Function**
   ```cpp
   void sortRowWise(int m[][4], int r, int c)
   ```
   - Takes a 2D matrix `m`, number of rows `r`, and number of columns `c`.

4. **Outer Loop for Rows**
   ```cpp
   for (int i = 0; i < r; i++) 
   ```
   - Iterates over each row of the matrix.

5. **Inner Loop for Columns**
   ```cpp
   for (int j = 0; j < c; j++) 
   ```
   - Iterates over each column of the matrix.

6. **Comparison and Swapping Loop**
   ```cpp
   for (int k = 0; k < c - j - 1; k++) 
   ```
   - Compares adjacent elements in the row and swaps them if they are in the wrong order.

7. **Condition for Swapping**
   ```cpp
   if (m[i][k] > m[i][k + 1]) 
   ```
   - Checks if the current element is greater than the next element.

8. **Swapping Elements**
   ```cpp
   swap(m[i][k], m[i][k + 1]);
   ```
   - Calls the `swap` function to swap the elements.

9. **Printing the Sorted Matrix**
   ```cpp
   for (int i = 0; i < r; i++) 
   {
       for (int j = 0; j < c; j++)
       cout << m[i][j] << " ";
       cout << endl;
   }
   ```
   - Iterates over each element of the matrix and prints it. Each row is printed on a new line.

10. **Driver Code**
    ```cpp
    int main()
    {
        int m[][4] = {{9, 8, 7, 1}, {7, 3, 0, 2}, {9, 5, 3, 2}, {6, 3, 1, 2}};
        int c = sizeof(m[0]) / sizeof(m[0][0]);
        int r = sizeof(m) / sizeof(m[0]);
        sortRowWise(m, r, c);
        return 0;
    }
    ```
    - Defines a 2D matrix `m`.
    - Calculates the number of rows `r` and columns `c`.
    - Calls the `sortRowWise` function to sort the matrix.
    - Prints the sorted matrix.

### SystemC Code Snippet

```cpp
#include <systemc.h>

SC_MODULE(SortMatrix) {
    sc_in<bool> clk;      // Clock signal
    sc_in<bool> start;    // Start signal
    sc_out<bool> done;     // Done signal
    sc_out<int> sorted_matrix[4][4]; // Output port for the sorted matrix

    int m[4][4] = {{9, 8, 7, 1}, {7, 3, 0, 2}, {9, 5, 3, 2}, {6, 3, 1, 2}};
    int r = 4;
    int c = 4;
    bool processing = false;

    void sortRowWise() {
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                for (int k = 0; k < c - j - 1; k++) {
                    if (m[i][k] > m[i][k + 1]) {
                        int temp = m[i][k];
                        m[i][k] = m[i][k + 1];
                        m[i][k + 1] = temp;
                    }
                }
            }
        }
    }

    SC_CTOR(SortMatrix) {
        SC_THREAD(sort_process);
        sensitive << clk.pos();
    }

    void sort_process() {
        while (true) {
            wait(clk.pos());
            if (start.read()) {
                processing = true;
                sortRowWise();
                processing = false;
                done.write(true);
            } else {
                done.write(false);
            }
        }
    }
};
```

### Explanation of SystemC Code

1. **Module Declaration**
   ```cpp
   SC_MODULE(SortMatrix) {
   ```
   - Declares a SystemC module named `SortMatrix`.

2. **Signals and Ports**
   ```cpp
   sc_in<bool> clk;      // Clock signal
   sc_in<bool> start;    // Start signal
   sc_out<bool> done;     // Done signal
   sc_out<int> sorted_matrix[4][4]; // Output port for the sorted matrix
   ```
   - Declares the input and output signals.

3. **Matrix Initialization**
   ```cpp
   int m[4][4] = {{9, 8, 7, 1}, {7, 3, 0, 2}, {9, 5, 3, 2}, {6, 3, 1, 2}};
   int r = 4;
   int c = 4;
   ```
   - Initializes the matrix and sets the number of rows and columns.

4. **Sorting Function**
   ```cpp
   void sortRowWise() {
       for (int i = 0; i < r; i++) {
           for (int j = 0; j < c; j++) {
               for (int k = 0; k < c - j - 1; k++) {
                   if (m[i][k] > m[i][k + 1]) {
                       int temp = m[i][k];
                       m[i][k] = m[i][k + 1];
                       m[i][k + 1] = temp;
                   }
               }
           }
       }
   }
   ```
   - Sorts the matrix row-wise.

5. **Thread Declaration**
   ```cpp
   SC_THREAD(sort_process);
   sensitive << clk.pos();
   ```
   - Declares a thread `sort_process` sensitive to the positive edge of the clock signal.

6. **Thread Logic**
   ```cpp
   void sort_process() {
       while (true) {
           wait(clk.pos());
           if (start.read()) {
               processing = true;
               sortRowWise();
               processing = false;
               done.write(true);
           } else {
               done.write(false);
           }
       }
   }
   ```
   - Waits for the `start` signal.
   - When `start` is received, it sorts the matrix and sets the `done` signal to `true`.
   - If `start` is not received, it sets the `done` signal to `false`.