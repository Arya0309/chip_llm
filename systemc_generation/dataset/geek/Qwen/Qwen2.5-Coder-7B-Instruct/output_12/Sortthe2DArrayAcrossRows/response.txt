### Input and Output Summary

**Inputs:**
- `m`: A 2D integer matrix to be sorted row-wise.
- `r`: Number of rows in the matrix.
- `c`: Number of columns in the matrix.

**Outputs:**
- The sorted 2D matrix printed to the console.

### Detailed Explanation

1. **Swap Function**:
   ```cpp
   void swap(int *xp, int *yp) 
   { 
       int temp = *xp; 
       *xp = *yp; 
       *yp = temp; 
   } 
   ```
   - This function swaps the values pointed to by `xp` and `yp`.

2. **Sort Row-Wise Function**:
   ```cpp
   void sortRowWise(int m[][4], int r, int c)
   ```
   - This function sorts each row of the matrix `m` using the bubble sort algorithm.

3. **Outer Loop (Rows)**:
   ```cpp
   for (int i = 0; i < r; i++) 
   ```
   - Iterates over each row of the matrix.

4. **Inner Loop (Columns)**:
   ```cpp
   for (int j = 0; j < c; j++) 
   ```
   - Iterates over each column of the matrix.

5. **Bubble Sort Inner Loop**:
   ```cpp
   for (int k = 0; k < c - j - 1; k++) 
   ```
   - Compares adjacent elements and swaps them if they are in the wrong order.

6. **Condition for Swapping**:
   ```cpp
   if (m[i][k] > m[i][k + 1]) 
   ```
   - Checks if the current element is greater than the next element in the row.

7. **Swapping Elements**:
   ```cpp
   swap(m[i][k], m[i][k + 1]);
   ```
   - Calls the `swap` function to swap the elements.

8. **Printing the Sorted Matrix**:
   ```cpp
   for (int i = 0; i < r; i++) 
   {
       for (int j = 0; j < c; j++)
       cout << m[i][j] << " ";
       cout << endl;
   }
   ```
   - Prints each element of the sorted matrix to the console.

### SystemC Code Snippet

Below is the equivalent SystemC code that integrates with the provided signals and performs the same row-wise sorting operation:

```cpp
#include <systemc.h>

SC_MODULE(MatrixSorter) {
    sc_in<bool> clk;  // Clock signal
    sc_in<bool> start;  // Start signal
    sc_out<bool> done; // Done signal

    int m[4][4] = {{9, 8, 7, 1}, {7, 3, 0, 2}, {9, 5, 3, 2}, {6, 3, 1, 2}};
    int c = sizeof(m[0]) / sizeof(m[0][0]);
    int r = sizeof(m) / sizeof(m[0]);

    bool is_sorting = false;

    SC_CTOR(MatrixSorter) {
        SC_THREAD(sort_matrix);
        sensitive << clk.pos();
    }

    void swap(int &xp, int &yp) {
        int temp = xp;
        xp = yp;
        yp = temp;
    }

    void sortRowWise(int m[][4], int r, int c) {
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                for (int k = 0; k < c - j - 1; k++) {
                    if (m[i][k] > m[i][k + 1]) {
                        swap(m[i][k], m[i][k + 1]);
                    }
                }
            }
        }
    }

    void printMatrix(int m[][4], int r, int c) {
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++)
                cout << m[i][j] << " ";
            cout << endl;
        }
    }

    void sort_matrix() {
        while (true) {
            wait(); // Wait for the clock edge

            if (start.read()) {
                is_sorting = true;
                sortRowWise(m, r, c);
                printMatrix(m, r, c);
                is_sorting = false;
                done.write(true);
                wait(); // Wait for the next clock edge before clearing done signal
                done.write(false);
            }
        }
    }
};
```

### Explanation of SystemC Code

1. **Module Declaration**:
   ```cpp
   SC_MODULE(MatrixSorter) {
   ```
   - Declares a SystemC module named `MatrixSorter`.

2. **Signals**:
   ```cpp
   sc_in<bool> clk;  // Clock signal
   sc_in<bool> start;  // Start signal
   sc_out<bool> done; // Done signal
   ```
   - Defines the input and output signals as specified.

3. **Matrix Initialization**:
   ```cpp
   int m[4][4] = {{9, 8, 7, 1}, {7, 3, 0, 2}, {9, 5, 3, 2}, {6, 3, 1, 2}};
   int c = sizeof(m[0]) / sizeof(m[0][0]);
   int r = sizeof(m) / sizeof(m[0]);
   ```
   - Initializes the matrix and calculates the number of rows and columns.

4. **Swap Function**:
   ```cpp
   void swap(int &xp, int &yp) {
       int temp = xp;
       xp = yp;
       yp = temp;
   }
   ```
   - Implements the swap function using references.

5. **Sort Row-Wise Function**:
   ```cpp
   void sortRowWise(int m[][4], int r, int c) {
       for (int i = 0; i < r; i++) {
           for (int j = 0; j < c; j++) {
               for (int k = 0; k < c - j - 1; k++) {
                   if (m[i][k] > m[i][k + 1]) {
                       swap(m[i][k], m[i][k + 1]);
                   }
               }
           }
       }
   }
   ```
   - Implements the row-wise sorting using the bubble sort algorithm.

6. **Print Matrix Function**:
   ```cpp
   void printMatrix(int m[][4], int r, int c) {
       for (int i = 0; i < r; i++) {
           for (int j = 0; j < c; j++)
               cout << m[i][j] << " ";
           cout << endl;
       }
   }
   ```
   - Prints the sorted matrix to the console.

7. **Thread for Sorting**:
   ```cpp
   void sort_matrix() {
       while (true) {
           wait(); // Wait for the clock edge

           if (start.read()) {
               is_sorting = true;
               sortRowWise(m, r, c);
               printMatrix(m, r, c);
               is_sorting = false;
               done.write(true);
               wait(); // Wait for the next clock edge before clearing done signal
               done.write(false);
           }
       }
   }
   ```
   - Defines a thread that waits for the `start` signal, sorts the matrix, prints it, and then sets the `done` signal.

This SystemC code integrates the required signals and faithfully captures the logic of the original C++/C code.