### C++/C Code Analysis

#### Inputs and Outputs
- **Input**: An integer `n` representing the number of terms in the Fibonacci sequence to consider.
- **Output**: The sum of the even-indexed Fibonacci numbers up to `n` terms.

#### Detailed Explanation
1. **Function Declaration and Initialization**:
   ```cpp
   int calculateEvenSum(int n)
   ```
   - This function takes an integer `n` as input and returns the sum of even-indexed Fibonacci numbers.

2. **Edge Case Handling**:
   ```cpp
   if (n <= 0)
       return 0;
   ```
   - If `n` is less than or equal to zero, the function returns 0 since there are no Fibonacci numbers to consider.

3. **Fibonacci Array Initialization**:
   ```cpp
   int fibo[2 * n + 1];
   fibo[0] = 0, fibo[1] = 1;
   ```
   - An array `fibo` of size `2 * n + 1` is initialized to store the Fibonacci numbers.
   - The first two Fibonacci numbers (`fibo[0]` and `fibo[1]`) are set to 0 and 1 respectively.

4. **Initialization of Sum**:
   ```cpp
   int sum = 0;
   ```
   - A variable `sum` is initialized to 0 to accumulate the sum of even-indexed Fibonacci numbers.

5. **Loop to Calculate Fibonacci Numbers and Sum Even-Indexed Terms**:
   ```cpp
   for (int i = 2; i <= 2 * n; i++) 
   {
       fibo[i] = fibo[i - 1] + fibo[i - 2];
       if (i % 2 == 0)
           sum += fibo[i];
   }
   ```
   - A loop runs from 2 to `2 * n` to calculate the Fibonacci numbers.
   - For each iteration, the current Fibonacci number is calculated and stored in `fibo[i]`.
   - If the index `i` is even, the corresponding Fibonacci number is added to `sum`.

6. **Return the Result**:
   ```cpp
   return sum;
   ```
   - The function returns the accumulated sum of even-indexed Fibonacci numbers.

7. **Driver Code**:
   ```cpp
   int main()
   {
       int n = 8;
       cout << "Even indexed Fibonacci Sum upto " << n << " terms: " << calculateEvenSum(n) << endl;
       return 0;
   }
   ```
   - The `main` function sets `n` to 8 and prints the sum of even-indexed Fibonacci numbers up to 8 terms.

### Equivalent SystemC Code

Here is the equivalent SystemC code that integrates with the provided signals `n` and `sum`:

```cpp
#include <systemc.h>

SC_MODULE(FibonacciEvenSum) {
    sc_in<int> n;          // Input port for the number of terms
    sc_out<int> sum;      // Output port for the sum of even-indexed Fibonacci numbers

    SC_CTOR(FibonacciEvenSum) {
        SC_THREAD(calculateEvenSum);
        sensitive << n;
    }

    void calculateEvenSum() {
        if (n.read() <= 0) {
            sum.write(0);
            return;
        }

        int fibo[2 * n.read() + 1];
        fibo[0] = 0, fibo[1] = 1;
        int sum_val = 0;

        for (int i = 2; i <= 2 * n.read(); i++) {
            fibo[i] = fibo[i - 1] + fibo[i - 2];
            if (i % 2 == 0)
                sum_val += fibo[i];
        }

        sum.write(sum_val);
    }
};
```

### Explanation of SystemC Code
1. **Module Declaration**:
   ```cpp
   SC_MODULE(FibonacciEvenSum) {
   ```
   - A SystemC module named `FibonacciEvenSum` is declared.

2. **Ports**:
   ```cpp
   sc_in<int> n;
   sc_out<int> sum;
   ```
   - Two ports, `n` (input) and `sum` (output), are defined to match the provided signals.

3. **Constructor**:
   ```cpp
   SC_CTOR(FibonacciEvenSum) {
       SC_THREAD(calculateEvenSum);
       sensitive << n;
   }
   ```
   - The constructor initializes a thread `calculateEvenSum` that is sensitive to changes in the `n` port.

4. **Thread Function**:
   ```cpp
   void calculateEvenSum() {
       if (n.read() <= 0) {
           sum.write(0);
           return;
       }

       int fibo[2 * n.read() + 1];
       fibo[0] = 0, fibo[1] = 1;
       int sum_val = 0;

       for (int i = 2; i <= 2 * n.read(); i++) {
           fibo[i] = fibo[i - 1] + fibo[i - 2];
           if (i % 2 == 0)
               sum_val += fibo[i];
       }

       sum.write(sum_val);
   }
   ```
   - This thread reads the value of `n`, handles the edge case where `n` is less than or equal to zero, calculates the Fibonacci numbers up to `2 * n`, sums the even-indexed Fibonacci numbers, and writes the result to the `sum` port.

This SystemC code faithfully captures the logic of the original C++/C code and can be integrated into a high-level synthesis flow.