  The provided C++/C code defines a function `rotatematrix` that takes in a 2D array `mat` and rotates it by 90 degrees counterclockwise. The function has two major blocks of code: the outer `while` loop and the interior `if` statements.

The inner `if` statements check if the matrix has been fully rotated, and if so, the loop exits. The `break` statement in the `if` statements ensures that the loop exits prematurely if the rotation is complete.

The outer `while` loop checks if the matrix has been fully rotated. If not, the loop continues. The `if` statement in the `while` loop checks if the rotation is complete. If so, the loop exits. The `row` and `col` variables keep track of the current row and column indices. The `prev` variable stores the previous element of the matrix, and the `curr` variable stores the current element of the matrix.

Inside the `while` loop, the first `if` statement moves elements from the remaining rows to the last column, while the second `if` statement moves elements from the remaining columns to the last row. These operations can be repeated until the matrix has been fully rotated.

After the matrix has been fully rotated, the function prints out the rotated matrix using the `cout` statements.

In summary, the `rotatematrix` function rotates a 2D array by 90 degrees counterclockwise, and it does so by repeatedly moving elements from the last row to the first column and vice versa. It checks if the rotation is complete, and it exits the loop if it is.

To generate equivalent SystemC code, we can modify the existing code to use SystemC variables and interfaces. The SystemC code should look like:
```
#include <systemc.h>

SC_MODULE(rotatematrix) {

    // Interface for input 2D array
    sc_in<int> in; 
    int m, c;

    // Interface for rotated output 2D array
    sc_out<int> out; 

    // Constructor
    SC_CTOR(rotatematrix) {
        // Process to perform rotation
        SC_METHOD(rotation);
        sensitive << in;
    }

    // Method to rotate the matrix
    void rotation() {
        int row = 0, col = 0; 
        int prev, curr; 

        // Variable to check if rotation is complete
        int has_rotated = 0;

        while (has_rotated == 0) {
            if (row + 1 == m || col + 1 == c) {  // Check if rotation is complete
                has_rotated = 1;
           }
    
           // Move elements from last row to first column
           for (int i=0; i < c; i++) {
               prev = in[row][i][0]; 
               for (int j=0; j < m; j++) {
                   out[i][j][0] = prev; 
                   prev = in[j][i][0];  // Update previous element
               } 
           }
    
           // Move elements from last column to first row
           for (int i=0; i < m; i++) {
               prev = in[i][c-1][0]; 
               for (int j=0; j < c-1; j++) {
                   out[i][j][0] = prev; 
                   prev = in[i][j][0];  // Update previous element
               } 
           }
    
           // Update row and column indices
           row++;
           col++;
        }
    }
};
```
In this SystemC code, the `in` and `out` interfaces are used as inputs and outputs, respectively. The `rotation` method performs the rotation logic, using the `row` and `col` variables to keep track of the current row and column indices. The `has_rotated` variable is used to check if the rotation is complete. This code should be used in a high-level synthesis flow such as OPAE or GLSYN.