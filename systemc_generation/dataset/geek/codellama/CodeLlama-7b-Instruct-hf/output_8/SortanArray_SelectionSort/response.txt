  To convert the given C++/C code into SystemC code, follow these steps:

1. Identify the input(s) and output(s) of the code.
The input of the code is an integer array, and the output is also an integer array.
2. Provide a detailed, line-by-line or block-by-block natural language summary that explains the functionality of the code.

The input to the code is an array of integers. The sort function sorts the integers in the array in ascending order. The sorted array is then printed.

In the equivalent SystemC code, we can create two input and one output ports, respectively, to mirror what the original C++/C code does.

3. Define an SC_MODULE that receives input from the input port, performs sorting on that input, and sends the sorted array to the Sorting component.
The input Array will be "written" to the "iport" port, and the "sorted array" will be received from the "Sorting" module.
4. The "Sorting" module is the heart of the code. Define an array of Systems with a size equal to the length of the passed array of integers.
The array will be accessed as an "input" port for the module, and the final sorted integer array will be output from the module as a "oport".

5. In the Sorting module, initialize a temporary integer variable "temp" as the array index, and declare "i" as a second temporary integer to store the index's value from the initial array.
Instantiate an "Add" SystemModule to perform the actual machine arithmetic to sort the latter half of the array. Set the appropriate "iport" port for the Add component to "tip".

6. In the Sort module's for loop, set the "oport" port of the Add module to "tip" so the Add component can keep track of where to put the result after each swap.

7. Define an "Add" module with a "iport" and "tip" port. Perform arithmetic on the two inputs from the arrays, respectively, using the operators "+" and "-". The value will be represented in "oport", and the final calculation will be stored in "iport" by the sorting module.

8. Perform the selection sort algorithm iterations in the Main module, including the if statement. The array will be sorted into ascending order by swaping the two values at index min_idx and index i.

9. Finally, output the result to verify the correctness of the sorted array.

Here is the SystemC code for the converted C++/C code:
```

 #include <systemc.h>

// Module that sorts an array of integers.
SC_MODULE(Sorting) {
  sc_in<int> iport;  // Input port for the input array
  sc_out<int> oport; // Output port for the sorted array
  int temp;

  // Constructor
  SC_CTOR(Sorting) {
    SC_METHOD(doSort);
    sensitive << iport;
  }

  // Method to perform the actual sorting
  void doSort() {
    int i;

    // Initialize temp with the minimum value
    int temp = 0;
    for (i = 0; i < n; i++) {
      if (temp > arr[i]) {
        temp = arr[i];
      }
  }

  // Swap the minimum value with the ith value
  void swap() {
    int temp2 = arr[i];
    arr[i] = arr[min_idx];
    arr[min_idx] = temp2;
    i++;
  }

  // Sort the array
  void object()
  {
    for (i = 0; i < n; i++) {
      if (temp > arr[i]) {
        temp = arr[i];
      }

      // Swap the ith value with the minimum value
      swap();
    }
    // The final sorted array is written to oport
    oport.write(arr);
  }
```
The above mentioned code derived from the original C++/C code and its functions, eg: sorting an array, using swaps to swap the i-th index and the minimum value, and performing arithmetic using addition and subtraction operations. It follows the system described earlier, which is to double the size of the array by creating two identical arrays subdivide the array into three parts and sort, we can see how the code will work.