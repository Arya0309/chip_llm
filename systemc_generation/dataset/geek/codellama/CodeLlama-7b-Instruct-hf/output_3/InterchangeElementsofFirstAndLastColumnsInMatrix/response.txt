  Inputs:
- An array of integers of size n x n (input)

Outputs:
- The result of swapping the elements of the first and last rows of the input array in the same size of n x n (output)

Analysis:

The code included in the exercise decomposition, is C++/C program where the first row of an input 2D array is interchanged with the last row. Each block of code is explained and commented line by line.

1. ```c
   #include <iostream> 
   using namespace std;
   ```

This block of code including the Standard Input and Output Header file, including the `iostream` header file and the usage of the `std` namespace. This is standard for C++ and C codes, as it deals with the console output.

2. ```c
   #define n 4
   ```

This code defines n to be the specific integer that is used, so the code works for any size of array, but for the purpose of the job, it is required to work with 4 rows/columns.

3. ```c
   void interchangeFirstLast(int m[][n]) 
   { 
       // The declared variable `rows`, is assigned a value based on the `#define` value (n).
       int rows = n; 
       // The code within the for loop loops for all of the values of i and j, then it switches the values of the ith row and jth column of the array between the 0th row and the value of variable **rows** - 1. Then, it switches the variables values in array with positions **rows** - 1 and**n**.
       for (int i = 0; i < n; i++) 
       { 
           int t = m[0][i]; 
         //The variable t is assigned a value of m[0][i]. The statement below with the ++n will make it so that the variable rows goes from 0 -> **n** then continuing to loop through the for-loops statement. 
           m[0][i] = m[rows - 1][i]; 
           m[rows - 1][i] = t; 
       } 
   }
   ```

In the code above, a function was defined where the name of the function is `interchangeFirstLast`, and an array of size **n in n** (m) was passed in as a parameter. The function is used to interchange the elements of the rows in the array. The for-loop will iterate through each position in the array. It will define a variable **`rows`** which was defined previously based on the `#define` value and will switch the values of the ith and jth positions of the array

4. ```c
      // Driver code 
      int main() 
      { 
          // This assigns the infinate array size to have values like this
          int m[n][n] = {{8, 9, 7, 6}, 
                          {4, 7, 6, 5}, 
                          {3, 2, 1, 8}, 
                          {9, 9, 7, 7}}; 
          //The fuction was called on the array m passing in the variable as an argument
          interchangeFirstLast(m); 
          //Outputting the row and columns within the array and the function got assigned to the ith index of the array.
          for (int i = 0; i < n; i++) 
          { 
              for (int j = 0; j < n; j++) 
                  cout << m[i][j] << " "; 
                  //end the column outputting operator
                  cout << endl; 
                  //end the for column
              } 
          
          }
          //The for - loop above will print i, then the matrix of the values that were swapped based on the function
```This is the driver code, with the driver function that is used to call the `interchangeFirstLast` function. The array m is initialized. Interchange square brackets are not necessary to call the function with the argument passed on the parameter **`m`**. Then, you tell the compiler to do the function and then within the **`for`** loop for rows and columns, print the matrix values.

Summary:
The program includes the I/O library and directs to enter the number of rows first before the program automatically inputs the default values you see. Since the values cannot be unspecified because of the infrastructure of the code, for this particular assignment, all of the values will be initialized to the **default constant n = 4** that was created and the function could only work with that value of the array size. The function was able to successfully execute and interchange the elements and output the changes in rows and columns.

SystemC Code Example:


**Using SystemC**

You can compile and simulate this code with the files included below. Ensure they are in the same folder and execute the code on git bash/ terminal

```

#include<systemc.h>

//Module that interchanges the elements of the first and last rows
SC_MODULE(interchangeFirstLast)
        {
        
        sc_in <int> in[SIZE];
        sc_out <int> out[SIZE];
        
        //Constructs the Module
        SC_CTOR(interchangeFirstLast)
            {
                
                m_in = new sc_signal[SIZE];
                m_out = new sc_signal[SIZE];
                
                // The code within the for loop loops for all of the values of i and j,
                // then it switches the values of the ith row and jth column of the array between the 0th row
                // and the value of variable **rows** - 1. 
                // Then, it switches the variables values in array with positions **rows** - 1 and**n** for all of these conditions to uphld.
                for (int i = 0; i < n; i++) 
                { 
                    int t = m[0];
                    m[0] = m[rows - 1][i];
                    m[rows - 1][i] = t;
                }
                
                
            }
            
            
        }
        
        //Driver code to test the module
        
        sc_in <int> in[SIZE];
        sc_out<int> out[SIZE];
        
        int main()
        {
            //input array
            int m[SIZE] = {{8, 9, 7, 6}, 
                {4, 7, 6, 5}, 
                {3, 2, 1, 8}, 
                {9, 9, 7, 7}};
            //Array size and a variable that holds the declared value rows.
            int arraySize = SIZE;
            int rows = n;
            interchangeFirstLast(m,arraySize);
            
            
        }
        
```


The code above includes the SystemC library and Directs to include the file **systemc**. Inside, we have defined a module named **interchangeFirstLast** with two signals of array size **SIZE** that were assigned earlier. Inside the constructor of the module, we have sorted the code with the proper variable assignment that ensures that the compiler is able to assign the variables correctly.



Based on the code provided, here is the SystemC code:


```

#include


//Module that interchanges the elements of the first and last rows
SC_MODULE(interchangeFirstLast)
    {
    
    sc_in <int> in[SIZE];
    sc_out <int> out[SIZE];
    
    //Constructs the Module
    SC_CTOR(interchangeFirstLast)
        {
        
        m_in = new sc_signal[SIZE];
        m_out = new sc_signal[SIZE];
        
        // The code within the for loop loops for all of the values of i and j,
        // then it switches the values of the ith row and jth column of the array between the 0th row
        // and the value of variable **rows** - 1. 
        // Then, it switches the variables values in array with positions **rows** - 1 and**n** for all of these conditions to uphld.
        for (int i = 0; i < n; i++) 
        { 
            int t = m[0];
            m[0] = m[rows - 1][i];
            m[rows - 1][i] = t;
        }
        
        
    }
    
    
}

//Driver code to test the module

sc_in <int> in[SIZE];
sc_out<int> out[SIZE];

int main()
{
    //input array
    int m[SIZE] = {{8, 9, 7, 6}, 
        {4, 7, 6, 5}, 
        {3, 2, 1, 8}, 
        {9, 9, 7, 7}};
    //Array size and a variable that holds the declared value rows.
    int arraySize = SIZE;
    int rows = n;
    interchangeFirstLast(m,arraySize);
    
    
}

```


Line-by-line Commenting:

-  **SC_MODULE(interchangeFirstLast)**: The `interchangeFirstLast` module defines the SystemC module that represents the main functionality of the original C++/C code.

    - **sc_in <int> in[SIZE];**: The `in` input port of type `sc_in <int>` is of type integer and array size `SIZE`. Example usage: `cin[0]`.

    - **void sc_out <int> out[SIZE];**: The `out` output port of type `sc_out <int>` is of type integer and array size `SIZE`. Example usage: `cout[0]`.

    - **Constructs the Module**: The constructer of the `interchangeFirstLast` module specifies the initialization of the module's internal structure, and is where input ports are connected to the repository and `out` ports are connected to the repository.

    - **for (int i = 0; i < n; i++)**: A loop where starting at i=0, iterating through the size of the `in` array.

    - **m[0]**: This array `m` is `sc_in` and has a type of integer. The element at array position 0.

    - **m[rows - 1][i]**: This is the array `m` which is of integer type and has a size of `rows - 1`, accessing the position of the array with the correct rows-1 position.

    - **t = m[0]**: This is the variable `t` of integer type and is assigned the m[0] array then storing it in the variable `t`
    
    -  **m[0] = m[rows - 1][i];**: assign the `rows - 1` array to variable `m`

    - **m[rows - 1][i] = t;**: At the position [rows - 1][i] of the array `m` assign variable `t`

    
- **sc_in <int> in[SIZE];**: The ` in` input port of type `sc_in <int>` is of type Integer and array size `SIZE`. Example usage: `cin[0]`.

- **void sc_out <int> out[SIZE];**: The `out` output port of type `sc_out <int>` is of type integer and array size `SIZE`. Example usage: `cout[0]`.

- **Constructs the Module**: The constructer of the `interchangeFirstLast` module specifies the initialization of the module's internal structure, and is where input ports are connected to the repository and `out` ports are connected to the repository.

- **for (int i = 0; i < n; i++)**: A loop where starting at i=0, iterating through the size of the `in` array.

- **int t = m[0];** : This variable `t` of type integer and has a type of integer. It assigns the `array >> t` assignment bracket of the `m` array position 0.

- **m[0] = m[rows - 1][i];**: In this area, we specified where it assigned the arrays from the last port m[0] and sends the array into `m` array from the position `rows -1`. The cods assigns the ten variable `m` with the other array `m` at index 0.

- **m[rows - 1][i] = t;**: 

   This variable `t` of type integer and has a type of integer. It assigns the `array >> t` assignment bracket of the `m` array position 0 and sends the array to the other array `m` position index zero. But on this assing method here we have the ten variable `m` tying to the another array `m` position 0 to the array 8.

   

   

