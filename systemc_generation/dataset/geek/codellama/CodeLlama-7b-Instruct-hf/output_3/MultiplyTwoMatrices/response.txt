  C++ program to multiply two matrices

* Input: Two matrices represented by arrays - A[R1][C1] and B[R2][C2]
* Output: The product of the two matrices represented by C[R1][C2]

1.#include <bits/stdc++.h>
using namespace std;

// edit MACROs here
#define R1 2 // number of rows in Matrix-1
#define C1 2 // number of columns in Matrix-1
#define R2 4 // number of rows in Matrix-2
#define C2 3 // number of columns in Matrix-2

void mulMat(int mat1[][C1], int mat2[][C2]) { // function signature
	int rslt[R1][C2];

	cout << "Multiplication of given two matrices is:\n";

	for (int i = 0; i < R1; i++) {
		for (int j = 0; j < C2; j++) {
			rslt[i][j] = 0;

			for (int k = 0; k < R2; k++) {
				rslt[i][j] += mat1[i][k] * mat2[k][j];
			}

			cout << rslt[i][j] << "\t";
		}

		cout << endl;
	}
}

// Driver code
int main()
{
	int mat1[R1][C1] = { { 1, 1 }, { 2, 2 } };

	int mat2[R2][C2] = { { 1, 1, 1 }, { 2, 2, 2 } };

```
if (C1 != R2) { // MAJOR LINE OF CODE
	cout << "The number of columns in Matrix-1 must "
			"be equal to the number of rows in "
			"Matrix-2"
		<< endl;
	cout << "Please update MACROs according to your "
			"array dimension in #define section"
		<< endl;
	exit(EXIT_FAILURE); // MAJOR LINE OF CODE
}

// Function call
mulMat(mat1, mat2);

return 0;
}

// SystemC code equivalent to the C++ program
#include <systemc.h> // library for SystemC design

// C++/C data types removed for brevity

// Functional Block Diagram of the multiplier
SC_MODULE(matrix_mul) {

// Matrix A, B, and C
sc_in<int> A[R1][C1]; // input port for matrix A
sc_in<int> B[R2][C2]; // input port for matrix B
sc_out<int> C[R1][C2]; // output port for matrix C

// Constructor
SC_CTOR(Adder) {
	// sensitivity list stating what
	// elements should trigger a new calculation
	// MAJOR BLOCK OF CODE
	sensitive << A << B;

	// generating R1*C2 modules, each one that
	// performs a dot product between a row
	// of A and a column of B, storing the result
	// in C
	for (int i = 0; i < R1; i++) {
		// for each i, generate R2*C2 modules
		for (int j = 0; j < C2; j++) {
			// for each j, generate R2*1 modules
			for (int k = 0; k < R2; k++) {
				// for each k, C(i,j) = C(i,j) + A(i,k)*B(k,j)
				C(i, j) += A(i, k) * B(k, j);
			} // MAJOR COMMENT

			// write C(i,j) to port C
			C.write(C(i, j));
		} // MAJOR COMMENT
	} // MAJOR COMMENT
} // SC_CTOR

// MAIN MODULE
int main() {
	// MAJOR LINE OF CODE
	matrix_mul mult(A, B, C); // call function

	return 0;
}

```