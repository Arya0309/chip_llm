  Inputs:

* Two integers `a` and `b` to find the GCD

Outputs: 

* The GCD of `a` and `b`

Summary of Logic:
* Start with a and b being the two input numbers.
* Minimum of a and b reduces to a lower number to check.
* The while loop checks if a and b divide res leaving 1 as the highest factor. 
* If it does then return res as the gcd.

SystemC Code:
```scss
// C++ program to find GCD of two numbers using simple arithmetic
 #include <stdio.h>
 #include <sc_in.h>
 #include <sc_out.h>
 
 int sc_main()
 {
    // Find Minimum of a and b
    int res = min(a, b);

 // Testing divisiblity with all numbers starting from
 zero to 1
   for(int i=0; i<a&&b; i++) //Functionality of loop is already stated.
   {
    
         // If any number divide both a and b, so we
         // got the answer
         if (a % res == 0 && b % res == 0)
            break;
         
   }
    
    return res;
}
```
In the above sc_main, start with an explicit definition for the inputs. Two ports, `a` and `b`, must be defined. The output is assigned to the results `res`.
The code then describes the GCD calculation with a simple while loop. 
The break statement stops the loop at res%2, and return res acts as the gcd.
Assuming one input is to be fed into the system, and proper ports must be made for that input.
Assuming the output of the system will be retrieved by another system or function, a dedicated output port must be declared.
Therefore the SystemC code that effectively reflects the majority of the original C++ logic forms the template.