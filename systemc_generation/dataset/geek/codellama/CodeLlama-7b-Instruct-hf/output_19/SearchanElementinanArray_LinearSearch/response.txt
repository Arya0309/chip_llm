  Here's an equivalent SystemC code snippet that preserves the logic of the provided C++/C linear search algorithm:
```scss
#include <systemc>

class LinearSearch {
public:
  // Constructor
  SC_CTOR(LinearSearch) {}

  // Method to search for a key in a vector
  void search(sc_vector<sc_int> v, sc_int key) {
    for (int i = 0; i < v.size(); i++) {
      // If the current element is equal to the key, return its index
      if (v[i] == key) {
        sc_out.write(i);
        return;
      }
    }

    // If the key is not found in the vector, return -1
    sc_out.write(-1);
  }
};

// Testbench for the linear search algorithm
SC_MODULE(Testbench) {
  // Define the inputs and outputs
  sc_in<int> key;
  sc_out<int> index;
  sc_vector< sc_in<int> > data;

  // Instantiate the linear search module
  LinearSearch linear_search;

  // Connect the inputs and outputs
  linear_search.key(key);
  linear_search.index(index);
  linear_search.data(data);

  // Test the linear search algorithm
  void process() {
    // Initialize the input data
    data.size(7);
    data[0] = 1;
    data[1] = 2;
    data[2] = 3;
    data[3] = 4;
    data[4] = 5;
    data[5] = 8;
    data[6] = 9;

    // Set the key to search for
    key = 8;

    // Call the linear search algorithm
    linear_search.search(data, key);

    // Check if the key was found or not
    if (index == -1) {
      // Key was not found, print an error message
      std::cout << "Key not found in the vector" << std::endl;
    }
    else {
      // Key was found, print its index
      std::cout << "Key found at position " << index << std::endl;
    }
  }
};

// Run the simulation
int sc_main(int argc, char *argv[]) {
  // Instantiate the testbench
  Testbench tb;

  // Run the simulation
  sc_start();

  // Print the result
  std::cout << "Result: " << tb.index.read() << std::endl;

  // Return 0
  return 0;
}
```
In this SystemC code, we first define the `LinearSearch` class, which is a module that takes a vector as input and returns the index of the first element in the vector that matches the given key. The `search` method of the `LinearSearch` class uses a for loop to iterate through the vector and checks each element against the key. If a match is found, the index of the element is returned. If the key is not found in the vector, -1 is returned.

The `Testbench` class is a testbench for the `LinearSearch` module. It defines the inputs and outputs of the module and connects them. The `process` method of the `Testbench` class initializes the input data and sets the key to search for. It then calls the `search` method of the `LinearSearch` module and checks if the key was found or not. If the key was not found, an error message is printed. If the key was found, its index is printed to the console.

The `sc_main` function is the simulation entry point. It instantiates an instance of the `Testbench` class and runs the simulation. The result of the simulation is printed to the console.

Note that this SystemC code uses the `sc_vector` and `sc_in`/`sc_out` classes to define input and output ports. These classes are available in the SystemC library and allow us to connect objects and ports in a modular and hierarchical manner.