  **Task**: Convert C++/C code to SystemC code

**Inputs and Outputs**:

* Inputs: A binary number (integer)
* Output: The decimal equivalent of the binary number

**Code Explanation**:

* Step 1: Declare and define a function named `binaryToDecimal` that takes an integer as input and returns an integer as output.
* Step 2: Declare and initialize two variables:
	+ `int num`: Integer input to the function
	+ `int dec_value`: Initialized to 0, updated in the function to return the decimal equivalent of `num`
* Step 3: `num` is assigned to `temp`
* Step 4: `temp` is divided by 10, and the last digit of the result is extracted and stored in `last_digit`
* Step 5: `num` is updated to the remainder of the division of `num` by 10
* Step 6: `dec_value` is updated by `last_digit` multiplied by `base`
* Step 7: `base` is updated to 2 times `base`
* Step 8: Steps 4-7 are repeated until `temp` is 0
* Step 9: `dec_value` is returned as the decimal equivalent of `num`
* Step 10: `num` is input to the function, and the decimal equivalent of `num` is printed using the `cout` statement in the `main` function.

**SystemC Snippet**:
```systemc
#include <systemc.h>
#include <cstdlib>

SC_MODULE(BinaryToDecimal) {
    sc_in<int> binary_in;
    sc_out<int> decimal_out;

    void binaryToDecimal() {
        int num = binary_in.read();
        int dec_value = 0;
        int temp = num;

        while (temp != 0) {
            int last_digit = temp % 10;
            temp = temp / 10;
            dec_value += last_digit * pow(2, i);
            i++;
        }

        decimal_out.write(dec_value);
    }
};

SC_MODULE(Main) {
    sc_in<int> binary_in;
    sc_out<int> decimal_out;

    BinaryToDecimal binaryToDecimal;

    void main() {
        binary_in.write(10101001);
        binaryToDecimal.binaryToDecimal();
    }
};
```