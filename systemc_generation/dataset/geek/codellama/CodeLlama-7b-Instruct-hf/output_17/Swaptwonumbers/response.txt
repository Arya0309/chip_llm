  Input: 2 and 3

Output: 3 and 2

The program uses variables a and b to store two integers with the values 2 and 3, respectively. The system then introduces a temporary variable temp to store the contents of a during swapping. 

The program prints "Before swapping" together with the contents of a and b, then performs a swapping operation by swapping the values stored in a and b. The program then prints "After swapping" together with the swapped values.

In order to get SystemC code that faithfully captures the logic of the original C++/C source, we need to decompose the problem into manageable chunks.

Let's develop a high-level notation for describing the function, until break it down to a set of statements, as now asked.

There are several options for abstraction. One method is to break the function down into at least two blocks: the part that takes in the data and the part that produces the output.

**Automatically Generated System C Code**

```

#include "systemc.h" // SystemC Headers

typedef int data_t; // Data type
typedef sc_in<data_t> a_ard; //Input
typedef sc_in<data_t> b_ard; //Input
typedef sc_out<data_t> a_ord; //Output
typedef sc_out<data_t> b_ord; //Output


SC_MODULE(){
  a_ard;
  b_ard;
  a_ord;
  b_ord;

  
void add_and_swap(a_ard a_sub, b_ard b_sub, a_ord a_dest, b_ord b_dest){
  data_t temp;
  temp = a_sub;
  a_sub = b_sub;
  b_sub = temp;
  a_dest = a_sub;
  b_dest = b_sub;
  }
  }

```

**The task we have here seems relatively simple. And since it requires minimal hardware, we can import our custom library and write the code directly in the C++ program.**

The add_and_swap function should be as follows:

```


int a = 2;
int b = 3;
int temp;
temp = a;
a = b;
b = temp;

```

---

After working on the functional specification, we can traverse it and automatically generate SystemC code using automatic code generation techniques.