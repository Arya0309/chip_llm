  C++ Program to Find the Sum of Even-Indexed Fibonacci Numbers

Inputs:

* n, a positive integer that determines the number of Fibonacci numbers to be summed

Outputs:

* The sum of all even-indexed Fibonacci numbers up to, and including, the n-th number.

P1. Initialize two integer arrays, fibo[0] and fibo[1], storing the 0^th and 1^th Fibonacci numbers, respectively.

P2. Use the formula to generate all subsequent Fibonacci numbers, arranging them to respect even-indexed alternatation.

P3. Initialize a result placeholder, sum, to 0. Shortcut the computation if n is 0 or 1, and store the result in sum.

P4. Conduct the alternative sum, accumulating the even-indexed Fibonacci numbers to sum.

P5. Return the sum of even-indexed Fibonacci numbers.


Here is the C++ source code with SystemC: 

```CPP
// C++ Program to find sum of even-indiced Fibonacci numbers
#include <systemc.h>
#include <bits/stdc++.h>
using namespace std;

// Computes value of first fibonacci numbers and 
//  stores the even-indexed sum
int calculateEvenSum(int n)
{
	if (n <= 0)
		return 0;

	int fibo[2 * n + 1];
	fibo[0] = 0, fibo[1] = 1;

	// Initialize result
	int sum = 0;

	// Add remaining terms
	for (int i = 2; i <= 2 * n; i++) 
	{
		fibo[i] = fibo[i - 1] + fibo[i - 2];

		// For even indices
		if (i % 2 == 0)
			sum += fibo[i];
	}

	// Return the alternating sum
	return sum;
}


// SystemC Module that drives the calculation
SC_MODULE(calculateEvenSum) {
    sc_in<int> n;
    sc_out<int> sum;

    // Constructor
    SC_CTOR(calculateEvenSum) {
    	sc_in<int> fibo_0 = 0;
    	sc_in<int> fibo_1 = 1;
    	sc_out<int> fibo_2;
    	sc_out<int> fibo_3;
    	sc_out<int> fibo_4;
    	
        // Call calculateEvenSum function
        SC_METHOD(calculateEvenSum);
        sensitive << n << sum; 
     }

     // Method to find the sum of even-indiced fibonacci numbers

     int calculateEvenSum() {

        // Compute the sum of the even-indiced fibonacci numbers
        int sum;
        for (int i = 2; i <= n; i++)
        {
                fibo.push_back(fibo[i - 1] + fibo[i - 2]);
                if (i % 2 == 0)
                {
                        sum += fibo[i];
                }
        }

        // Return the sum
        return sum;
     }

}

// Driver code
int main()
{

	// Get n
	int n = 8;

	// Find the even-indiced sum
	 cout << "Even indexed Fibonacci Sum upto " << n << " terms: " << calculateEvenSum(n) << endl;

	return 0;
}
```

In summary, this C++ legacy code computes the sum of even-indexed Fibonacci numbers using a custom method.
It takes a positive integer as input to determine the number of Fibonacci numbers to be summed.
The calculateEvenSum function calculates and returns the even-indexed sum, alternatingly adding each number starting with the 1^th and 2^nd terms; the function returns the sum.
In the SystemC mode, the module instantiate calculatesEvenSum method and the even-indexed sum is returned by the sc_out<int> sum output port.
For efficiency purposes, the module is processed in parallel.