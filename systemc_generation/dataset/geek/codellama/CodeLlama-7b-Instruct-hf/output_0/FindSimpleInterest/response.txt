  Inputs: P denotes the principal amount, R denotes the rate of interest, T denotes the number o
f years.
Outputs: The program calculates the interest, which is then assigned to the sum.

The driver code calls two functions.
The first function, described as a block-by-block explanation, calculates simple interest.
The second function, described as a block-by-block explanation, prints the result.

The first function, in the original C++/C code, reads the input values P, R, and T and then calculates the interest, which is assigned to SI. The code is syntactically correct and calculates interest as expected
The second function is syntactically correct but doesn't pass the input or output values to the systemC code, therefore produces no output

The C++/C code can be converted to SystemC by taking the inputs and outputs, which are used by C++/C functions and the program itself, and binding them to SystemC signals in a more linear fashion than is possible with the original C++/C code.



```
#include <systemc.h>

// Module that finds the SI
SC_MODULE(Simple_Interest) {
    sc_in<float> P;  // Input port for the principal
    sc_in<float> R;  // Input port for the rate of interest
    sc_in<float> T;  // Input port for the number of years
    sc_out<float> SI; // Output port for the interest

    // Constructor
    SC_CTOR(Simple_Interest) {
        // Process to perform addition
        SC_METHOD(calculate_SI);
        sensitive << P << R << T;
    }

    // 
    void calculate_SI() {
        SI.write(P.read() * T.read() * R.read() / 100);
    }
};

#include <systemc.h>

// Module that prints SI to the console
SC_MODULE(Print_SI) {
    sc_in<float> SI;  // Input port for the interest

    // Constructor
    SC_CTOR(Print_SI) {
        // Process to print SI
        SC_METHOD(print_SI);
        sensitive << SI;
    }

    // Method to print SI
    void print_SI() {
        cout << "Simple Interest = " << SI.read();
    }
};

```




The given C++ code to calculate the interest
The following SystemC code contains the IR code corresponding to each function. The driver code is provided at the end of the code. To calculate the simple interest, the first module computes the interest by multiplying the principal, time, and rate of interest and then divides the result by 100.

The second module adds a skeleton for the main function that invokes the interest calculation module and the printing module accordingly.