  C++/C Code:
```
// C++ program to find simple interest 
// for given principal amount, time 
// and rate of interest.
#include<iostream>
using namespace std;

// Driver code
int main()
{
	// We can change values here for
	// different inputs
	float P = 1, R = 1, T = 1;

	// Calculate simple interest 
	float SI = (P * T * R) / 100;

	// Print the resultant value of SI 
	cout << "Simple Interest = " << SI;

	return 0;
}
```

Explanation:

This C++/C program has an input of a principal amount (P), an input of a rate of interest (R), and an input of a time period (T). The program will output the calculated simple interest (SI).

The program first calculates the simple interest based on the principal amount, time period, and rate of interest. This is done by multiplying the principal amount, time period, and rate of interest and dividing by 100. The result is written to the variable SI.

The program then prints the resultant value of SI to the console.

SystemC Code:
```
#include <systemc.h>

// Module that calculates simple interest
SC_MODULE(SimpleInterest) {
    sc_in<float> P; // Input port for principal amount
    sc_in<float> R; // Input port for rate of interest
    sc_in<float> T; // Input port for time period
    sc_out<float> SI; // Output port for calculated simple interest

    SC_METHOD(calculateSI);
    sensitive << P, R, T;

    void calculateSI() {
        float SI = (P * T * R) / 100;
        SI.write(SI);
    }
};
```
This SystemC code has the same inputs and outputs as the C++/C code. It also has the same functionality, which is to calculate the simple interest based on the principal amount, time period, and rate of interest. However, the SystemC code can be synthesized and managed more easily in a hardware development environment, as it is a behavioral model that is defined in terms of interfaces and procedures.