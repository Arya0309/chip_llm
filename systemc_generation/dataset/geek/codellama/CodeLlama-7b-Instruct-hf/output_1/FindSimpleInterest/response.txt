  C++/C code to calculate simple interest:

The provided C++/C code calculates the simple interest for a given principal amount, time, and rate of interest. The inputs to the program are:

* P: The principal amount
* R: The rate of interest
* T: The time

The output of the program is:

* SI: The simple interest

The code consists of a main function that calculates the simple interest and prints it out. The main function performs the following operations:

* Declares variables P, R, and T as floats.
* Reads P, R, and T from the user.
* Calculates the simple interest as P \* T \* R / 100.
* Writes the result to the variable SI.
* Prints SI to the console.

The SystemC code is as follows:

#include <sc_lm.h>

// Module that calculates simple interest
SC_MODULE(SimpleInterest) {
    // Input ports
    sc_in<float> P;
    sc_in<float> R;
    sc_in<float> T;

    // Output ports
    sc_out<float> SI;

    // Constructor
    SC_CTOR(SimpleInterest) {
        // Process to calculate simple interest
        SC_METHOD(CalculateSI);
        sensitive << P << R << T;
    }

    // Method to calculate simple interest
    void CalculateSI() {
        SI.write((P.read() * T.read() * R.read()) / 100);
    }
};

// Test bench
SC_MODULE(TestBench) {
    // Instantiate the SimpleInterest module
    SimpleInterest si;

    // Define signals for the simple interest module
    sc_signal<float> P;
    sc_signal<float> R;
    sc_signal<float> T;
    sc_signal<float> SI;

    // Constructor
    SC_CTOR(TestBench) {
        // Initialize the signals
        P = 1;
        R = 1;
        T = 1;

        // Connect the signals
        si.P(P);
        si.R(R);
        si.T(T);
        si.SI(SI);
    }

    // Simulation loop
    void run() {
        // Called once before the simulation starts
        D();
        int principal = P;
        int rate = R;
        int time = T;

        // Called for every time step
        for (int i = 0; i < 10000; i++) {
            // Increment time
            time += 1;

            // Calculate simple interest
            float SI = (principal * rate * time) / 100;

            // Print the result
            printf("Simple interest after %d time steps: %f\n", i, SI);
        }

        // Called once after the simulation finishes
        E();
    }
};

int sc_main(int argc, char* argv[]) {
    // Create the ScModule
    TestBench tb;

    // Start the simulation
    sc_start();

    return 0;
}