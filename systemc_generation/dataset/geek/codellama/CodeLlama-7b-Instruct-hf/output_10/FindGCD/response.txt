  Input: This C++ program finds the GCD of two numbers a and b using simple arithmetic.

Output: Prints the GCD of a and b on the console.

gcd(int a, int b) {
  // Find Minimum of a and b
  int res = min(a, b);

  // Testing divisiblity with all numbers starting from
  // min(a, b) to 1
  
  while (res > 1) {

    // If any number divide both a and b, so we
    // got the answer
    if (a % res == 0 && b % res == 0)
        break;
    res--;
  }
}

Main()

Inputs: 
int a = 12
int b = 16

Output:
gcd(a, b);

If any number in the range of 1 to a and b) divide a and b , then that number is the common divisor.
The function calculates the minimum between the two input values. The for loop starts from 1 to the minimum value. It increments the variable to see if it exists as the divisor for both the inputs and if yes, it breaks.
If the variable exceeds the minimum value, the loop stops and the residue is returned to be the gcd.

SystemC Code to implement the logic of the program:

// Accepts two ints and produces the gcd
SC_MODULE(gcd)
{
    // Inputs:
    sc_in<int> a;
    sc_in<int> b;

    // Output:
    sc_out<int> gcd_result;

    // Process to generate gcd:
    SC_METHOD(Get_gcd)
        {
            // Find Minimum of a and b
            int res = std::min(a.read(), b.read());

            // Find the GCD using the Euclid's algorithm
            // Testing divisibility with all numbers starting from
            // min(a, b) to 1

            while (res > 1)
{
                    // If any number divides both a and b, so we
                    // got the answer
                    if ((a % res == 0) && (b % res == 0))
                        break;
                    res--;
                }
                gcd_result.write(res);
        }
};

#include <int>

#include "gcd.h"
#include <systemc>

int sc_main() {
sc_in<int> a;
sc_in<int> b;
sc_out<int> gcd_result;
gcd gcd_obj;

// Link the ports
gcd_obj.a(a);
gcd_obj.b(b);
gcd_obj.gcd_result(gcd_result);

gcd_obj.
int main();
    int a = 12, b = 16;
  
    // Finding gcd of two numbers a and b


    cout << gcd_obj.read();
    return 0;
}

Each line represents an action that the module will carry out. In this case, each line is a condition to check. If that condition is false, the code moves on to the next iteration of the loop. If it is true, the code will stop. The value of res will decide.

