  C++ and SystemC are two different languages that share many similarities. However, there are significant differences in their syntax, semantics, libraries, and applications. A nice overview of the key principles of SystemC is as follows:

The code is an example of the "Selection Sort" in C++ programming, which is a sorting algorithm used on arrays for sorting lists in an ascending order. Whatever algorithm or handwritten code you write, you can recreate that same information in a more logical, modular way in SystemC's extended structure, signalling, and dataflow. 
The C++ code will not define any classes or functions, nor will it include any external libraries. Hence all functionalities will be implemented using the native C++ language components.
Creating a SystemC program is a straightforward process, and the modules and ports serve as an easy-to-understand term for the functional entities. Since SystemC differs from C++, the SystemC code must manually be written to carry out the exact same behavior as the native code. Otherwise, all errors are printed to the command prompt. Sometimes SystemC will perform a logical operation not available in C++ and is documented on its documentation.
Your SystemC code must, consequently, follow the same data flow and consistent signal naming present in the input C++ code. With these requirements captured, you can put the seeds in motion of your light, laborious, silent plow traveling the integrity string.