  Input(s): binary_in (an integer entered into system)

Output(s): decimal_out (an integer that reflects the binary_in value converted into a decimal)

The binary to decimal conversion code reads an integral input from a user and outputs the equivalent non-negative integer (whole number). 
It utilizes a while loop that repeatedly divides the input number by two while also keeping track of the highest power of two that can be factored into the input, and using its product as the next power of two. The while loop exits when 0 is halfed by its present value of a. It is essential to do this because each non-0 binary number has a base-2 logarithm whose ceiling is its highest power of two smaller than it).

The conversion method addresses the input value, creates a member variable, base, to hold the current value of the power of two, and another variable temp that will hold the unchanged value of a operated upon during the while loop, which stores the result of the current cycle of the loop, divides it temporarily by ten to isolate the fractional or decimal part, and casts the result to an integer. Because this kind of process can yield only 1, 2, 4, 8, or 0 ( Banker's rounding ), the program then useses the base variable to raise it to its current value ( exponentiation).

The last digit variable is calculated by remaindering the entire value of the input by the rounding result (a temporary value), dividing it by ten to isolate its fractional or decimal component, and casting the rest to int. This digit is then multiplied by the corresponding place value (2^firstplace, 2^0 , or 2^1), and the result is added to the member variable dec_valuedec_value used to track the binary number that is currently being converted to decimal.

When the loop exits, the program returns the converted decimal equivalence via the decimal_out output.