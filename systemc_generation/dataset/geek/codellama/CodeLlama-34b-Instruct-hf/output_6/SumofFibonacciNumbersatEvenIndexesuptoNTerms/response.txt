  **Inputs:**

* `n`: a positive integer specifying the number of terms to consider in the Fibonacci sequence.

**Outputs:**

* `sum`: the sum of all even-indexed Fibonacci numbers up to the `n`-th term.

**Code Summary:**

The provided C++/C code computes the value of the first `2*n+1` Fibonacci numbers and stores the even-indexed sum. The main function takes an input `n` and passes it to the `calculateEvenSum` function. The `calculateEvenSum` function initializes an array `fibo` of size `2*n+1` and assigns the first two elements to 0 and 1. It then computes the values of the remaining terms using the recurrence relation `fibo[i]=fibo[i-1]+fibo[i-2]` and stores the result in `fibo[i]`. For each even-indexed term `i`, the function adds the value of `fibo[i]` to a running sum `sum`. Finally, the function returns the value of `sum`.

**SystemC Code:**

Here's a SystemC code snippet that preserves the logic of the provided C++/C code:
```c++
#include <systemc.h>

// Module that finds the sum of even-indexed Fibonacci numbers
SC_MODULE(FibonacciSum)
{
    sc_in<int> n;  // Input port for the number of terms
    sc_out<int> sum;  // Output port for the sum

    // Constructor
    SC_CTOR(FibonacciSum)
    {
        // Process to find the sum
        SC_METHOD(compute);
        sensitive << n;
    }

    // Method to compute the sum
    void compute()
    {
        int fibo[2 * n + 1];
        fibo[0] = 0;
        fibo[1] = 1;

        int sum = 0;
        for (int i = 2; i <= 2 * n; i++)
        {
            fibo[i] = fibo[i - 1] + fibo[i - 2];
            if (i % 2 == 0)
            {
                sum += fibo[i];
            }
        }
        sum.write(sum);
    }
};
```
In this code, we define a SystemC module called `FibonacciSum` that has two ports: `n` (input) and `sum` (output). The module's constructor takes the `n` input and initializes the `fibo` and `sum` variables. The `compute` method performs the main computation by computing the Fibonacci sequence and storing the even-indexed sum in `sum`. Finally, the method writes the value of `sum` to the `sum` output port.