  C++/C Code:
```
#include <iostream>
using namespace std;

int main()
{
    int n = 153;
    int temp = n;
    int p = 0;

    while (n > 0) {
        int rem = n % 10;
        p = (p) + (rem * rem * rem);
        n = n / 10;
    }

    if (temp == p) {
        cout << ("Yes. It is Armstrong No.");
    }
    else {
        cout << ("No. It is not an Armstrong No.");
    }
    return 0;
}
```
**Inputs**:

* `num_in`: An integer value to be checked for Armstrong number.

**Outputs**:

* `is_armstrong`: A boolean value indicating whether the input number is an Armstrong number or not.

**Major Line-by-Line Explanation**:

1. `int n = 153;`: The input value is declared and initialized to 153.
2. `int temp = n;`: A temporary variable `temp` is declared and initialized to the input value `n`.
3. `int p = 0;`: A variable `p` is declared and initialized to 0.
4. `while (n > 0) {...}`: A while loop is entered if the input value `n` is greater than 0.
5. `int rem = n % 10;`: The remainder of `n` when divided by 10 is calculated and stored in `rem`.
6. `p = (p) + (rem * rem * rem);`: The cube of `rem` is calculated and added to `p`.
7. `n = n / 10;`: The input value `n` is divided by 10 and the result is stored back in `n`.
8. `if (temp == p) {...}`: An if statement is entered if the temporary value `temp` is equal to the final value of `p`.
9. `cout << ("Yes. It is Armstrong No.");`: The message "Yes. It is Armstrong No." is printed if the input value is an Armstrong number.
10. `else {...}`: An else statement is entered if the temporary value `temp` is not equal to the final value of `p`.
11. `cout << ("No. It is not an Armstrong No.");`: The message "No. It is not an Armstrong No." is printed if the input value is not an Armstrong number.
12. `return 0;`: The function returns 0 to indicate successful execution.

**SystemC Code**:
```
#include <systemc.h>

// Module to check if an integer is an Armstrong number
SC_MODULE(ArmstrongChecker) {
    sc_in<int> num_in;  // Input port for the integer to be checked
    sc_out<bool> is_armstrong; // Output port to indicate whether the integer is an Armstrong number

    // Constructor
    SC_CTOR(ArmstrongChecker) {
        // Process to check if the integer is an Armstrong number
        SC_METHOD(checkArmstrong);
        sensitive << num_in;
    }

    // Method to check if the integer is an Armstrong number
    void checkArmstrong() {
        int n = num_in.read(); // Read the input integer
        int temp = n; // Save a copy of the input integer
        int p = 0; // Initialize the power sum to 0

        // Calculate the power sum of the input integer
        while (n > 0) {
            int rem = n % 10;
            p += (rem * rem * rem);
            n /= 10;
        }

        // Check if the power sum is equal to the input integer
        if (temp == p) {
            is_armstrong.write(true); // The input integer is an Armstrong number
        } else {
            is_armstrong.write(false); // The input integer is not an Armstrong number
        }
    }
};
```
The SystemC code defines a module `ArmstrongChecker` that takes in an input integer and outputs a boolean value indicating whether the input integer is an Armstrong number. The module contains a method `checkArmstrong` that reads the input integer, calculates the power sum, and compares it to the input integer to determine whether it is an Armstrong number. The `is_armstrong` output port is written to with the result of the check. The `sensitive` keyword is used to indicate that the `checkArmstrong` method is sensitive to changes in the `num_in` input port.