  C++ Code:
```
// C++ code to swap the element of first 
// and last row and display the result 
#include <iostream> 
using namespace std; 

#define n 4 

void interchangeFirstLast(int m[][n]) 
{ 
		int rows = n; 
		
		// Swapping of element between first 
		// and last rows 
		for (int i = 0; i < n; i++) 
		{ 
			int t = m[0][i]; 
			m[0][i] = m[rows - 1][i]; 
			m[rows - 1][i] = t; 
		} 
} 

// Driver code 
int main() 
{ 
	// input in the array 
	int m[n][n] = {{8, 9, 7, 6}, 
				{4, 7, 6, 5}, 
				{3, 2, 1, 8}, 
				{9, 9, 7, 7}}; 
				
	interchangeFirstLast(m); 
	
	// Printing the interchanged matrix 
	for (int i = 0; i < n; i++) 
	{ 
		for (int j = 0; j < n; j++) 
			cout << m[i][j] << " "; 
		cout << endl; 
	} 
} 

// This code is contributed by Anant Agarwal. 

```
Line-by-Line Explanation:

1. The first line includes the necessary header file to use the standard input/output functions.
2. The next line uses the "using namespace std" directive to avoid having to type "std::" before each standard library function.
3. The line "#define n 4" defines a macro named "n" to be equal to the integer value 4.
4. The "interchangeFirstLast" function takes an integer matrix "m" as input, and its first line defines a local variable "rows" to be equal to the number of rows in the matrix (which is also equal to the value of "n").
5. The next three lines of code loop through each row of the matrix (except for the first and last rows, which are swapped), and swap the element at index "i" in the first row with the element at index "i" in the last row.
6. The "main" function initializes an integer matrix "m" to be a 4x4 matrix with the specified values.
7. The next line calls the "interchangeFirstLast" function to swap the first and last rows of the matrix.
8. The final loop of the code prints the resulting matrix to the console.

SystemC Code:
```
#include <systemc.h>

// Module for swapping the first and last rows of a matrix
SC_MODULE(RowSwapper) {
    sc_in<int> in[n]; // Input port for the matrix
    sc_out<int> out[n]; // Output port for the matrix

    // Constructor
    SC_CTOR(RowSwapper) {
        // Process to perform row swapping
        SC_METHOD(rowSwap);
        sensitive << in;
    }

    // Method to swap the first and last rows of the matrix
    void rowSwap() {
        int rows = in[0].size();
        int temp = in[0];
        out[0] = in[rows - 1];
        out[rows - 1] = temp;
    }
};

// Testbench code to drive the RowSwapper module

SC_MODULE(tb) {
    // Initialize the input matrix
    sc_in<int> in[n];
    sc_out<int> out[n];
    RowSwapper rs("rs");

    SC_METHOD(doTest) {
        int m[n][n] = {{8, 9, 7, 6},
                       {4, 7, 6, 5},
                       {3, 2, 1, 8},
                       {9, 9, 7, 7}};
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                in[i][j] = m[i][j];
            }
        }
        rs.in.write(in);
        rs.run();
        out = rs.out.read();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                std::cout << out[i][j] << " ";
            }
            std::cout << std::endl;
        }
    }
};

int sc_main(int argc, char* argv[]) {
    tb t("tb");
    sc_start();
    return 0;
}
```
The SystemC code above defines a module named "RowSwapper" that has an input port for a 4x4 matrix and an output port for the same matrix. The module contains a process named "rowSwap" that performs the row swapping operation. The testbench code initializes the input matrix, calls the "rowSwap" process, and then prints the resulting matrix to the console.