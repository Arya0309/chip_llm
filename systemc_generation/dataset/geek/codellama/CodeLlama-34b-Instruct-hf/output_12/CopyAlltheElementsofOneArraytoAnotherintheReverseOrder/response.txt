  Inputs:

* `original_arr`: An array of integers to be copied in reverse order.
* `len`: The length of the original array.

Outputs:

* `copied_arr`: The reversed copy of the original array.

**Line-by-line explanation:**

1. `#include <stdio.h>`: Includes the standard input/output library.
2. `void printArray(int arr[], int len)`: A function to print an array of integers. It takes an array and its length as input and prints each element in the array.
3. `int main() { ... }`: The main function that copies the contents of one array into another in the reverse order.
4. `int original_arr[] = {1, 2, 3, 4, 5};`: Declares and initializes an array of integers with the values 1, 2, 3, 4, and 5.
5. `int len = sizeof(original_arr)/sizeof(original_arr[0]);`: Calculates the length of the original array by dividing the size of the array by the size of the first element in the array (i.e., the size of an integer).
6. `int copied_arr[len], i, j;`: Declares and initializes an array `copied_arr` with the same length as the original array, and variables `i` and `j` for the loop indices.
7. `// Copy the elements of the array // in the copied_arr in Reverse Order`: A comment describing the operation that will be performed.
8. `for (i = 0; i < len; i++)`: A for loop that iterates over the elements of the original array. The loop starts at the first element (i = 0) and goes until the last element (i < len).
9. `copied_arr[i] = original_arr[len - i - 1]`: The loop body that copies the elements of the original array into the copied array in reverse order. For example, when i = 0, the element at index 0 in the original array (1) is copied into the element at index 4 in the copied array, and so on.
10. `// Print the original_arr`: A comment describing the operation that will be performed.
11. `printf(" Original array: ")`: Prints the string "Original array: " to the console.
12. `printArray(original_arr, len)`: Calls the `printArray` function to print the original array.
13. `// Print the copied array`: A comment describing the operation that will be performed.
14. `printf(" Resultant array: ")`: Prints the string "Resultant array: " to the console.
15. `printArray(copied_arr, len)`: Calls the `printArray` function to print the copied array.
16. `return 0`: Returns the value 0 to indicate that the program executed successfully.

**SystemC Code:**
```c++
#include <systemc.h>

SC_MODULE(ReverseCopy) {
    sc_in<int> original_arr[8];
    sc_out<int> copied_arr[8];

    SC_CTOR(ReverseCopy) {
        SC_METHOD(reverseCopy);
        sensitive << original_arr;
    }

    void reverseCopy() {
        for (int i = 0; i < 8; i++) {
            copied_arr[i].write(original_arr[7 - i].read());
        }
    }
};
```
In this SystemC code, we've created a module called `ReverseCopy` that takes an input array of 8 integers and returns an output array of 8 integers. The module has one method called `reverseCopy` that performs the reversal of the input array and writes the result to the output array.

The `reverseCopy` method iterates over the elements of the input array in reverse order using a for loop. For each element, it reads the value from the input array and writes it to the corresponding index in the output array.

Note that we've used the `sc_in` and `sc_out` ports to read and write the values from and to the arrays, respectively. These ports are sensitive to the clock signal `sc_in<bool> clk`, which is provided as input to the module. This ensures that the memory accesses are synchronized with the clock signal.