  **Input**:

* An NxN square matrix of integers

**Output**:

* The sum of the elements on the principal diagonal and the secondary diagonal of the matrix

**Line-by-Line Summary**:

* The first line includes the necessary header files and defines the maximum size of the matrix as 100x100.
* The `printDiagonalSums` function takes a matrix and its size as inputs and calculates the sum of the elements on the principal and secondary diagonals.
* The function declares two variables `principal` and `secondary` to store the sums.
* The loop iterates through the rows and columns of the matrix, and for each iteration, it checks if the indices `i` and `j` are on the principal or secondary diagonal. If they are, it adds the element to the corresponding sum.
* The function displays the sums of the diagonal elements.
* The `main` function creates a test matrix and calls the `printDiagonalSums` function.

**SystemC Code**:
```
#include <systemc.h>

SC_MODULE(DiagonalSums) {
    sc_in<int> mat[SIZE][SIZE]; // Input matrix
    sc_out<int> principal; // Output sum of principal diagonal
    sc_out<int> secondary; // Output sum of secondary diagonal

    // Constructor
    SC_CTOR(DiagonalSums) {
        SC_THREAD(computeSums);
        sensitive << mat;
    }

    // Function to compute the sums of the diagonals
    void computeSums() {
        int principal = 0, secondary = 0;
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {

                // Check for principal diagonal
                if (i == j) {
                    principal += mat[i][j];
                }

                // Check for secondary diagonal
                if ((i + j) == (SIZE - 1)) {
                    secondary += mat[i][j];
                }
            }
        }
        principal.write(principal);
        secondary.write(secondary);
    }
};
```

Note that the SystemC code uses a single thread to compute the sums of the diagonals, instead of using separate threads for the principal and secondary diagonals as in the original C++/C code. This is because SystemC is a parallel and concurrent language, and using multiple threads for the same task can be more efficient in terms of performance and area utilization.