  C++/C Code:
```
#include<bits/stdc++.h>
using namespace std;

void swap(int *xp, int *yp) 
{ 
	int temp = *xp; 
	*xp = *yp; 
	*yp = temp; 
} 
void sortRowWise(int m[][4], int r, int c)
{
	for (int i = 0; i < r; i++) 
	{
		for (int j = 0; j < c; j++) 
		{
			for (int k = 0; k < c - j - 1; k++) 
			{
				if (m[i][k] > m[i][k + 1]) 
				{
					swap(m[i][k], m[i][k + 1]);
				}
			}
		}
	}

	for (int i = 0; i < r; i++) 
	{
		for (int j = 0; j < c; j++)
			cout << m[i][j] << " ";
		cout << endl;
	}
}

int main()
{
	int m[][4] = {{9, 8, 7, 1},
				{7, 3, 0, 2},
				{9, 5, 3, 2},
				{6, 3, 1, 2}};
	int c = sizeof(m[0]) / sizeof(m[0][0]);
	int r = sizeof(m) / sizeof(m[0]);
	sortRowWise(m, r, c);
	return 0;
}
```
Inputs:

* `m[][]`: a 2D matrix of size `r x c`
* `r`: number of rows in matrix
* `c`: number of columns in matrix

Outputs:

* None (function only prints the sorted matrix)

Explanation:

This C++ code is a sorting function that takes in a 2D matrix and sorts it row-wise in ascending order. The function first loops through each row of the matrix and then within each row, it loops through each column, comparing adjacent elements and swapping them if they are in the wrong order. Finally, the sorted matrix is printed to the console.

SystemC Code:
```
#include <systemc.h>

SC_MODULE(RowWiseSort) {
	sc_in<bool> clk;
	sc_in<bool> start;
	sc_out<bool> done;
	sc_in<int> m[4];
	sc_in<int> c;
	sc_in<int> r;

	SC_CTOR(RowWiseSort) {
		SC_METHOD(sort);
		sensitive << clk.posedge;
	}

	void sort() {
		for (int i = 0; i < r; i++) {
			for (int j = 0; j < c; j++) {
				for (int k = 0; k < c - j - 1; k++) {
					if (m[i][k] > m[i][k + 1]) {
						int temp = m[i][k];
						m[i][k] = m[i][k + 1];
						m[i][k + 1] = temp;
					}
				}
			}
		}
		done.write(true);
	}
};
```
This SystemC module takes in the same inputs as the C++ code (`m[][]`, `c`, `r`), as well as the clock signal (`clk`) and start signal (`start`). The `sort()` method implements the same row-wise sorting algorithm as the C++ code, but it uses the SystemC signal primitives `m[][]`, `c`, and `r` instead of the C++ arrays. The `done` signal is set to `true` when the sorting algorithm is finished.

Note that this SystemC code only sorts the matrix in row-wise order, it does not print the sorted matrix to the console like the C++ code.