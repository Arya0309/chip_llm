  Inputs:

* `n`: the number of Fibonacci numbers to sum

Outputs:

* `sum`: the sum of the even-indexed Fibonacci numbers up to `n` terms

Line-by-Line Explanation:

1. The code defines a function `calculateEvenSum` that takes an integer `n` as input and returns the sum of the even-indexed Fibonacci numbers up to `n` terms.
2. The function first checks if `n` is less than or equal to 0. If so, it returns 0.
3. It then defines an array `fibo` of size `2 * n + 1` and initializes its first two elements to 0 and 1, respectively.
4. It initializes a variable `sum` to 0.
5. It then iterates over the remaining elements of the `fibo` array and computes the Fibonacci numbers iteratively using the formula `fibo[i] = fibo[i - 1] + fibo[i - 2]`.
6. For each even-indexed term, it adds the term to the `sum` variable.
7. Finally, it returns the `sum` variable.

Converted SystemC Code:
```
#include <systemc.h>

SC_MODULE(EvenFibonacciSum) {
    sc_in<int> n;
    sc_out<int> sum;

    SC_CTOR(EvenFibonacciSum) {
        SC_METHOD(calculateEvenSum);
        sensitive << n;
    }

    void calculateEvenSum() {
        int fibo[2 * n + 1];
        fibo[0] = 0;
        fibo[1] = 1;
        int sum = 0;
        for (int i = 2; i <= 2 * n; i++) {
            fibo[i] = fibo[i - 1] + fibo[i - 2];
            if (i % 2 == 0) {
                sum += fibo[i];
            }
        }
        sum.write(sum);
    }
};
```
Note that the SystemC code uses the same variable names and flow as the original C++/C code, but with the input and output signals defined in the SystemC module. The `calculateEvenSum` method is sensitive to changes in the `n` input signal, and updates the `sum` output signal accordingly.