  Inputs:

* `matrix`: a 2D array of integers
* `SIZE`: a constant integer representing the size of the matrix

Outputs:

* `principal`: the sum of the principal diagonal of the matrix
* `secondary`: the sum of the secondary diagonal of the matrix

**Line-by-Line Explanation**

1. The program starts by including the `bits/stdc++.h` header file, which includes various standard C++ headers.
2. The `using namespace std;` statement allows us to use the functions and types defined in the `std` namespace without having to qualify them with `std::`.
3. The `MAX` constant is defined with a value of 100.
4. The `printDiagonalSums` function is defined, which takes a 2D array of integers and its size as inputs.
5. The function declares and initializes two local variables, `principal` and `secondary`, both of which are set to 0.
6. The function then enters a nested loop, iterating over the rows and columns of the input matrix.
7. Inside the loop, the function checks whether the row index `i` is equal to the column index `j`. If so, it adds the value at position `[i][j]` in the matrix to the `principal` sum.
8. Next, the function checks whether the sum of the row index `i` and the column index `j` is equal to `n - 1`. If so, it adds the value at position `[i][j]` in the matrix to the `secondary` sum.
9. After the nested loop completes, the function prints the `principal` and `secondary` sums to the console.
10. The `main` function is defined, which declares a 4x4 matrix of integers and uses the `printDiagonalSums` function to print its principal and secondary diagonal sums.

**SystemC Code**
```sc_int matrix[SIZE];
sc_out<int> principal;
sc_out<int> secondary;
```

The SystemC code declares three signals: `matrix`, which is an array of integers with a size of `SIZE`; `principal`, which is an output signal for the principal diagonal sum; and `secondary`, which is an output signal for the secondary diagonal sum.

```cpp
SC_MODULE(PrincipalDiagonalSums) {
    sc_in<int> matrix[SIZE];
    sc_out<int> principal;
    sc_out<int> secondary;

    void computeDiagonalSums() {
        int n = matrix.size();
        int principal = 0;
        int secondary = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j) {
                    principal += matrix[i][j];
                }

                if ((i + j) == (n - 1)) {
                    secondary += matrix[i][j];
                }
            }
        }

        principal.write(principal);
        secondary.write(secondary);
    }
};
```

The SystemC module `PrincipalDiagonalSums` is defined, which takes a 2D array of integers `matrix` as input and outputs the principal and secondary diagonal sums to the `principal` and `secondary` signals, respectively.

The `computeDiagonalSums` method is defined, which computes the principal and secondary diagonal sums by iterating over the rows and columns of the matrix using nested loops. Inside the loops, the function checks whether the row index `i` is equal to the column index `j` or the sum of the row index `i` and the column index `j` is equal to `n - 1`. If so, it adds the value at position `[i][j]` in the matrix to the corresponding sum.

Finally, the `computeDiagonalSums` method writes the principal and secondary diagonal sums to the `principal` and `secondary` signals using the `write` method.