  **Inputs:**

* `P`: Principal amount
* `R`: Rate of interest
* `T`: Time

**Output:**

* `SI`: Simple interest

**C++/C Code Summary:**

1. The program starts by including the `iostream` header file, which provides input and output capabilities.
2. The `using namespace std;` statement allows us to use the standard input and output streams without having to specify the namespace.
3. The next line declares a function named `main`, which is the entry point of the program.
4. Inside the `main` function, we declare three variables: `P`, `R`, and `T`, which correspond to the inputs of the program.
5. The next line calculates the simple interest using the formula `SI = (P * T * R) / 100`.
6. The `cout` statement prints the result of the calculation to the standard output stream.
7. The `return 0;` statement indicates that the program has successfully ended.

**SystemC Code:**
```scss
SC_MODULE(SimpleInterest) {
    sc_in<float> P;   // Input port for principal amount
    sc_in<float> R;   // Input port for rate of interest
    sc_in<float> T;   // Input port for time
    sc_out<float> SI; // Output port for simple interest

    // Constructor
    SC_CTOR(SimpleInterest) {
        // Process to calculate simple interest
        SC_METHOD(calculate);
        sensitive << P << R << T;
    }

    // Method to calculate simple interest
    void calculate() {
        SI.write((P.read() * T.read() * R.read()) / 100);
    }
};
```
In this SystemC code, we define a module named `SimpleInterest` that has three input ports: `P`, `R`, and `T` for the principal amount, rate of interest, and time respectively. The module also has one output port called `SI` for the simple interest.

Inside the constructor, we define a process called `calculate` that calculates the simple interest using the formula `SI = (P * T * R) / 100`. The process is triggered whenever any of the input ports `P`, `R`, or `T` changes. Once the calculation is done, the result is written to the output port `SI`.