  Inputs:

* `R`: The number of rows in the matrix.
* `C`: The number of columns in the matrix.
* `mat`: A two-dimensional integer array representing the matrix to be rotated.

Outputs:

* The rotated matrix.

Line-by-line summary:

1. The code defines a function `rotatematrix` that takes an integer matrix `mat`, the number of rows `m`, and the number of columns `n` as input. The function rotates the matrix 90 degrees clockwise and returns the rotated matrix.
2. The function declares two integer variables `row` and `col` to track the starting row and column indices. It also declares an integer variable `prev` to store the first element of the next row, which will be assigned to the first element of the current row.
3. The function enters a while loop that will execute until the row index reaches the end of the matrix (i.e., `row` is equal to `m`) or the column index reaches the end of the matrix (i.e., `col` is equal to `n`).
4. Inside the loop, the function checks if the next row or next column is available. If either is unavailable, the function breaks out of the loop.
5. Otherwise, the function stores the first element of the next row in `prev` and replaces it with the first element of the current row.
6. The function then moves the elements of the first row from the remaining rows by replacing them with their previous values.
7. The function then moves the elements of the last column from the remaining columns by replacing them with their previous values.
8. The function then moves the elements of the last row from the remaining rows by replacing them with their previous values.
9. The function then moves the elements of the first column from the remaining columns by replacing them with their previous values.
10. The function updates the row and column indices and repeats the process until the end of the matrix is reached.
11. Finally, the function prints the rotated matrix.

SystemC code:
```
#include <systemc.h>

// Module to rotate a matrix
SC_MODULE(RotateMatrix) {
    // Inputs
    sc_in<int> in[SIZE]; // Matrix input
    sc_in<int> row; // Row index
    sc_in<int> col; // Column index

    // Outputs
    sc_out<int> out; // Rotated matrix

    // Constructor
    SC_CTOR(RotateMatrix) {
        // Process to perform rotation
        SC_METHOD(rotate);
        sensitive << in << row << col;
    }

    // Method to rotate the matrix
    void rotate() {
        int m = row.read(); // Number of rows
        int n = col.read(); // Number of columns
        int mat[R][C]; // Matrix to be rotated
        int prev; // Store the first element of the next row
        int curr; // Store the current element

        // Initialize the matrix
        for (int i = 0; i < R; i++) {
            for (int j = 0; j < C; j++) {
                mat[i][j] = in[i][j].read();
            }
        }

        // Enter the rotation loop
        while (row < m && col < n) {
            if (row + 1 == m || col + 1 == n) {
                break;
            }

            // Store the first element of the next row
            prev = mat[row + 1][col];

            // Move elements of the first row from remaining rows
            for (int i = col; i < n; i++) {
                curr = mat[row][i];
                mat[row][i] = prev;
                prev = curr;
            }
            row++;

            // Move elements of the last column from remaining columns
            for (int i = row; i < m; i++) {
                curr = mat[i][n - 1];
                mat[i][n - 1] = prev;
                prev = curr;
            }
            n--;

            // Move elements of the last row from remaining rows
            if (row < m) {
                for (int i = n - 1; i >= col; i--) {
                    curr = mat[m - 1][i];
                    mat[m - 1][i] = prev;
                    prev = curr;
                }
            }
            m--;

            // Move elements of the first column from remaining columns
            if (col < n) {
                for (int i = m - 1; i >= row; i--) {
                    curr = mat[i][col];
                    mat[i][col] = prev;
                    prev = curr;
                }
            }
            col++;
        }

        // Print the rotated matrix
        for (int i = 0; i < R; i++) {
            for (int j = 0; j < C; j++) {
                out.write(mat[i][j]);
            }
        }
    }
};
```
Note that the SystemC code uses the same inputs and outputs as the original C++/C code, and the logic of the `rotate` method faithfully captures the behavior of the `rotatematrix` function.