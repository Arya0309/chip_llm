  **Inputs:**

* `octal_input`: An 8-bit integer representing an octal number.

**Outputs:**

* `decimal_output`: A 32-bit integer representing the decimal equivalent of the input octal number.

**Summary:**
The provided C++/C code implements a function `octalToDecimal` that takes an 8-bit integer representing an octal number and returns the equivalent decimal number. The function uses a loop to iterate through each digit of the octal number, extracts the last digit, and multiplies it with the appropriate power of 8 before adding it to the decimal value.

The main function calls the `octalToDecimal` function with the input integer `num` and prints the result to the console.

**SystemC Code:**
```scss
#include <systemc>

SC_MODULE(OctalToDecimal) {
  sc_in<int> octal_input;
  sc_out<int> decimal_output;

  // Function to convert octal to decimal
  void octalToDecimal() {
    int num = octal_input.read();
    int dec_value = 0;
    int base = 1;

    while (num) {
      int last_digit = num % 10;
      num = num / 10;
      dec_value += last_digit * base;
      base = base * 8;
    }

    decimal_output.write(dec_value);
  }
};
```
**Explanation:**
The SystemC code defines a module `OctalToDecimal` with two ports: `octal_input` and `decimal_output`. The `octalToDecimal` function reads the `octal_input` port, converts it to decimal, and writes the result to the `decimal_output` port. The function uses a loop to iterate through each digit of the octal number and multiplies the last digit with the appropriate power of 8 before adding it to the decimal value.

The `octalToDecimal` function is called automatically when the `OctalToDecimal` module is instantiated, and it continues to run until the end of the simulation.

The provided SystemC code faithfully captures the logic of the original C++/C code, while also incorporating the input and output signals defined above for proper testbench integration.