  **Inputs**

* A 2D integer array `mat` of size `MAX x MAX` (maximum size)
* An integer `n` representing the actual size of the array (number of rows and columns)

**Outputs**

* Two integer variables `principal` and `secondary`, which contain the sums of the principal and secondary diagonals of the input array `mat`

**Summary**

The provided C++ code defines a function `printDiagonalSums` that takes an integer matrix `mat` and its number of rows/columns `n` as input and calculates the sums of the principal and secondary diagonals of the matrix. The function returns nothing, but prints the resulting sums to the standard output.

The function first initializes two integer variables `principal` and `secondary` to zero. Then, it iterates over the rows and columns of the matrix using nested for-loops, and for each element `mat[i][j]`, it checks whether it is located on the principal or secondary diagonal. If it is on the principal diagonal (`i == j`), the value is added to the `principal` variable. If it is on the secondary diagonal (`(i + j) == (n - 1)`), the value is added to the `secondary` variable. Finally, the values of `principal` and `secondary` are printed to the standard output.

**SystemC Code**

Here is a SystemC code snippet that captures the logic of the provided C++ code:
```cpp
#include <systemc.h>

SC_MODULE(DiagonalSums) {
    sc_in<int> matrix[SIZE][SIZE];
    sc_out<int> principal;
    sc_out<int> secondary;

    void calculate_diagonal_sums() {
        int principal = 0;
        int secondary = 0;

        for (int i = 0; i < SIZE; ++i) {
            for (int j = 0; j < SIZE; ++j) {
                if (i == j) {
                    principal += matrix[i][j];
                }
                else if ((i + j) == (SIZE - 1)) {
                    secondary += matrix[i][j];
                }
            }
        }

        principal.write(principal);
        secondary.write(secondary);
    }
};
```
In this code, the `DiagonalSums` module defines two input ports `matrix` and `SIZE`, and two output ports `principal` and `secondary`. The `calculate_diagonal_sums` method performs the required logic by iterating over the rows and columns of the input matrix and calculating the sums of the principal and secondary diagonals. The resulting sums are written to the output ports using the `write` method.

Note that the SystemC code uses the same naming conventions and variable types as the original C++ code for easy reference and understanding.