  Inputs:

* P: principal amount
* R: rate of interest
* T: time

Outputs:

* SI: simple interest

Line-by-line natural language summary:

1. The code begins by defining the main function.
2. The principal amount (P), rate of interest (R), and time (T) are declared and initialized to 1.
3. The simple interest (SI) is calculated by multiplying the principal amount, time, and rate of interest and dividing by 100.
4. The resultant value of SI is printed to the console.
5. The main function returns 0 to indicate successful execution.

Equivalent SystemC code:
```scss
#include <systemc.h>

// Module that calculates simple interest
SC_MODULE(InterestCalculator) {
    sc_in<float> P;  // Principal amount
    sc_in<float> R;  // Rate of interest
    sc_in<float> T;  // Time
    sc_out<float> SI; // Simple interest

    // Constructor
    SC_CTOR(InterestCalculator) {
        // Process to calculate simple interest
        SC_METHOD(calculateInterest);
        sensitive << P << R << T;
    }

    // Method to calculate simple interest
    void calculateInterest() {
        SI.write((P.read() * T.read() * R.read()) / 100);
    }
};
```
In this SystemC code, we have defined an `InterestCalculator` module that takes in the principal amount, rate of interest, and time as inputs and outputs the simple interest. The `calculateInterest` method is sensitive to changes in the `P`, `R`, and `T` inputs and calculates the simple interest based on the given formula. The module can be used in a high-level synthesis flow by instantiating it in a larger design and connecting it to the appropriate ports.