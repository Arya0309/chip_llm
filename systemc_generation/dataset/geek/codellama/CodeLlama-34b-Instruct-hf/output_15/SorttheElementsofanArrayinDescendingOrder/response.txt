  **Inputs**:

* `int num[]`: An array of integers to be sorted.
* `int len`: The length of the `num` array.

**Outputs**:

* The sorted `num` array.

**Major Line-by-Line Explanation**:

1. `// C++ program to sort array in ascending order using Brute-force approach` - The function `sort` was written to sort an array of integers in ascending order.
2. `void sort(int num[], int len)` - The `sort` function accepts an array of integers and its length as parameters. It uses the Brute-force approach to sort the array.
3. `bool isSwapped` - This variable keeps track of whether the two elements being compared were swapped.
4. `for (int i = 0; i < len; i++)` - This for loop iterates through each element of the array.
5. `isSwapped = false` - As bubble sort is used, it is possible that the array is already sorted, so we set `isSwapped` to false initially.
6. `for (int j = 1; j < len - i; j++)` - This for loop moves through the array `len-i` times. It iterates through the array from the end to the beginning, comparing adjacent elements and swapping them if they are not in the correct order.
7. `if (num[j] < num[j - 1])` - This if statement checks if the two elements being compared are not in the correct order. If the element at position `j` is less than the element at position `j-1` (i.e., the previous element), swap them.
8. `swapNums(num, j, (j - 1))` - This function swaps the two elements if they need to be reordered. It takes the element at position `j` and position `j - 1` and swaps them.
9. `isSwapped = true` - If the if statement was executed, then `isSwapped` is set to true, indicating that a swap occurred.
10. `if (!isSwapped)` - If the array is already sorted and no elements were swapped in the inner loop, then the outer loop can be terminated early.

**Equivalent SystemC Code**:
```scss
#include <systemc.h>

// Define the sort module
SC_MODULE(Sort) {
    // Input ports
    sc_in<sc_int<32>> num[10];        // Integer array to be sorted
    sc_in<sc_int<32>> len;            // Integer array length
    
    // Output port
    sc_out<sc_int<32>> num_sorted[10]; // Sorted integer array
    
    // Constructor
    SC_CTOR(Sort) {
        // Sort the array
        SC_METHOD(sort);
        sensitive << num << len;
    }
    
    // Sort method
    void sort() {
        // Create a temporary array and identical output array
        sc_int<32> tmp_array[10];
        sc_int<32> sorted_array[10];
        for (int i = 0; i < 10; i++) {
            tmp_array[i] = num[i];
        }
        // Use bubble sort to sort the tmp_array
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9 - i; j++) {
                if (tmp_array[j] > tmp_array[j + 1]) {
                    // Swap elements
                    tmp_array[j] = tmp_array[j + 1];
                    tmp_array[j + 1] = tmp_array[j];
                }
            }
        }
        // Copy sorted elements to output array
        for (int i = 0; i < 10; i++) {
            sorted_array[i] = tmp_array[i];
        }
        // Output sorted array
        for (int i = 0; i < 10; i++) {
            num_sorted[i].write(sorted_array[i]);
        }
    }
};
```
Note that in the SystemC code, we use the `sc_int<32>` data type to represent the integer types in the C++ code. We also use the `sc_in` and `sc_out` port types to define the input and output ports, respectively. 

In addition, we have added the `sc_method` block to the sort module. This is used to sort the array using a bubble sort algorithm. The `sensitive` clause is used to specify that the sort method should be automatically triggered whenever the `num` or `len` input port changes.

Finally, we also added the `num_sorted` output port, which contains the sorted integer array. Note that since we have defined the output port as `sc_int<32>`, it will hold integer values, and we have connected the output port to the `num_sorted` output array.